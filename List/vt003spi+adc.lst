
AVRASM ver. 2.1.30  C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm Mon Jul 22 17:33:06 2013

C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1062): warning: Register r3 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1063): warning: Register r5 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1064): warning: Register r7 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1065): warning: Register r10 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1066): warning: Register r11 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1067): warning: Register r13 already defined by the .DEF directive
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1068): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega168P
                 ;Program type             : Application
                 ;Clock frequency          : 0,460800 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega168P
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1279
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rxEnable=R4
                 	.DEF _txEnable=R3
                 	.DEF _calibration_point1=R5
                 	.DEF _calibration_point2=R7
                 	.DEF _rangeIndex=R10
                 	.DEF _tmp_calibration=R11
                 	.DEF _crc=R13
                 	.DEF _dataToSave=R9
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0315 	JMP  __RESET
000002 940c 03d0 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 036e 	JMP  _timer0_ovf_isr
000022 940c 0417 	JMP  _spi_isr
000024 940c 0377 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 03aa 	JMP  _usart_tx_isr
00002a 940c 03f0 	JMP  _adc_isr
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _Parameter_mask:
000034 0100
000035 0302
000036 0504
000037 0706      	.DB  0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7
000038 0908
000039 0d0c
00003a 1511
00003b 1a19      	.DB  0x8,0x9,0xC,0xD,0x11,0x15,0x19,0x1A
00003c 3820
00003d 4744
00003e 4e4a
00003f 5652      	.DB  0x20,0x38,0x44,0x47,0x4A,0x4E,0x52,0x56
000040 5857
000041 605c
000042 6261
000043 6965      	.DB  0x57,0x58,0x5C,0x60,0x61,0x62,0x65,0x69
000044 716d
000045 7b75
000046 8786
000047 8988      	.DB  0x6D,0x71,0x75,0x7B,0x86,0x87,0x88,0x89
                 _Command_mask:
000048 0126
000049 0302
00004a 0504
00004b 0706      	.DB  0x26,0x1,0x2,0x3,0x4,0x5,0x6,0x7
00004c 0908
00004d 0909
00004e 0000
00004f 0000      	.DB  0x8,0x9,0x9,0x9,0x0,0x0,0x0,0x0
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000054 0a00
000055 0b0b
000056 0b0b
000057 0000      	.DB  0x0,0xA,0xB,0xB,0xB,0xB,0x0,0x0
000058 0000
000059 0000
00005a 0000
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0c0c
000062 0c0c
000063 0d0d      	.DB  0x0,0x0,0xC,0xC,0xC,0xC,0xD,0xD
000064 0d0d
000065 0000
000066 0000
000067 0000      	.DB  0xD,0xD,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0c00
00006e 0c0c
00006f 0a0c      	.DB  0x0,0x0,0x0,0xC,0xC,0xC,0xC,0xA
000070 0d0d
000071 0d0d
000072 0000
000073 0000      	.DB  0xD,0xD,0xD,0xD,0x0,0x0,0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000078 0000
000079 0000
00007a 000e
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0xE,0x0,0x0,0x0
00007c 0000
00007d 0000
00007e 0000
00007f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000080 0000
000081 0000
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000084 0000
000085 0000
000086 2600
000087 0201      	.DB  0x0,0x0,0x0,0x0,0x0,0x26,0x1,0x2
000088 0403
000089 0605
00008a 0807
00008b 0909      	.DB  0x3,0x4,0x5,0x6,0x7,0x8,0x9,0x9
00008c 0009
00008d 0000
00008e 0000
00008f 0000      	.DB  0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000090 0000
000091 0000
000092 0000
000093 1010      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10
000094 1010
000095 1010
000096 1010
000097 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
000098 1010
000099 1010
00009a 1010
00009b 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
00009c 1010
00009d 1010
00009e 1010
00009f 0f00      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x0,0xF
0000a0 0f0f
0000a1 0f0f
0000a2 110f
0000a3 1111      	.DB  0xF,0xF,0xF,0xF,0xF,0x11,0x11,0x11
0000a4 1111
0000a5 1111
0000a6 1111
0000a7 1111      	.DB  0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11
0000a8 1211
0000a9 1212
0000aa 0000
0000ab 0000      	.DB  0x11,0x12,0x12,0x12,0x0,0x0,0x0,0x0
0000ac 1313
0000ad 0a13
0000ae 1414
0000af 1414      	.DB  0x13,0x13,0x13,0xA,0x14,0x14,0x14,0x14
0000b0 1515
0000b1 1515
0000b2 1616
0000b3 1616      	.DB  0x15,0x15,0x15,0x15,0x16,0x16,0x16,0x16
0000b4 0000
0000b5 0000
0000b6 0000
0000b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b8 1700
0000b9 0a18
0000ba 1919
0000bb 1919      	.DB  0x0,0x17,0x18,0xA,0x19,0x19,0x19,0x19
0000bc 1a1a
0000bd 1a1a
0000be 2727
0000bf 2727      	.DB  0x1A,0x1A,0x1A,0x1A,0x27,0x27,0x27,0x27
0000c0 1c1b
0000c1 0000
0000c2 0000
0000c3 0000      	.DB  0x1B,0x1C,0x0,0x0,0x0,0x0,0x0,0x0
0000c4 0000
0000c5 1d1d
0000c6 001d
0000c7 0000      	.DB  0x0,0x0,0x1D,0x1D,0x1D,0x0,0x0,0x0
0000c8 0000
0000c9 0000
0000ca 0000
0000cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000cc 0000
0000cd 0000
0000ce 0000
0000cf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d0 0000
0000d1 1000
0000d2 1010
0000d3 1010      	.DB  0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x10
0000d4 1010
0000d5 1010
0000d6 1010
0000d7 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
0000d8 1010
0000d9 1010
0000da 1010
0000db 1010      	.DB  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10
0000dc 1010
0000dd 0010
0000de 0f0f
0000df 0f0f      	.DB  0x10,0x10,0x10,0x0,0xF,0xF,0xF,0xF
0000e0 0f0f
0000e1 1111
0000e2 1111
0000e3 1111      	.DB  0xF,0xF,0x11,0x11,0x11,0x11,0x11,0x11
0000e4 1111
0000e5 1111
0000e6 1111
0000e7 1212      	.DB  0x11,0x11,0x11,0x11,0x11,0x11,0x12,0x12
0000e8 0012
0000e9 0000
0000ea 1d00
0000eb 1d1d      	.DB  0x12,0x0,0x0,0x0,0x0,0x1D,0x1D,0x1D
0000ec 0000
0000ed 0000
0000ee 0000
0000ef 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000f0 0000
0000f1 0000
0000f2 0000
0000f3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000f4 0000
0000f5 0000
0000f6 0000
0000f7 190a      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0xA,0x19
0000f8 1919
0000f9 1a19
0000fa 1a1a
0000fb 001a      	.DB  0x19,0x19,0x19,0x1A,0x1A,0x1A,0x1A,0x0
0000fc 0000
0000fd 0000
0000fe 0000
0000ff 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000100 0000
000101 0000
000102 0000
000103 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000104 0000
000105 0000
000106 0000
000107 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000108 0000
000109 0000
00010a 0000
00010b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00010c 0000
00010d 0000
00010e 0000
00010f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000110 0000
000111 0000
000112 0000
000113 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000114 0000
000115 0000
000116 0000
000117 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000118 0000
000119 0000
00011a 0000
00011b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00011c 0000
00011d 0000
00011e 0000
00011f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000120 0000
000121 0000
000122 0000
000123 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000124 0000
000125 0000
000126 0000
000127 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000128 0000
000129 001e
00012a 0000
00012b 0000      	.DB  0x0,0x0,0x1E,0x0,0x0,0x0,0x0,0x0
00012c 0000
00012d 0000
00012e 0000
00012f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000130 0000
000131 0000
000132 0000
000133 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000134 0000
000135 0000
000136 0000
000137 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000138 0000
000139 0000
00013a 0000
00013b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013c 0000
00013d 0000
00013e 0000
00013f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000140 0000
000141 0000
000142 0000
000143 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000144 0000
000145 0000
000146 0000
000147 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000148 0000
000149 0000
00014a 0000
00014b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00014c 0000
00014d 0000
00014e 0000
00014f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000150 0000
000151 0000
000152 0000
000153 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000154 0000
000155 0000
000156 0000
000157 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000158 0000
000159 0000
00015a 0000
00015b 000a      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0xA,0x0
00015c 0000
00015d 0000
00015e 0000
00015f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000160 0000
000161 0000
000162 0000
000163 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000164 0000
000165 0000
000166 0000
000167 1f00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1F
000168 1f1f
000169 0000
00016a 0000
00016b 0000      	.DB  0x1F,0x1F,0x0,0x0,0x0,0x0,0x0,0x0
00016c 0000
00016d 0000
00016e 0000
00016f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000170 0000
000171 0000
000172 0000
000173 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000174 2020
000175 0020
000176 0000
000177 0000      	.DB  0x20,0x20,0x20,0x0,0x0,0x0,0x0,0x0
000178 0000
000179 0000
00017a 0000
00017b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00017c 0000
00017d 0000
00017e 0000
00017f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000180 2100
000181 0000
000182 0000
000183 0000      	.DB  0x0,0x21,0x0,0x0,0x0,0x0,0x0,0x0
000184 0000
000185 0000
000186 0000
000187 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000188 0000
000189 0000
00018a 0000
00018b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00018c 0000
00018d 2222
00018e 2222
00018f 2222      	.DB  0x0,0x0,0x22,0x22,0x22,0x22,0x22,0x22
000190 2727
000191 2727
000192 2727
000193 2727      	.DB  0x27,0x27,0x27,0x27,0x27,0x27,0x27,0x27
000194 2323
000195 2323
000196 2323
000197 2323      	.DB  0x23,0x23,0x23,0x23,0x23,0x23,0x23,0x23
000198 2323
000199 1300
00019a 1313
00019b 0000      	.DB  0x23,0x23,0x0,0x13,0x13,0x13,0x0,0x0
00019c 0000
00019d 0000
00019e 0000
00019f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001a0 0000
0001a1 0000
0001a2 0000
0001a3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001a4 0000
0001a5 0000
0001a6 0003
0001a7 0000      	.DB  0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0
0001a8 0000
0001a9 0000
0001aa 0000
0001ab 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001ac 0000
0001ad 0000
0001ae 0000
0001af 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b0 0000
0001b1 0000
0001b2 2400
0001b3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x24,0x0,0x0
0001b4 0000
0001b5 0000
0001b6 0000
0001b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001b8 0000
0001b9 0000
0001ba 0000
0001bb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001bc 0000
0001bd 0000
0001be 0000
0001bf 0025      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x25,0x0
0001c0 0000
0001c1 0000
0001c2 0000
0001c3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001c4 0000
0001c5 0000
0001c6 0000
0001c7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001c8 0000
0001c9 0000
0001ca 0000
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1210): warning: .cseg .db misalignment - padding zero byte
0001cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _Command_number:
0001cc 0100
0001cd 0302
0001ce 0b06
0001cf 0d0c      	.DB  0x0,0x1,0x2,0x3,0x6,0xB,0xC,0xD
0001d0 0f0e
0001d1 1110
0001d2 1312
0001d3 2423      	.DB  0xE,0xF,0x10,0x11,0x12,0x13,0x23,0x24
0001d4 2625
0001d5 2928
0001d6 2b2a
0001d7 2d2c      	.DB  0x25,0x26,0x28,0x29,0x2A,0x2B,0x2C,0x2D
0001d8 2f2e
0001d9 3130
0001da 6c3b
0001db 006d      	.DB  0x2E,0x2F,0x30,0x31,0x3B,0x6C,0x6D,0x0
0001dc 0000
0001dd 0100
0001de 0000
0001df 0000      	.DB  0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0
0001e0 0000
0001e1 0101
0001e2 0101
0001e3 0101      	.DB  0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1
0001e4 0101
0001e5 0101
0001e6 0101
0001e7 0101      	.DB  0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1
0001e8 0001
0001e9 0101
0001ea 0101
0001eb 0100      	.DB  0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x1
0001ec 0101
0001ed 0000
0001ee 0000
0001ef 0000      	.DB  0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0
0001f0 0000
0001f1 0000
0001f2 0000
0001f3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f4 0000
0001f5 0000
0001f6 0000
0001f7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f8 0000
0001f9 0100
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1223): warning: .cseg .db misalignment - padding zero byte
0001fa 0001      	.DB  0x0,0x0,0x0,0x1,0x1
                 _crctable:
0001fb 0000
0001fc c1c0
0001fd 81c1
0001fe 4001      	.DB  0x0,0x0,0xC0,0xC1,0xC1,0x81,0x1,0x40
0001ff 01c3
000200 c003
000201 8002
000202 41c2      	.DB  0xC3,0x1,0x3,0xC0,0x2,0x80,0xC2,0x41
000203 01c6
000204 c006
000205 8007
000206 41c7      	.DB  0xC6,0x1,0x6,0xC0,0x7,0x80,0xC7,0x41
000207 0005
000208 c1c5
000209 81c4
00020a 4004      	.DB  0x5,0x0,0xC5,0xC1,0xC4,0x81,0x4,0x40
00020b 01cc
00020c c00c
00020d 800d
00020e 41cd      	.DB  0xCC,0x1,0xC,0xC0,0xD,0x80,0xCD,0x41
00020f 000f
000210 c1cf
000211 81ce
000212 400e      	.DB  0xF,0x0,0xCF,0xC1,0xCE,0x81,0xE,0x40
000213 000a
000214 c1ca
000215 81cb
000216 400b      	.DB  0xA,0x0,0xCA,0xC1,0xCB,0x81,0xB,0x40
000217 01c9
000218 c009
000219 8008
00021a 41c8      	.DB  0xC9,0x1,0x9,0xC0,0x8,0x80,0xC8,0x41
00021b 01d8
00021c c018
00021d 8019
00021e 41d9      	.DB  0xD8,0x1,0x18,0xC0,0x19,0x80,0xD9,0x41
00021f 001b
000220 c1db
000221 81da
000222 401a      	.DB  0x1B,0x0,0xDB,0xC1,0xDA,0x81,0x1A,0x40
000223 001e
000224 c1de
000225 81df
000226 401f      	.DB  0x1E,0x0,0xDE,0xC1,0xDF,0x81,0x1F,0x40
000227 01dd
000228 c01d
000229 801c
00022a 41dc      	.DB  0xDD,0x1,0x1D,0xC0,0x1C,0x80,0xDC,0x41
00022b 0014
00022c c1d4
00022d 81d5
00022e 4015      	.DB  0x14,0x0,0xD4,0xC1,0xD5,0x81,0x15,0x40
00022f 01d7
000230 c017
000231 8016
000232 41d6      	.DB  0xD7,0x1,0x17,0xC0,0x16,0x80,0xD6,0x41
000233 01d2
000234 c012
000235 8013
000236 41d3      	.DB  0xD2,0x1,0x12,0xC0,0x13,0x80,0xD3,0x41
000237 0011
000238 c1d1
000239 81d0
00023a 4010      	.DB  0x11,0x0,0xD1,0xC1,0xD0,0x81,0x10,0x40
00023b 01f0
00023c c030
00023d 8031
00023e 41f1      	.DB  0xF0,0x1,0x30,0xC0,0x31,0x80,0xF1,0x41
00023f 0033
000240 c1f3
000241 81f2
000242 4032      	.DB  0x33,0x0,0xF3,0xC1,0xF2,0x81,0x32,0x40
000243 0036
000244 c1f6
000245 81f7
000246 4037      	.DB  0x36,0x0,0xF6,0xC1,0xF7,0x81,0x37,0x40
000247 01f5
000248 c035
000249 8034
00024a 41f4      	.DB  0xF5,0x1,0x35,0xC0,0x34,0x80,0xF4,0x41
00024b 003c
00024c c1fc
00024d 81fd
00024e 403d      	.DB  0x3C,0x0,0xFC,0xC1,0xFD,0x81,0x3D,0x40
00024f 01ff
000250 c03f
000251 803e
000252 41fe      	.DB  0xFF,0x1,0x3F,0xC0,0x3E,0x80,0xFE,0x41
000253 01fa
000254 c03a
000255 803b
000256 41fb      	.DB  0xFA,0x1,0x3A,0xC0,0x3B,0x80,0xFB,0x41
000257 0039
000258 c1f9
000259 81f8
00025a 4038      	.DB  0x39,0x0,0xF9,0xC1,0xF8,0x81,0x38,0x40
00025b 0028
00025c c1e8
00025d 81e9
00025e 4029      	.DB  0x28,0x0,0xE8,0xC1,0xE9,0x81,0x29,0x40
00025f 01eb
000260 c02b
000261 802a
000262 41ea      	.DB  0xEB,0x1,0x2B,0xC0,0x2A,0x80,0xEA,0x41
000263 01ee
000264 c02e
000265 802f
000266 41ef      	.DB  0xEE,0x1,0x2E,0xC0,0x2F,0x80,0xEF,0x41
000267 002d
000268 c1ed
000269 81ec
00026a 402c      	.DB  0x2D,0x0,0xED,0xC1,0xEC,0x81,0x2C,0x40
00026b 01e4
00026c c024
00026d 8025
00026e 41e5      	.DB  0xE4,0x1,0x24,0xC0,0x25,0x80,0xE5,0x41
00026f 0027
000270 c1e7
000271 81e6
000272 4026      	.DB  0x27,0x0,0xE7,0xC1,0xE6,0x81,0x26,0x40
000273 0022
000274 c1e2
000275 81e3
000276 4023      	.DB  0x22,0x0,0xE2,0xC1,0xE3,0x81,0x23,0x40
000277 01e1
000278 c021
000279 8020
00027a 41e0      	.DB  0xE1,0x1,0x21,0xC0,0x20,0x80,0xE0,0x41
00027b 01a0
00027c c060
00027d 8061
00027e 41a1      	.DB  0xA0,0x1,0x60,0xC0,0x61,0x80,0xA1,0x41
00027f 0063
000280 c1a3
000281 81a2
000282 4062      	.DB  0x63,0x0,0xA3,0xC1,0xA2,0x81,0x62,0x40
000283 0066
000284 c1a6
000285 81a7
000286 4067      	.DB  0x66,0x0,0xA6,0xC1,0xA7,0x81,0x67,0x40
000287 01a5
000288 c065
000289 8064
00028a 41a4      	.DB  0xA5,0x1,0x65,0xC0,0x64,0x80,0xA4,0x41
00028b 006c
00028c c1ac
00028d 81ad
00028e 406d      	.DB  0x6C,0x0,0xAC,0xC1,0xAD,0x81,0x6D,0x40
00028f 01af
000290 c06f
000291 806e
000292 41ae      	.DB  0xAF,0x1,0x6F,0xC0,0x6E,0x80,0xAE,0x41
000293 01aa
000294 c06a
000295 806b
000296 41ab      	.DB  0xAA,0x1,0x6A,0xC0,0x6B,0x80,0xAB,0x41
000297 0069
000298 c1a9
000299 81a8
00029a 4068      	.DB  0x69,0x0,0xA9,0xC1,0xA8,0x81,0x68,0x40
00029b 0078
00029c c1b8
00029d 81b9
00029e 4079      	.DB  0x78,0x0,0xB8,0xC1,0xB9,0x81,0x79,0x40
00029f 01bb
0002a0 c07b
0002a1 807a
0002a2 41ba      	.DB  0xBB,0x1,0x7B,0xC0,0x7A,0x80,0xBA,0x41
0002a3 01be
0002a4 c07e
0002a5 807f
0002a6 41bf      	.DB  0xBE,0x1,0x7E,0xC0,0x7F,0x80,0xBF,0x41
0002a7 007d
0002a8 c1bd
0002a9 81bc
0002aa 407c      	.DB  0x7D,0x0,0xBD,0xC1,0xBC,0x81,0x7C,0x40
0002ab 01b4
0002ac c074
0002ad 8075
0002ae 41b5      	.DB  0xB4,0x1,0x74,0xC0,0x75,0x80,0xB5,0x41
0002af 0077
0002b0 c1b7
0002b1 81b6
0002b2 4076      	.DB  0x77,0x0,0xB7,0xC1,0xB6,0x81,0x76,0x40
0002b3 0072
0002b4 c1b2
0002b5 81b3
0002b6 4073      	.DB  0x72,0x0,0xB2,0xC1,0xB3,0x81,0x73,0x40
0002b7 01b1
0002b8 c071
0002b9 8070
0002ba 41b0      	.DB  0xB1,0x1,0x71,0xC0,0x70,0x80,0xB0,0x41
0002bb 0050
0002bc c190
0002bd 8191
0002be 4051      	.DB  0x50,0x0,0x90,0xC1,0x91,0x81,0x51,0x40
0002bf 0193
0002c0 c053
0002c1 8052
0002c2 4192      	.DB  0x93,0x1,0x53,0xC0,0x52,0x80,0x92,0x41
0002c3 0196
0002c4 c056
0002c5 8057
0002c6 4197      	.DB  0x96,0x1,0x56,0xC0,0x57,0x80,0x97,0x41
0002c7 0055
0002c8 c195
0002c9 8194
0002ca 4054      	.DB  0x55,0x0,0x95,0xC1,0x94,0x81,0x54,0x40
0002cb 019c
0002cc c05c
0002cd 805d
0002ce 419d      	.DB  0x9C,0x1,0x5C,0xC0,0x5D,0x80,0x9D,0x41
0002cf 005f
0002d0 c19f
0002d1 819e
0002d2 405e      	.DB  0x5F,0x0,0x9F,0xC1,0x9E,0x81,0x5E,0x40
0002d3 005a
0002d4 c19a
0002d5 819b
0002d6 405b      	.DB  0x5A,0x0,0x9A,0xC1,0x9B,0x81,0x5B,0x40
0002d7 0199
0002d8 c059
0002d9 8058
0002da 4198      	.DB  0x99,0x1,0x59,0xC0,0x58,0x80,0x98,0x41
0002db 0188
0002dc c048
0002dd 8049
0002de 4189      	.DB  0x88,0x1,0x48,0xC0,0x49,0x80,0x89,0x41
0002df 004b
0002e0 c18b
0002e1 818a
0002e2 404a      	.DB  0x4B,0x0,0x8B,0xC1,0x8A,0x81,0x4A,0x40
0002e3 004e
0002e4 c18e
0002e5 818f
0002e6 404f      	.DB  0x4E,0x0,0x8E,0xC1,0x8F,0x81,0x4F,0x40
0002e7 018d
0002e8 c04d
0002e9 804c
0002ea 418c      	.DB  0x8D,0x1,0x4D,0xC0,0x4C,0x80,0x8C,0x41
0002eb 0044
0002ec c184
0002ed 8185
0002ee 4045      	.DB  0x44,0x0,0x84,0xC1,0x85,0x81,0x45,0x40
0002ef 0187
0002f0 c047
0002f1 8046
0002f2 4186      	.DB  0x87,0x1,0x47,0xC0,0x46,0x80,0x86,0x41
0002f3 0182
0002f4 c042
0002f5 8043
0002f6 4183      	.DB  0x82,0x1,0x42,0xC0,0x43,0x80,0x83,0x41
0002f7 0041
0002f8 c181
0002f9 8180
0002fa 4040      	.DB  0x41,0x0,0x81,0xC1,0x80,0x81,0x40,0x40
                 
                 _0x3:
0002fb 0000
0002fc 3f80      	.DB  0x0,0x0,0x80,0x3F
                 _0x4:
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1293): warning: .cseg .db misalignment - padding zero byte
0002fd 0001      	.DB  0x1
                 _0x5:
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1295): warning: .cseg .db misalignment - padding zero byte
0002fe 0002      	.DB  0x2
                 _0x6:
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1297): warning: .cseg .db misalignment - padding zero byte
0002ff 0001      	.DB  0x1
                 _0x7:
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1299): warning: .cseg .db misalignment - padding zero byte
000300 0005      	.DB  0x5
                 _0x123:
000301 0001      	.DB  0x1,0x0
                 _0x2020060:
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1303): warning: .cseg .db misalignment - padding zero byte
000302 0001      	.DB  0x1
                 _0x2020000:
000303 4e2d
000304 4e41
000305 4900
000306 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Documents and Settings\Metelkin\Рабочий стол\ДВСТ-3 - ПО контроллера исходники\List\vt003spi+adc.asm(1306): warning: .cseg .db misalignment - padding zero byte
000307 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000308 0001      	.DW  0x01
000309 027d      	.DW  _SPI_tEnd
00030a 05fe      	.DW  _0x6*2
                 
00030b 0001      	.DW  0x01
00030c 027f      	.DW  _preambula_bytes
00030d 0600      	.DW  _0x7*2
                 
00030e 0002      	.DW  0x02
00030f 0003      	.DW  0x03
000310 0602      	.DW  _0x123*2
                 
000311 0001      	.DW  0x01
000312 02de      	.DW  __seed_G101
000313 0604      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000314 0000      	.DW  0
                 
                 __RESET:
000315 94f8      	CLI
000316 27ee      	CLR  R30
000317 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000318 e0f1      	LDI  R31,1
000319 bff5      	OUT  MCUCR,R31
00031a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00031b e1f8      	LDI  R31,0x18
00031c 95a8      	WDR
00031d b7a4      	IN   R26,MCUSR
00031e 7fa7      	CBR  R26,8
00031f bfa4      	OUT  MCUSR,R26
000320 93f0 0060 	STS  WDTCSR,R31
000322 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000324 e08d      	LDI  R24,(14-2)+1
000325 e0a2      	LDI  R26,2
000326 27bb      	CLR  R27
                 __CLEAR_REG:
000327 93ed      	ST   X+,R30
000328 958a      	DEC  R24
000329 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00032a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00032b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00032c e0a0      	LDI  R26,LOW(__SRAM_START)
00032d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00032e 93ed      	ST   X+,R30
00032f 9701      	SBIW R24,1
000330 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000331 e1e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000332 e0f6      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000333 9185      	LPM  R24,Z+
000334 9195      	LPM  R25,Z+
000335 9700      	SBIW R24,0
000336 f061      	BREQ __GLOBAL_INI_END
000337 91a5      	LPM  R26,Z+
000338 91b5      	LPM  R27,Z+
000339 9005      	LPM  R0,Z+
00033a 9015      	LPM  R1,Z+
00033b 01bf      	MOVW R22,R30
00033c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00033d 9005      	LPM  R0,Z+
00033e 920d      	ST   X+,R0
00033f 9701      	SBIW R24,1
000340 f7e1      	BRNE __GLOBAL_INI_LOOP
000341 01fb      	MOVW R30,R22
000342 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000343 e0e0      	LDI  R30,__GPIOR0_INIT
000344 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000345 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000346 bfed      	OUT  SPL,R30
000347 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000348 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000349 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00034a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00034b 940c 0d7f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.03.4 Standard
                 ;Automatic Program Generator
                 ;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29.07.2010
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type           : ATmega168P
                 ;Program type        : Application
                 ;Clock frequency     : 1 MHz
                 ;Memory model        : Small
                 ;External RAM size   : 0
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;//#include <mega168.h>
                 ;
                 ;#include <delay.h>
                 ;
                 ;//#include <stdio.h>
                 ;
                 ;#include <data_arrays.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;
                 ;//#include <stdlib.h>
                 ;#include <math.h>
                 ;//#include <data_arrays.c>
                 ;
                 ;
                 ;char rxEnable=0, txEnable=1;
                 ;
                 ;
                 ;
                 ;
                 ;#define RXB8 1
                 ;#define TXB8 0
                 ;#define UPE 2
                 ;#define OVR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;//#define disable_uart UCSR0B=0xc0
                 ;//#define enable_uart UCSR0B=0xd8
                 ;//#define disable_uart UCSR0B=0x00
                 ;//#define enable_uart UCSR0B=0x18
                 ;//#define enable_transmit UCSR0B=0x08
                 ;//#define enable_recieve UCSR0B=0x10
                 ;#define alarm3_75mA 0x3c00
                 ;#define alarm22mA 0x6000
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define RxEn UCSR0B=(UCSR0B&0xc0)|0x10
                 ;#define TxEn UCSR0B=(UCSR0B&0xc0)|0x08
                 ;#define Transmit PORTD.3=0//=PORTD&0xf7
                 ;#define Recieve PORTD.3=1//PORTD|0x08
                 ;#define wait_startOCD EICRA=0x03
                 ;#define wait_stopOCD EICRA=0x00
                 ;#define disable_uart UCSR0B=0xc0
                 ;#define disable_eints {EIMSK=0x00;EIFR=0x00;}
                 ;#define enable_eints {EIMSK=0x01;EIFR=0x01;}
                 ;//#define enable_led PORTD=PORTD|0x40
                 ;//#define disable_led PORTD=PORTD&0xbf
                 ;#define start_wait_Rx_timer {TIMSK0=0x01;TCCR0A=0x00;TCCR0B=0x04;TCNT0=0xA0;}
                 ;#define stop_wait_Rx_timer {TIMSK0=0x00;TCCR0A=0x00;TCCR0B=0x00;TCNT0=0x00;}
                 ;#define disable_SPI {SPCR=0x12;}
                 ;#define enable_SPI {SPCR=0x52;}
                 ;#define DAC_max_val 0xffc0
                 ;#define mamps_toDAC_default_ratio 0.00024437928
                 ;#define setlevel_0_10 {PORTD.7=0;PORTD.6=0;}
                 ;#define setlevel_0_20 {PORTD.7=0;PORTD.6=1;}
                 ;#define setlevel_0_30 {PORTD.7=1;PORTD.6=0;}
                 ;#define setlevel_0_50 {PORTD.7=1;PORTD.6=1;}
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 64
                 ;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_10;
                 ;//eeprom unsigned int buf;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_10;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_20;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_20;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_30;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_30;
                 ;//eeprom unsigned int ADC_PV_calibration_point1_50;
                 ;//eeprom unsigned int ADC_PV_calibration_point2_50;
                 ;float DAC_to_current_ratio=1;
                 
                 	.DSEG
                 ;unsigned int calibration_point1;
                 ;unsigned int calibration_point2;
                 ;eeprom unsigned int ADC_PV_calibration_point1[4];
                 ;eeprom unsigned int ADC_PV_calibration_point2[4];
                 ;eeprom char rangeIndexEep;
                 ;eeprom char CalibrationConfigChanged;
                 ;eeprom float calibrationKeep[4];
                 ;eeprom float calibrationBeep[4];
                 ;eeprom int crceep = 0x0000;
                 ;eeprom const int crcstatic = 0x105D;
                 ;eeprom char tmpEepPriValCode = 0x6d;
                 ;//eeprom unsigned int serial_address=0x0000;
                 ;//flash const unsigned long *serial @0x00100;
                 ;char rangeIndex;
                 ;float calibrationK;
                 ;float calibrationB;
                 ;unsigned int tmp_calibration, crc;
                 ;unsigned int ADC_PV_zero_val=0x0001;
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;char string_tmp[4];
                 ;//char *str[4];
                 ;char com_data_rx[25];
                 ;float dynamic_variables[3];         //0 - скорость, 1 - ток, 2 - %диапазона
                 ;char dataToSave,sensor_address=0x02,com_bytes_rx=0,update_args_flag=0,p_bank_addr=0;
                 ;void transmit_HART(void); int check_recieved_message(); int generate_command_data_array_answer(char command_recieved);
                 ;void update_eeprom_parameters(char update_flag);
                 ;void start_transmit(int transmit_param); void clear_buffer();
                 ;void CalculateCalibrationRates();
                 ;void ResetDeviceSettings(char notreset);
                 ;void  CRC_update(unsigned char d);
                 ;void PerformDeviceApplicationErase();
                 ;void (*voidFuncPtr)(void);
                 ;int read_program_memory (int adr);
                 ;#if RX_BUFFER_SIZE0<256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0,echo;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0,SPI_data;
                 ;#endif
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0,printflag=0,RxTx=0,new_data=0,message_recieved=0,answering=0,burst_mode=0;
                 ;flash  int crctable[256]= {
                 ;        0x0000, 0xC1C0, 0x81C1, 0x4001, 0x01C3, 0xC003, 0x8002, 0x41C2, 0x01C6, 0xC006,
                 ;        0x8007, 0x41C7, 0x0005, 0xC1C5, 0x81C4, 0x4004, 0x01CC, 0xC00C, 0x800D, 0x41CD,
                 ;        0x000F, 0xC1CF, 0x81CE, 0x400E, 0x000A, 0xC1CA, 0x81CB, 0x400B, 0x01C9, 0xC009,
                 ;        0x8008, 0x41C8, 0x01D8, 0xC018, 0x8019, 0x41D9, 0x001B, 0xC1DB, 0x81DA, 0x401A,
                 ;        0x001E, 0xC1DE, 0x81DF, 0x401F, 0x01DD, 0xC01D, 0x801C, 0x41DC, 0x0014, 0xC1D4,
                 ;        0x81D5, 0x4015, 0x01D7, 0xC017, 0x8016, 0x41D6, 0x01D2, 0xC012, 0x8013, 0x41D3,
                 ;        0x0011, 0xC1D1, 0x81D0, 0x4010, 0x01F0, 0xC030, 0x8031, 0x41F1, 0x0033, 0xC1F3,
                 ;        0x81F2, 0x4032, 0x0036, 0xC1F6, 0x81F7, 0x4037, 0x01F5, 0xC035, 0x8034, 0x41F4,
                 ;        0x003C, 0xC1FC, 0x81FD, 0x403D, 0x01FF, 0xC03F, 0x803E, 0x41FE, 0x01FA, 0xC03A,
                 ;        0x803B, 0x41FB, 0x0039, 0xC1F9, 0x81F8, 0x4038, 0x0028, 0xC1E8, 0x81E9, 0x4029,
                 ;        0x01EB, 0xC02B, 0x802A, 0x41EA, 0x01EE, 0xC02E, 0x802F, 0x41EF, 0x002D, 0xC1ED,
                 ;        0x81EC, 0x402C, 0x01E4, 0xC024, 0x8025, 0x41E5, 0x0027, 0xC1E7, 0x81E6, 0x4026,
                 ;        0x0022, 0xC1E2, 0x81E3, 0x4023, 0x01E1, 0xC021, 0x8020, 0x41E0, 0x01A0, 0xC060,
                 ;        0x8061, 0x41A1, 0x0063, 0xC1A3, 0x81A2, 0x4062, 0x0066, 0xC1A6, 0x81A7, 0x4067,
                 ;        0x01A5, 0xC065, 0x8064, 0x41A4, 0x006C, 0xC1AC, 0x81AD, 0x406D, 0x01AF, 0xC06F,
                 ;        0x806E, 0x41AE, 0x01AA, 0xC06A, 0x806B, 0x41AB, 0x0069, 0xC1A9, 0x81A8, 0x4068,
                 ;        0x0078, 0xC1B8, 0x81B9, 0x4079, 0x01BB, 0xC07B, 0x807A, 0x41BA, 0x01BE, 0xC07E,
                 ;        0x807F, 0x41BF, 0x007D, 0xC1BD, 0x81BC, 0x407C, 0x01B4, 0xC074, 0x8075, 0x41B5,
                 ;        0x0077, 0xC1B7, 0x81B6, 0x4076, 0x0072, 0xC1B2, 0x81B3, 0x4073, 0x01B1, 0xC071,
                 ;        0x8070, 0x41B0, 0x0050, 0xC190, 0x8191, 0x4051, 0x0193, 0xC053, 0x8052, 0x4192,
                 ;        0x0196, 0xC056, 0x8057, 0x4197, 0x0055, 0xC195, 0x8194, 0x4054, 0x019C, 0xC05C,
                 ;	0x805D, 0x419D, 0x005F, 0xC19F, 0x819E, 0x405E, 0x005A, 0xC19A, 0x819B, 0x405B,
                 ;	0x0199, 0xC059, 0x8058, 0x4198, 0x0188, 0xC048, 0x8049, 0x4189, 0x004B, 0xC18B,
                 ;	0x818A, 0x404A, 0x004E, 0xC18E, 0x818F, 0x404F, 0x018D, 0xC04D, 0x804C, 0x418C,
                 ;	0x0044, 0xC184, 0x8185, 0x4045, 0x0187, 0xC047, 0x8046, 0x4186, 0x0182, 0xC042,
                 ;	0x8043, 0x4183, 0x0041, 0xC181, 0x8180, 0x4040};
                 ;long  adc_data, DAC_data, SPI_tData ;
                 ;char SPI_tEnd=1,checking_result=0,preambula_bytes=5,preambula_bytes_rec=0,bytes_quantity_ans=0,bytes_quantity_q=0,data_q=0, command_rx_val=0;
                 ;// USART Receiver interrupt service routine
                 ;char Command_data[25];
                 ;
                 ;int read_program_memory (int adr)
                 ; 0000 00A9 {
                 
                 	.CSEG
                 _read_program_memory:
                 ; 0000 00AA        #asm
                 ;	adr -> Y+0
                 ; 0000 00AB        LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
00034d 9165             LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
                 ; 0000 00AC        LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
00034e 9174             LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
                 ; 0000 00AD        MOV R30, R22;
00034f 2fe6             MOV R30, R22;
                 ; 0000 00AE        MOV R31, R23;
000350 2ff7             MOV R31, R23;
                 ; 0000 00AF        #endasm
                 ; 0000 00B0 }
000351 9622      	ADIW R28,2
000352 9508      	RET
                 ;void  CRC_update(unsigned char d)
                 ; 0000 00B2 {
                 _CRC_update:
                 ; 0000 00B3   //unsigned char uindex;
                 ; 0000 00B4   //uindex = CRCHigh^d;
                 ; 0000 00B5   //CRCHigh=CRCLow^((int)crctable[uindex]>>8);
                 ; 0000 00B6   //CRCLow=crctable[uindex];
                 ; 0000 00B7   //crc = CRCHigh;
                 ; 0000 00B8   //crc = ((int)crc)<<8+CRCLow;
                 ; 0000 00B9   crc = crctable[((crc>>8)^d)&0xFF] ^ (crc<<8);
                 ;	d -> Y+0
000353 2dee      	MOV  R30,R14
000354 70f0      	ANDI R31,HIGH(0x0)
000355 01df      	MOVW R26,R30
000356 81e8      	LD   R30,Y
000357 e0f0      	LDI  R31,0
000358 27ae      	EOR  R26,R30
000359 27bf      	EOR  R27,R31
00035a efef      	LDI  R30,LOW(255)
00035b e0f0      	LDI  R31,HIGH(255)
00035c 23ea      	AND  R30,R26
00035d 23fb      	AND  R31,R27
00035e efa6      	LDI  R26,LOW(_crctable*2)
00035f e0b3      	LDI  R27,HIGH(_crctable*2)
000360 0fee      	LSL  R30
000361 1fff      	ROL  R31
000362 0fea      	ADD  R30,R26
000363 1ffb      	ADC  R31,R27
000364 940e 1068 	CALL __GETW2PF
000366 2dfd      	MOV  R31,R13
000367 e0e0      	LDI  R30,LOW(0)
000368 27ea      	EOR  R30,R26
000369 27fb      	EOR  R31,R27
                +
00036a 2ede     +MOV R13 , R30
00036b 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 00BA }
00036c 9621      	ADIW R28,1
00036d 9508      	RET
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)     //таймер, который ждет необходимое число циклов, соответствующее появлению сигнала на детекторе несущей
                 ; 0000 00BD {
                 _timer0_ovf_isr:
00036e 93ea      	ST   -Y,R30
                 ; 0000 00BE enable_eints;
00036f e0e1      	LDI  R30,LOW(1)
000370 bbed      	OUT  0x1D,R30
000371 bbec      	OUT  0x1C,R30
                 ; 0000 00BF wait_stopOCD;
000372 e0e0      	LDI  R30,LOW(0)
000373 93e0 0069 	STS  105,R30
                 ; 0000 00C0 }
000375 91e9      	LD   R30,Y+
000376 9518      	RETI
                 ;
                 ;// Declare your global variables here
                 ;interrupt [USART_RXC] void usart_rx_isr(void)//прием по USART
                 ; 0000 00C4 {
                 _usart_rx_isr:
000377 93aa      	ST   -Y,R26
000378 93ea      	ST   -Y,R30
000379 93fa      	ST   -Y,R31
00037a b7ef      	IN   R30,SREG
00037b 93ea      	ST   -Y,R30
                 ; 0000 00C5 
                 ; 0000 00C6 char status,data;
                 ; 0000 00C7 #asm("cli")
00037c 931a      	ST   -Y,R17
00037d 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00037e 94f8      	cli
                 ; 0000 00C8 status=UCSR0A;
00037f 9110 00c0 	LDS  R17,192
                 ; 0000 00C9 
                 ; 0000 00CA data=UDR0;
000381 9100 00c6 	LDS  R16,198
                 ; 0000 00CB //#asm("sei")
                 ; 0000 00CC if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)//если нет ошибок, то читаем данные в буфере USART
000383 2fe1      	MOV  R30,R17
000384 71ec      	ANDI R30,LOW(0x1C)
000385 f4d9      	BRNE _0x8
                 ; 0000 00CD    {
                 ; 0000 00CE    rx_buffer0[rx_wr_index0]=data;
000386 91e0 0272 	LDS  R30,_rx_wr_index0
000388 e0f0      	LDI  R31,0
000389 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00038a 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00038b 8300      	ST   Z,R16
                 ; 0000 00CF    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
00038c 91a0 0272 	LDS  R26,_rx_wr_index0
00038e 5faf      	SUBI R26,-LOW(1)
00038f 93a0 0272 	STS  _rx_wr_index0,R26
000391 34a0      	CPI  R26,LOW(0x40)
000392 f419      	BRNE _0x9
000393 e0e0      	LDI  R30,LOW(0)
000394 93e0 0272 	STS  _rx_wr_index0,R30
                 ; 0000 00D0    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x9:
000396 91a0 0274 	LDS  R26,_rx_counter0
000398 5faf      	SUBI R26,-LOW(1)
000399 93a0 0274 	STS  _rx_counter0,R26
00039b 34a0      	CPI  R26,LOW(0x40)
00039c f421      	BRNE _0xA
                 ; 0000 00D1       {
                 ; 0000 00D2       rx_counter0=0;
00039d e0e0      	LDI  R30,LOW(0)
00039e 93e0 0274 	STS  _rx_counter0,R30
                 ; 0000 00D3       rx_buffer_overflow0=1;
0003a0 9af0      	SBI  0x1E,0
                 ; 0000 00D4 
                 ; 0000 00D5      };
                 _0xA:
                 ; 0000 00D6    };
                 _0x8:
                 ; 0000 00D7  #asm("sei")
0003a1 9478      	sei
                 ; 0000 00D8 }
0003a2 9109      	LD   R16,Y+
0003a3 9119      	LD   R17,Y+
0003a4 91e9      	LD   R30,Y+
0003a5 bfef      	OUT  SREG,R30
0003a6 91f9      	LD   R31,Y+
0003a7 91e9      	LD   R30,Y+
0003a8 91a9      	LD   R26,Y+
0003a9 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) //не используется
                 ; 0000 00DF {
                 ; 0000 00E0 char data;
                 ; 0000 00E1 while (rx_counter0==0);
                 ;	data -> R17
                 ; 0000 00E2 data=rx_buffer0[rx_rd_index0];
                 ; 0000 00E3 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
                 ; 0000 00E4 #asm("cli")
                 ; 0000 00E5 --rx_counter0;
                 ; 0000 00E6 #asm("sei")
                 ; 0000 00E7 return data;
                 ; 0000 00E8 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 64
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0<256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)//передача по USART соответственно
                 ; 0000 00F8 {
                 _usart_tx_isr:
0003aa 93aa      	ST   -Y,R26
0003ab 93ea      	ST   -Y,R30
0003ac 93fa      	ST   -Y,R31
0003ad b7ef      	IN   R30,SREG
0003ae 93ea      	ST   -Y,R30
                 ; 0000 00F9 #asm("cli")
0003af 94f8      	cli
                 ; 0000 00FA if (tx_counter0)
0003b0 91e0 02dd 	LDS  R30,_tx_counter0
0003b2 30e0      	CPI  R30,0
0003b3 f0a9      	BREQ _0x11
                 ; 0000 00FB    {
                 ; 0000 00FC    --tx_counter0;
0003b4 50e1      	SUBI R30,LOW(1)
0003b5 93e0 02dd 	STS  _tx_counter0,R30
                 ; 0000 00FD 
                 ; 0000 00FE    UDR0=tx_buffer0[tx_rd_index0];
0003b7 91e0 02dc 	LDS  R30,_tx_rd_index0
0003b9 e0f0      	LDI  R31,0
0003ba 56e4      	SUBI R30,LOW(-_tx_buffer0)
0003bb 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0003bc 81e0      	LD   R30,Z
0003bd 93e0 00c6 	STS  198,R30
                 ; 0000 00FF 
                 ; 0000 0100    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0003bf 91a0 02dc 	LDS  R26,_tx_rd_index0
0003c1 5faf      	SUBI R26,-LOW(1)
0003c2 93a0 02dc 	STS  _tx_rd_index0,R26
0003c4 34a0      	CPI  R26,LOW(0x40)
0003c5 f419      	BRNE _0x12
0003c6 e0e0      	LDI  R30,LOW(0)
0003c7 93e0 02dc 	STS  _tx_rd_index0,R30
                 ; 0000 0101    };
                 _0x12:
                 _0x11:
                 ; 0000 0102    #asm("sei")
0003c9 9478      	sei
                 ; 0000 0103 }
0003ca 91e9      	LD   R30,Y+
0003cb bfef      	OUT  SREG,R30
0003cc 91f9      	LD   R31,Y+
0003cd 91e9      	LD   R30,Y+
0003ce 91a9      	LD   R26,Y+
0003cf 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)                                       //не используется
                 ; 0000 010A {
                 ; 0000 010B //while (tx_counter0 == TX_BUFFER_SIZE0);
                 ; 0000 010C //#asm("cli")
                 ; 0000 010D //if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
                 ; 0000 010E //   {
                 ; 0000 010F //   tx_buffer0[tx_wr_index0]=c;
                 ; 0000 0110 //   if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
                 ; 0000 0111 //   ++tx_counter0;
                 ; 0000 0112 //   }
                 ; 0000 0113 //else
                 ; 0000 0114 while ((UCSR0A & DATA_REGISTER_EMPTY)==0)
                 ;	c -> Y+0
                 ; 0000 0115    UDR0=c;
                 ; 0000 0117 }
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)//первоначально прерывание работает по нарастающему уровню (set_rising_edge_int), а затем ловим низкий (set_falling_edge_int), это устанавливаем уже в таймере, с последующим запуском нашего любимого таймера.1-п                 рием, 0- передача.
                 ; 0000 011C //изменено, таймер, отсчитывающий задержку, сейчас не активен, пользуемся только OCD ногой модема
                 ; 0000 011D {
0003d0 93aa      _ext_int0_isr:
0003d1 93ea      	ST   -Y,R26
0003d2 b7ef      	ST   -Y,R30
0003d3 93ea      	IN   R30,SREG
                 	ST   -Y,R30
                 ; 0000 011E //RxTx=!RxTx;//RxTx=0 =>no recieve ||RxTx=1 => recieve||
                 ; 0000 011F //if(RxTx)Recieve;
0003d4 91a0 0069 ; 0000 0120 if(EICRA==0x03)                    //если сработало прерывание по верхнему уровню, то переключаемся на отлов нижнего уровня и наоборот
0003d6 30a3      	LDS  R26,105
0003d7 f461      	CPI  R26,LOW(0x3)
                 	BRNE _0x16
                 ; 0000 0121                 {
0003d8 9a5b      ; 0000 0122                 Recieve;
                 	SBI  0xB,3
0003d9 91e0 00c1 ; 0000 0123                 RxEn;
0003db 7ce0      	LDS  R30,193
0003dc 61e0      	ANDI R30,LOW(0xC0)
0003dd 93e0 00c1 	ORI  R30,0x10
                 	STS  193,R30
                 ; 0000 0124                 //wait_stopOCD;
                 ; 0000 0125                 //start_wait_Rx_timer;
                 ; 0000 0126                 //disable_eints;
0003df e0e0      ; 0000 0127                 wait_stopOCD;           //EICRA=0x00
0003e0 93e0 0069 	LDI  R30,LOW(0)
                 	STS  105,R30
0003e2 98f4      ; 0000 0128                 message_recieved=0;
                 	CBI  0x1E,4
                 ; 0000 0129                 //mono_channel_mode;
                 ; 0000 012A                 }
0003e3 c007      ; 0000 012B else
                 	RJMP _0x1B
                 _0x16:
                 ; 0000 012C                 {
                 ; 0000 012D                 //Transmit;
                 ; 0000 012E 
                 ; 0000 012F                 //stop_wait_Rx_timer;
0003e4 e0e3      ; 0000 0130                 wait_startOCD;            //EICRA=0x03
0003e5 93e0 0069 	LDI  R30,LOW(3)
                 	STS  105,R30
0003e7 ece0      ; 0000 0131                 disable_uart;             //отключаем USART, переходим в режим приема
0003e8 93e0 00c1 	LDI  R30,LOW(192)
                 	STS  193,R30
0003ea 9af4      ; 0000 0132                 message_recieved=1;
                 	SBI  0x1E,4
                 ; 0000 0133 
                 ; 0000 0134                 }
                 _0x1B:
                 ; 0000 0135 //start_check_OCD_timer;//стартуем таймер отсчитывающий задержку 3.33 мс (4 цикла при минимальной частоте 1200Гц)
                 ; 0000 0136 
0003eb 91e9      ; 0000 0137 }
0003ec bfef      	LD   R30,Y+
0003ed 91e9      	OUT  SREG,R30
0003ee 91a9      	LD   R30,Y+
0003ef 9518      	LD   R26,Y+
                 	RETI
                 ;
                 ;
                 ;#pragma used-
                 ;#endif
                 ;// ADC interrupt service routine
                 ;interrupt [ADC_INT] void adc_isr(void)//прерывания ацп по завершению преобразования
                 ; 0000 013E {
0003f0 936a      _adc_isr:
0003f1 937a      	ST   -Y,R22
0003f2 938a      	ST   -Y,R23
0003f3 93ea      	ST   -Y,R24
0003f4 93fa      	ST   -Y,R30
0003f5 b7ef      	ST   -Y,R31
0003f6 93ea      	IN   R30,SREG
                 	ST   -Y,R30
                 ; 0000 013F //#asm("cli")
                +
0003f7 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003f8 958a     +DEC R24
0003f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 0141 adc_data=ADCW;
0003fa 91e0 0078 	LDS  R30,120
0003fc 91f0 0079 	LDS  R31,120+1
0003fe 2766      	CLR  R22
0003ff 2777      	CLR  R23
000400 93e0 0275 	STS  _adc_data,R30
000402 93f0 0276 	STS  _adc_data+1,R31
000404 9360 0277 	STS  _adc_data+2,R22
000406 9370 0278 	STS  _adc_data+3,R23
                 ; 0000 0142 printflag=1;
000408 9af1      	SBI  0x1E,1
                 ; 0000 0143 ADMUX=0x20;
000409 e2e0      	LDI  R30,LOW(32)
00040a 93e0 007c 	STS  124,R30
                 ; 0000 0144 ADCSRA=0x4f;
00040c e4ef      	LDI  R30,LOW(79)
00040d 93e0 007a 	STS  122,R30
                 ; 0000 0145 //#asm("sei")
                 ; 0000 0146 }
00040f 91e9      	LD   R30,Y+
000410 bfef      	OUT  SREG,R30
000411 91f9      	LD   R31,Y+
000412 91e9      	LD   R30,Y+
000413 9189      	LD   R24,Y+
000414 9179      	LD   R23,Y+
000415 9169      	LD   R22,Y+
000416 9518      	RETI
                 ;
                 ;
                 ;// SPI interrupt service routine
                 ;interrupt [SPI_STC] void spi_isr(void)       //прерывание по SPI, в случае, если один фрейм SPI отправлен, оно срабатывает
                 ; 0000 014B {                                              // в случае необходимости, либо продлевает фрейм, либо финализирует
                 _spi_isr:
000417 93ea      	ST   -Y,R30
000418 b7ef      	IN   R30,SREG
000419 93ea      	ST   -Y,R30
                 ; 0000 014C 
                 ; 0000 014D //#asm
                 ; 0000 014E   //  in   r30,spsr
                 ; 0000 014F   //  in   r30,spdr
                 ; 0000 0150 //#endasm
                 ; 0000 0151 //data=SPDR;
                 ; 0000 0152 //SPCR=0xD0;
                 ; 0000 0153 //SPSR=0x00;
                 ; 0000 0154 // Place your code here
                 ; 0000 0155 if(SPI_tEnd==0){
00041a 91e0 027d 	LDS  R30,_SPI_tEnd
00041c 30e0      	CPI  R30,0
00041d f431      	BRNE _0x20
                 ; 0000 0156 SPDR=0xff;
00041e efef      	LDI  R30,LOW(255)
00041f bdee      	OUT  0x2E,R30
                 ; 0000 0157 SPI_tEnd=1;
000420 e0e1      	LDI  R30,LOW(1)
000421 93e0 027d 	STS  _SPI_tEnd,R30
                 ; 0000 0158 }
                 ; 0000 0159 else PORTB.2=0;
000423 c001      	RJMP _0x21
                 _0x20:
000424 982a      	CBI  0x5,2
                 ; 0000 015A ADCSRA=0xcf;
                 _0x21:
000425 ecef      	LDI  R30,LOW(207)
000426 93e0 007a 	STS  122,R30
                 ; 0000 015B 
                 ; 0000 015C }
000428 91e9      	LD   R30,Y+
000429 bfef      	OUT  SREG,R30
00042a 91e9      	LD   R30,Y+
00042b 9518      	RETI
                 ;
                 ;void transmit_SPI(unsigned int SPI_data,char SPI_mode){//4 режима работы: 2-норма, 0-авария 3.75мА, 1-авария 22мА, 3-моноканал
                 ; 0000 015E void transmit_SPI(unsigned int SPI_data,char SPI_mode){
                 _transmit_SPI:
                 ; 0000 015F //#asm ("cli")                                          //прерывания мы здесь не используем, потому как с ними получается какой-то гемор
                 ; 0000 0160 delay_us(10);
                 ;	SPI_data -> Y+1
                 ;	SPI_mode -> Y+0
                +
00042c e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00042d 958a     +DEC R24
00042e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 0161 PORTB.2=0;
00042f 982a      	CBI  0x5,2
                 ; 0000 0162 if(SPI_mode<2)
000430 81a8      	LD   R26,Y
000431 30a2      	CPI  R26,LOW(0x2)
000432 f470      	BRSH _0x26
                 ; 0000 0163 {
                 ; 0000 0164 SPDR=SPI_mode;
000433 81e8      	LD   R30,Y
000434 bdee      	OUT  0x2E,R30
                 ; 0000 0165 if(SPI_mode==0)SPI_data=alarm3_75mA;
000435 30e0      	CPI  R30,0
000436 f419      	BRNE _0x27
000437 e0e0      	LDI  R30,LOW(15360)
000438 e3fc      	LDI  R31,HIGH(15360)
000439 c002      	RJMP _0x11E
                 ; 0000 0166 else SPI_data=alarm22mA;
                 _0x27:
00043a e0e0      	LDI  R30,LOW(24576)
00043b e6f0      	LDI  R31,HIGH(24576)
                 _0x11E:
00043c 83e9      	STD  Y+1,R30
00043d 83fa      	STD  Y+1+1,R31
                 ; 0000 0167 while(SPSR<0x80){;}
                 _0x29:
00043e b5ed      	IN   R30,0x2D
00043f 38e0      	CPI  R30,LOW(0x80)
000440 f3e8      	BRLO _0x29
                 ; 0000 0168 }
                 ; 0000 0169 if(SPI_mode==3){
                 _0x26:
000441 81a8      	LD   R26,Y
000442 30a3      	CPI  R26,LOW(0x3)
000443 f419      	BRNE _0x2C
                 ; 0000 016A SPI_data=0;}
000444 e0e0      	LDI  R30,LOW(0)
000445 83e9      	STD  Y+1,R30
000446 83ea      	STD  Y+1+1,R30
                 ; 0000 016B if(SPI_mode==2)
                 _0x2C:
000447 81a8      	LD   R26,Y
000448 30a2      	CPI  R26,LOW(0x2)
000449 f479      	BRNE _0x2D
                 ; 0000 016C {
                 ; 0000 016D SPDR=(long)(DAC_data>>16);
00044a 91a0 0279 	LDS  R26,_DAC_data
00044c 91b0 027a 	LDS  R27,_DAC_data+1
00044e 9180 027b 	LDS  R24,_DAC_data+2
000450 9190 027c 	LDS  R25,_DAC_data+3
000452 e1e0      	LDI  R30,LOW(16)
000453 940e 1027 	CALL __ASRD12
000455 bdee      	OUT  0x2E,R30
                 ; 0000 016E while(SPSR<0x80){;}
                 _0x2E:
000456 b5ed      	IN   R30,0x2D
000457 38e0      	CPI  R30,LOW(0x80)
000458 f3e8      	BRLO _0x2E
                 ; 0000 016F }
                 ; 0000 0170 SPDR=SPI_data>>8;
                 _0x2D:
000459 81ea      	LDD  R30,Y+2
00045a 70f0      	ANDI R31,HIGH(0x0)
00045b bdee      	OUT  0x2E,R30
                 ; 0000 0171 PORTB.2=0;
00045c 982a      	CBI  0x5,2
                 ; 0000 0172 while(SPSR<0x80){;}
                 _0x33:
00045d b5ed      	IN   R30,0x2D
00045e 38e0      	CPI  R30,LOW(0x80)
00045f f3e8      	BRLO _0x33
                 ; 0000 0173 SPDR=SPI_data;
000460 81e9      	LDD  R30,Y+1
000461 bdee      	OUT  0x2E,R30
                 ; 0000 0174 while(SPSR<0x80){;}
                 _0x36:
000462 b5ed      	IN   R30,0x2D
000463 38e0      	CPI  R30,LOW(0x80)
000464 f3e8      	BRLO _0x36
                 ; 0000 0175 //#asm ("sei")
                 ; 0000 0176 }
000465 9623      	ADIW R28,3
000466 9508      	RET
                 ;
                 ;
                 ;void transmit_HART(void)//подпрограмма передачи в по HART
                 ; 0000 017A {
                 _transmit_HART:
                 ; 0000 017B int error_log;
                 ; 0000 017C error_log=check_recieved_message();    //здесь проверяем корректность принятого сообщения и устанавливаем значение переменной "результат проверки"
000467 931a      	ST   -Y,R17
000468 930a      	ST   -Y,R16
                 ;	error_log -> R16,R17
000469 d2f3      	RCALL _check_recieved_message
00046a 018f      	MOVW R16,R30
                 ; 0000 017D if(answering)                         //если нужен ответ
00046b 9bf5      	SBIS 0x1E,5
00046c c01c      	RJMP _0x39
                 ; 0000 017E         {
                 ; 0000 017F         if (!error_log)               //ошибок нет
00046d 2e00      	MOV  R0,R16
00046e 2a01      	OR   R0,R17
00046f f469      	BRNE _0x3A
                 ; 0000 0180                 {
                 ; 0000 0181                 checking_result=0;                //сбрасываем "результат проверки"
000470 e0e0      	LDI  R30,LOW(0)
000471 93e0 027e 	STS  _checking_result,R30
                 ; 0000 0182                 rx_wr_index0=0;
000473 93e0 0272 	STS  _rx_wr_index0,R30
                 ; 0000 0183                 rx_buffer_overflow0=0;
000475 98f0      	CBI  0x1E,0
                 ; 0000 0184                 error_log=error_log|(generate_command_data_array_answer(command_rx_val));//здесь обращаемся в генератор массивов ответов по HART
000476 91e0 0282 	LDS  R30,_command_rx_val
000478 93ea      	ST   -Y,R30
000479 d16a      	RCALL _generate_command_data_array_answer
                +
00047a 2b0e     +OR R16 , R30
00047b 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0000 0185                 start_transmit(error_log);
00047c c008      	RJMP _0x11F
                 ; 0000 0186                 }
                 ; 0000 0187         else
                 _0x3A:
                 ; 0000 0188                 { //соответственно, если ошибки есть
                 ; 0000 0189                 //PORTD=0x08;
                 ; 0000 018A                 Recieve;
00047d 9a5b      	SBI  0xB,3
                 ; 0000 018B                 rx_buffer_overflow0=0;
00047e 98f0      	CBI  0x1E,0
                 ; 0000 018C                 checking_result=0;
00047f e0e0      	LDI  R30,LOW(0)
000480 93e0 027e 	STS  _checking_result,R30
                 ; 0000 018D                 rx_wr_index0=0;
000482 93e0 0272 	STS  _rx_wr_index0,R30
                 ; 0000 018E                 message_recieved=0;
000484 98f4      	CBI  0x1E,4
                 ; 0000 018F                 start_transmit(error_log);
                 _0x11F:
000485 931a      	ST   -Y,R17
000486 930a      	ST   -Y,R16
000487 d012      	RCALL _start_transmit
                 ; 0000 0190                 }
                 ; 0000 0191         }
                 ; 0000 0192 else                              //ответ по HART не нужен
000488 c00d      	RJMP _0x44
                 _0x39:
                 ; 0000 0193         {
                 ; 0000 0194         rx_buffer_overflow0=0;
000489 98f0      	CBI  0x1E,0
                 ; 0000 0195         checking_result=0;
00048a e0e0      	LDI  R30,LOW(0)
00048b 93e0 027e 	STS  _checking_result,R30
                 ; 0000 0196         rx_wr_index0=0;
00048d 93e0 0272 	STS  _rx_wr_index0,R30
                 ; 0000 0197         RxEn;
00048f 91e0 00c1 	LDS  R30,193
000491 7ce0      	ANDI R30,LOW(0xC0)
000492 61e0      	ORI  R30,0x10
000493 93e0 00c1 	STS  193,R30
                 ; 0000 0198         Recieve;
000495 9a5b      	SBI  0xB,3
                 ; 0000 0199         }
                 _0x44:
                 ; 0000 019A clear_buffer();
000496 d461      	RCALL _clear_buffer
                 ; 0000 019B }
000497 9109      	LD   R16,Y+
000498 9119      	LD   R17,Y+
000499 9508      	RET
                 ;
                 ;void start_transmit(int transmit_param)
                 ; 0000 019E {
                 _start_transmit:
                 ; 0000 019F char i=0,j=0;
                 ; 0000 01A0 char check_sum_tx=0;
                 ; 0000 01A1 while(UCSR0A<0x20){;}
00049a 940e 10ba 	CALL __SAVELOCR4
                 ;	transmit_param -> Y+4
                 ;	i -> R17
                 ;	j -> R16
                 ;	check_sum_tx -> R19
00049c e010      	LDI  R17,0
00049d e000      	LDI  R16,0
00049e e030      	LDI  R19,0
                 _0x49:
00049f 91a0 00c0 	LDS  R26,192
0004a1 32a0      	CPI  R26,LOW(0x20)
0004a2 f3e0      	BRLO _0x49
                 ; 0000 01A2 //if(!RxTx){
                 ; 0000 01A3 preambula_bytes=Parameter_bank[3];
                +
0004a3 e0a3     +LDI R26 , LOW ( _Parameter_bank + ( 3 ) )
0004a4 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 3 ) )
                 	__POINTW2MN _Parameter_bank,3
0004a5 940e 1085 	CALL __EEPROMRDB
0004a7 93e0 027f 	STS  _preambula_bytes,R30
                 ; 0000 01A4 delay_ms(25);
0004a9 e1e9      	LDI  R30,LOW(25)
0004aa e0f0      	LDI  R31,HIGH(25)
0004ab 93fa      	ST   -Y,R31
0004ac 93ea      	ST   -Y,R30
0004ad 940e 0e71 	CALL _delay_ms
                 ; 0000 01A5 Transmit;
0004af 985b      	CBI  0xB,3
                 ; 0000 01A6 TxEn;
0004b0 91e0 00c1 	LDS  R30,193
0004b2 7ce0      	ANDI R30,LOW(0xC0)
0004b3 60e8      	ORI  R30,8
0004b4 93e0 00c1 	STS  193,R30
                 ; 0000 01A7 delay_ms(15);
0004b6 e0ef      	LDI  R30,LOW(15)
0004b7 e0f0      	LDI  R31,HIGH(15)
0004b8 93fa      	ST   -Y,R31
0004b9 93ea      	ST   -Y,R30
0004ba 940e 0e71 	CALL _delay_ms
                 ; 0000 01A8 for (i=0;i<preambula_bytes;i++)
0004bc e010      	LDI  R17,LOW(0)
                 _0x4F:
0004bd 91e0 027f 	LDS  R30,_preambula_bytes
0004bf 171e      	CP   R17,R30
0004c0 f468      	BRSH _0x50
                 ; 0000 01A9         {
                 ; 0000 01AA         tx_buffer0[i]=0xff;
0004c1 2fe1      	MOV  R30,R17
0004c2 e0f0      	LDI  R31,0
0004c3 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004c4 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004c5 efaf      	LDI  R26,LOW(255)
0004c6 83a0      	STD  Z+0,R26
                 ; 0000 01AB         tx_counter0++;
0004c7 91e0 02dd 	LDS  R30,_tx_counter0
0004c9 5fef      	SUBI R30,-LOW(1)
0004ca 93e0 02dd 	STS  _tx_counter0,R30
                 ; 0000 01AC         }
0004cc 5f1f      	SUBI R17,-1
0004cd cfef      	RJMP _0x4F
                 _0x50:
                 ; 0000 01AD //i++;
                 ; 0000 01AE if(burst_mode)tx_buffer0[i]=0x01;//стартовый байт
0004ce 9bf6      	SBIS 0x1E,6
0004cf c006      	RJMP _0x51
0004d0 2fe1      	MOV  R30,R17
0004d1 e0f0      	LDI  R31,0
0004d2 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004d3 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004d4 e0a1      	LDI  R26,LOW(1)
0004d5 c005      	RJMP _0x120
                 ; 0000 01AF else tx_buffer0[i]=0x06;
                 _0x51:
0004d6 2fe1      	MOV  R30,R17
0004d7 e0f0      	LDI  R31,0
0004d8 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004d9 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004da e0a6      	LDI  R26,LOW(6)
                 _0x120:
0004db 83a0      	STD  Z+0,R26
                 ; 0000 01B0 check_sum_tx=check_sum_tx^tx_buffer0[i];
0004dc 2fe1      	MOV  R30,R17
0004dd e0f0      	LDI  R31,0
0004de 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004df 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004e0 81e0      	LD   R30,Z
0004e1 273e      	EOR  R19,R30
                 ; 0000 01B1 i++;
0004e2 5f1f      	SUBI R17,-1
                 ; 0000 01B2 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//адрес
0004e3 2fe1      	MOV  R30,R17
0004e4 e0f0      	LDI  R31,0
0004e5 01bf      	MOVW R22,R30
0004e6 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004e7 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004e8 010f      	MOVW R0,R30
0004e9 91a0 0280 	LDS  R26,_preambula_bytes_rec
0004eb 27bb      	CLR  R27
0004ec 91e0 027f 	LDS  R30,_preambula_bytes
0004ee e0f0      	LDI  R31,0
0004ef 1bae      	SUB  R26,R30
0004f0 0bbf      	SBC  R27,R31
0004f1 01fb      	MOVW R30,R22
0004f2 0fea      	ADD  R30,R26
0004f3 1ffb      	ADC  R31,R27
0004f4 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0004f5 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0004f6 81e0      	LD   R30,Z
0004f7 01d0      	MOVW R26,R0
0004f8 93ec      	ST   X,R30
                 ; 0000 01B3 check_sum_tx=check_sum_tx^tx_buffer0[i];
0004f9 2fe1      	MOV  R30,R17
0004fa e0f0      	LDI  R31,0
0004fb 56e4      	SUBI R30,LOW(-_tx_buffer0)
0004fc 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0004fd 81e0      	LD   R30,Z
0004fe 273e      	EOR  R19,R30
                 ; 0000 01B4 i++;
0004ff 5f1f      	SUBI R17,-1
                 ; 0000 01B5 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//команда
000500 2fe1      	MOV  R30,R17
000501 e0f0      	LDI  R31,0
000502 01bf      	MOVW R22,R30
000503 56e4      	SUBI R30,LOW(-_tx_buffer0)
000504 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000505 010f      	MOVW R0,R30
000506 91a0 0280 	LDS  R26,_preambula_bytes_rec
000508 27bb      	CLR  R27
000509 91e0 027f 	LDS  R30,_preambula_bytes
00050b e0f0      	LDI  R31,0
00050c 1bae      	SUB  R26,R30
00050d 0bbf      	SBC  R27,R31
00050e 01fb      	MOVW R30,R22
00050f 0fea      	ADD  R30,R26
000510 1ffb      	ADC  R31,R27
000511 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000512 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000513 81e0      	LD   R30,Z
000514 01d0      	MOVW R26,R0
000515 93ec      	ST   X,R30
                 ; 0000 01B6 check_sum_tx=check_sum_tx^tx_buffer0[i];
000516 2fe1      	MOV  R30,R17
000517 e0f0      	LDI  R31,0
000518 56e4      	SUBI R30,LOW(-_tx_buffer0)
000519 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00051a 81e0      	LD   R30,Z
00051b 273e      	EOR  R19,R30
                 ; 0000 01B7 i++;
00051c 5f1f      	SUBI R17,-1
                 ; 0000 01B8 if(!transmit_param)
00051d 81ec      	LDD  R30,Y+4
00051e 81fd      	LDD  R31,Y+4+1
00051f 9730      	SBIW R30,0
000520 f011      	BREQ PC+3
000521 940c 0566 	JMP _0x53
                 ; 0000 01B9         {
                 ; 0000 01BA         tx_buffer0[i]=bytes_quantity_ans+2;                                                  //число байт  //нужно создать массив с количеством байт для конкретной команды
000523 2fa1      	MOV  R26,R17
000524 e0b0      	LDI  R27,0
000525 56a4      	SUBI R26,LOW(-_tx_buffer0)
000526 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
000527 91e0 0281 	LDS  R30,_bytes_quantity_ans
000529 5fee      	SUBI R30,-LOW(2)
00052a 93ec      	ST   X,R30
                 ; 0000 01BB         check_sum_tx=check_sum_tx^tx_buffer0[i];
00052b 2fe1      	MOV  R30,R17
00052c e0f0      	LDI  R31,0
00052d 56e4      	SUBI R30,LOW(-_tx_buffer0)
00052e 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00052f 81e0      	LD   R30,Z
000530 273e      	EOR  R19,R30
                 ; 0000 01BC         i++;
000531 5f1f      	SUBI R17,-1
                 ; 0000 01BD         tx_buffer0[i]=p_bank_addr;                                             //статус 1й байт
000532 2fe1      	MOV  R30,R17
000533 e0f0      	LDI  R31,0
000534 56e4      	SUBI R30,LOW(-_tx_buffer0)
000535 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000536 91a0 026f 	LDS  R26,_p_bank_addr
000538 83a0      	STD  Z+0,R26
                 ; 0000 01BE         check_sum_tx=check_sum_tx^tx_buffer0[i];
000539 2fe1      	MOV  R30,R17
00053a e0f0      	LDI  R31,0
00053b 56e4      	SUBI R30,LOW(-_tx_buffer0)
00053c 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00053d 81e0      	LD   R30,Z
00053e 273e      	EOR  R19,R30
                 ; 0000 01BF         i++;
00053f 5f1f      	SUBI R17,-1
                 ; 0000 01C0         tx_buffer0[i]=0x00;                                             //статус 2й байт
000540 2fe1      	MOV  R30,R17
000541 e0f0      	LDI  R31,0
000542 56e4      	SUBI R30,LOW(-_tx_buffer0)
000543 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000544 e0a0      	LDI  R26,LOW(0)
000545 83a0      	STD  Z+0,R26
                 ; 0000 01C1         check_sum_tx=check_sum_tx^tx_buffer0[i];
000546 2fe1      	MOV  R30,R17
000547 e0f0      	LDI  R31,0
000548 56e4      	SUBI R30,LOW(-_tx_buffer0)
000549 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00054a 81e0      	LD   R30,Z
00054b 273e      	EOR  R19,R30
                 ; 0000 01C2         i++;
00054c 5f1f      	SUBI R17,-1
                 ; 0000 01C3         for(j=0;j<bytes_quantity_ans;j++)
00054d e000      	LDI  R16,LOW(0)
                 _0x55:
00054e 91e0 0281 	LDS  R30,_bytes_quantity_ans
000550 170e      	CP   R16,R30
000551 f498      	BRSH _0x56
                 ; 0000 01C4                 {
                 ; 0000 01C5                 tx_buffer0[i]=Command_data[j];                                                //данные //здесь нужно создать массив с данными для конкретной команды и перегружать его по запросу в буфер отправки
000552 2fa1      	MOV  R26,R17
000553 e0b0      	LDI  R27,0
000554 56a4      	SUBI R26,LOW(-_tx_buffer0)
000555 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
000556 2fe0      	MOV  R30,R16
000557 e0f0      	LDI  R31,0
000558 57ed      	SUBI R30,LOW(-_Command_data)
000559 4ffd      	SBCI R31,HIGH(-_Command_data)
00055a 81e0      	LD   R30,Z
00055b 93ec      	ST   X,R30
                 ; 0000 01C6                 check_sum_tx=check_sum_tx^tx_buffer0[i];
00055c 2fe1      	MOV  R30,R17
00055d e0f0      	LDI  R31,0
00055e 56e4      	SUBI R30,LOW(-_tx_buffer0)
00055f 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000560 81e0      	LD   R30,Z
000561 273e      	EOR  R19,R30
                 ; 0000 01C7                 i++;
000562 5f1f      	SUBI R17,-1
                 ; 0000 01C8                 }
000563 5f0f      	SUBI R16,-1
000564 cfe9      	RJMP _0x55
                 _0x56:
                 ; 0000 01C9         }
                 ; 0000 01CA else {
000565 c05d      	RJMP _0x57
                 _0x53:
                 ; 0000 01CB         tx_buffer0[i]=com_bytes_rx+2;       //здесь просто берем количество байт из принятого сообщения                                           //число байт  //нужно создать массив с количеством байт для конкретной команды
000566 2fa1      	MOV  R26,R17
000567 e0b0      	LDI  R27,0
000568 56a4      	SUBI R26,LOW(-_tx_buffer0)
000569 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
00056a 91e0 026d 	LDS  R30,_com_bytes_rx
00056c 5fee      	SUBI R30,-LOW(2)
00056d 93ec      	ST   X,R30
                 ; 0000 01CC         //bytes_quantity_ans=rx_buffer0[preambula_bytes_rec-preambula_bytes+i]+2;  //эту величину все же нужно сохранить, дабы юзать в цикле
                 ; 0000 01CD         check_sum_tx=check_sum_tx^tx_buffer0[i];
00056e 2fe1      	MOV  R30,R17
00056f e0f0      	LDI  R31,0
000570 56e4      	SUBI R30,LOW(-_tx_buffer0)
000571 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000572 81e0      	LD   R30,Z
000573 273e      	EOR  R19,R30
                 ; 0000 01CE         i++;
000574 5f1f      	SUBI R17,-1
                 ; 0000 01CF         tx_buffer0[i]=transmit_param>>8;                                       //статус 1й байт
000575 2fa1      	MOV  R26,R17
000576 e0b0      	LDI  R27,0
000577 56a4      	SUBI R26,LOW(-_tx_buffer0)
000578 4fbd      	SBCI R27,HIGH(-_tx_buffer0)
000579 81ec      	LDD  R30,Y+4
00057a 81fd      	LDD  R31,Y+4+1
00057b 940e 1038 	CALL __ASRW8
00057d 93ec      	ST   X,R30
                 ; 0000 01D0         check_sum_tx=check_sum_tx^tx_buffer0[i];
00057e 2fe1      	MOV  R30,R17
00057f e0f0      	LDI  R31,0
000580 56e4      	SUBI R30,LOW(-_tx_buffer0)
000581 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000582 81e0      	LD   R30,Z
000583 273e      	EOR  R19,R30
                 ; 0000 01D1         i++;
000584 5f1f      	SUBI R17,-1
                 ; 0000 01D2         tx_buffer0[i]=transmit_param;                                          //статус 2й байт
000585 2fe1      	MOV  R30,R17
000586 e0f0      	LDI  R31,0
000587 56e4      	SUBI R30,LOW(-_tx_buffer0)
000588 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000589 81ac      	LDD  R26,Y+4
00058a 83a0      	STD  Z+0,R26
                 ; 0000 01D3         check_sum_tx=check_sum_tx^tx_buffer0[i];
00058b 2fe1      	MOV  R30,R17
00058c e0f0      	LDI  R31,0
00058d 56e4      	SUBI R30,LOW(-_tx_buffer0)
00058e 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
00058f 81e0      	LD   R30,Z
000590 273e      	EOR  R19,R30
                 ; 0000 01D4         i++;
000591 5f1f      	SUBI R17,-1
                 ; 0000 01D5         j=i;
000592 2f01      	MOV  R16,R17
                 ; 0000 01D6         for(i=j;i<com_bytes_rx+j;i++)
000593 2f10      	MOV  R17,R16
                 _0x59:
000594 91a0 026d 	LDS  R26,_com_bytes_rx
000596 27bb      	CLR  R27
000597 2fe0      	MOV  R30,R16
000598 e0f0      	LDI  R31,0
000599 0fea      	ADD  R30,R26
00059a 1ffb      	ADC  R31,R27
00059b 2fa1      	MOV  R26,R17
00059c e0b0      	LDI  R27,0
00059d 17ae      	CP   R26,R30
00059e 07bf      	CPC  R27,R31
00059f f51c      	BRGE _0x5A
                 ; 0000 01D7                 {
                 ; 0000 01D8                 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i-2];                                                //данные прямо из массива принятых данных
0005a0 2fe1      	MOV  R30,R17
0005a1 e0f0      	LDI  R31,0
0005a2 56e4      	SUBI R30,LOW(-_tx_buffer0)
0005a3 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005a4 01bf      	MOVW R22,R30
0005a5 91a0 0280 	LDS  R26,_preambula_bytes_rec
0005a7 27bb      	CLR  R27
0005a8 91e0 027f 	LDS  R30,_preambula_bytes
0005aa e0f0      	LDI  R31,0
0005ab 1bae      	SUB  R26,R30
0005ac 0bbf      	SBC  R27,R31
0005ad 27ee      	CLR  R30
0005ae 0fa1      	ADD  R26,R17
0005af 1fbe      	ADC  R27,R30
0005b0 e0e2      	LDI  R30,LOW(2)
0005b1 e0f0      	LDI  R31,HIGH(2)
0005b2 940e 1076 	CALL __SWAPW12
0005b4 1bea      	SUB  R30,R26
0005b5 0bfb      	SBC  R31,R27
0005b6 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0005b7 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0005b8 81e0      	LD   R30,Z
0005b9 01db      	MOVW R26,R22
0005ba 93ec      	ST   X,R30
                 ; 0000 01D9                 check_sum_tx=check_sum_tx^tx_buffer0[i];
0005bb 2fe1      	MOV  R30,R17
0005bc e0f0      	LDI  R31,0
0005bd 56e4      	SUBI R30,LOW(-_tx_buffer0)
0005be 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005bf 81e0      	LD   R30,Z
0005c0 273e      	EOR  R19,R30
                 ; 0000 01DA                 //i++;
                 ; 0000 01DB                 }
0005c1 5f1f      	SUBI R17,-1
0005c2 cfd1      	RJMP _0x59
                 _0x5A:
                 ; 0000 01DC         }
                 _0x57:
                 ; 0000 01DD         //i++;
                 ; 0000 01DE tx_buffer0[i]=check_sum_tx;
0005c3 2fe1      	MOV  R30,R17
0005c4 e0f0      	LDI  R31,0
0005c5 56e4      	SUBI R30,LOW(-_tx_buffer0)
0005c6 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
0005c7 8330      	ST   Z,R19
                 ; 0000 01DF tx_rd_index0=1;
0005c8 e0e1      	LDI  R30,LOW(1)
0005c9 93e0 02dc 	STS  _tx_rd_index0,R30
                 ; 0000 01E0 //if(!transmit_param){
                 ; 0000 01E1 //for(i=0;i<=rx_counter0;i++)tx_buffer0[i]=rx_buffer0[i]; }
                 ; 0000 01E2 //tx_rd_index0=1;
                 ; 0000 01E3 tx_counter0=i;
0005cb 9310 02dd 	STS  _tx_counter0,R17
                 ; 0000 01E4 UDR0=tx_buffer0[0];
0005cd 91e0 029c 	LDS  R30,_tx_buffer0
0005cf 93e0 00c6 	STS  198,R30
                 ; 0000 01E5 while(tx_counter0){;}
                 _0x5B:
0005d1 91e0 02dd 	LDS  R30,_tx_counter0
0005d3 30e0      	CPI  R30,0
0005d4 f7e1      	BRNE _0x5B
                 ; 0000 01E6 delay_ms(15);
0005d5 e0ef      	LDI  R30,LOW(15)
0005d6 e0f0      	LDI  R31,HIGH(15)
0005d7 93fa      	ST   -Y,R31
0005d8 93ea      	ST   -Y,R30
0005d9 940e 0e71 	CALL _delay_ms
                 ; 0000 01E7 //RxEn;
                 ; 0000 01E8 Recieve;
0005db 9a5b      	SBI  0xB,3
                 ; 0000 01E9 message_recieved=0;
0005dc 98f4      	CBI  0x1E,4
                 ; 0000 01EA rx_counter0=0;
0005dd e0e0      	LDI  R30,LOW(0)
0005de 93e0 0274 	STS  _rx_counter0,R30
                 ; 0000 01EB 
                 ; 0000 01EC }
0005e0 940e 10c1 	CALL __LOADLOCR4
0005e2 9626      	ADIW R28,6
0005e3 9508      	RET
                 ;
                 ;int generate_command_data_array_answer(char command_recieved)//загружаем из эсппзу сохраненный массив параметров (Parameter_bank) и записываем его в динамический массив команд (Command_data) с помощью связывающего массива (Command_mask)
                 ; 0000 01EF {
                 _generate_command_data_array_answer:
                 ; 0000 01F0 char i=0,j=0,k=0;
                 ; 0000 01F1 char dynamic_parameter=0, writing_command=0, error=1, parameter_tmp=0,parameter_tmp_length=0,tmp_command_number=0;
                 ; 0000 01F2 union ieeesender      //это объединение создано специально для передачи числа в формате плавающей точки в виде 4х байт
                 ; 0000 01F3         {
                 ; 0000 01F4         float value;
                 ; 0000 01F5         char byte[4];
                 ; 0000 01F6         }floatsend;
                 ; 0000 01F7 //for (i=0;i<4;i++)
                 ; 0000 01F8 //        {
                 ; 0000 01F9 //        str[i]=&string_tmp[i];
                 ; 0000 01FA //        }
                 ; 0000 01FB //        i=0;
                 ; 0000 01FC 
                 ; 0000 01FD for (i=0;i<31;i++)//счетчик № команды
0005e4 9727      	SBIW R28,7
0005e5 e0e0      	LDI  R30,LOW(0)
0005e6 83ec      	STD  Y+4,R30
0005e7 83ed      	STD  Y+5,R30
0005e8 83ee      	STD  Y+6,R30
0005e9 940e 10b8 	CALL __SAVELOCR6
                 ;	command_recieved -> Y+13
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	dynamic_parameter -> R18
                 ;	writing_command -> R21
                 ;	error -> R20
                 ;	parameter_tmp -> Y+12
                 ;	parameter_tmp_length -> Y+11
                 ;	tmp_command_number -> Y+10
                 ;	ieeesender -> Y+13
                 ;	floatsend -> Y+6
0005eb e010      	LDI  R17,0
0005ec e000      	LDI  R16,0
0005ed e030      	LDI  R19,0
0005ee e020      	LDI  R18,0
0005ef e050      	LDI  R21,0
0005f0 e041      	LDI  R20,1
0005f1 e010      	LDI  R17,LOW(0)
                 _0x63:
0005f2 311f      	CPI  R17,31
0005f3 f460      	BRSH _0x64
                 ; 0000 01FE                 {
                 ; 0000 01FF                 if(Command_number[0][i]==command_recieved)
0005f4 2fe1      	MOV  R30,R17
0005f5 e0f0      	LDI  R31,0
0005f6 56e8      	SUBI R30,LOW(-_Command_number*2)
0005f7 4ffc      	SBCI R31,HIGH(-_Command_number*2)
0005f8 91a4      	LPM  R26,Z
0005f9 85ed      	LDD  R30,Y+13
0005fa 17ea      	CP   R30,R26
0005fb f411      	BRNE _0x65
                 ; 0000 0200                                 {
                 ; 0000 0201                                 error=0;//отсутствие совпадений соответствует ошибке "команда не поддерживается"
0005fc e040      	LDI  R20,LOW(0)
                 ; 0000 0202                                 tmp_command_number=i;
                +
0005fd 871a     +STD Y + 10 , R17
                 	__PUTBSR 17,10
                 ; 0000 0203                                 }
                 ; 0000 0204                 }
                 _0x65:
0005fe 5f1f      	SUBI R17,-1
0005ff cff2      	RJMP _0x63
                 _0x64:
                 ; 0000 0205 if(!error)      {//если ошибок нет, формируем команду
000600 3040      	CPI  R20,0
000601 f011      	BREQ PC+3
000602 940c 06df 	JMP _0x66
                 ; 0000 0206                 writing_command=Command_number[1][tmp_command_number];//команда записи=1
                +
000604 ebe7     +LDI R30 , LOW ( 2 * _Command_number + ( 31 ) )
000605 e0f3     +LDI R31 , HIGH ( 2 * _Command_number + ( 31 ) )
                 	__POINTW1FN _Command_number,31
000606 01df      	MOVW R26,R30
000607 85ea      	LDD  R30,Y+10
000608 e0f0      	LDI  R31,0
000609 0fea      	ADD  R30,R26
00060a 1ffb      	ADC  R31,R27
00060b 9154      	LPM  R21,Z
                 ; 0000 0207                 dynamic_parameter=Command_number[2][tmp_command_number];//динамический параметр=2
                +
00060c ede6     +LDI R30 , LOW ( 2 * _Command_number + ( 62 ) )
00060d e0f3     +LDI R31 , HIGH ( 2 * _Command_number + ( 62 ) )
                 	__POINTW1FN _Command_number,62
00060e 01df      	MOVW R26,R30
00060f 85ea      	LDD  R30,Y+10
000610 e0f0      	LDI  R31,0
000611 0fea      	ADD  R30,R26
000612 1ffb      	ADC  R31,R27
000613 9124      	LPM  R18,Z
                 ; 0000 0208                         if(writing_command)
000614 3050      	CPI  R21,0
000615 f0e9      	BREQ _0x67
                 ; 0000 0209                                 {
                 ; 0000 020A                                 for(j=0;j<com_bytes_rx+1;j++)
000616 e000      	LDI  R16,LOW(0)
                 _0x69:
000617 91e0 026d 	LDS  R30,_com_bytes_rx
000619 e0f0      	LDI  R31,0
00061a 9631      	ADIW R30,1
00061b 2fa0      	MOV  R26,R16
00061c e0b0      	LDI  R27,0
00061d 17ae      	CP   R26,R30
00061e 07bf      	CPC  R27,R31
00061f f464      	BRGE _0x6A
                 ; 0000 020B                                         {
                 ; 0000 020C                                         Command_data[j]=com_data_rx[j];
000620 2fa0      	MOV  R26,R16
000621 e0b0      	LDI  R27,0
000622 57ad      	SUBI R26,LOW(-_Command_data)
000623 4fbd      	SBCI R27,HIGH(-_Command_data)
000624 2fe0      	MOV  R30,R16
000625 e0f0      	LDI  R31,0
000626 5be8      	SUBI R30,LOW(-_com_data_rx)
000627 4ffd      	SBCI R31,HIGH(-_com_data_rx)
000628 81e0      	LD   R30,Z
000629 93ec      	ST   X,R30
                 ; 0000 020D                                         //Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];//Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
                 ; 0000 020E                                         }
00062a 5f0f      	SUBI R16,-1
00062b cfeb      	RJMP _0x69
                 _0x6A:
                 ; 0000 020F                                 update_args_flag=tmp_command_number;
00062c 85ea      	LDD  R30,Y+10
00062d 93e0 026e 	STS  _update_args_flag,R30
                 ; 0000 0210                                 update_eeprom_parameters(tmp_command_number);
00062f 93ea      	ST   -Y,R30
000630 d0b4      	RCALL _update_eeprom_parameters
                 ; 0000 0211                                 j=0;
000631 e000      	LDI  R16,LOW(0)
                 ; 0000 0212                                 }
                 ; 0000 0213                         else
000632 c0ac      	RJMP _0x6B
                 _0x67:
                 ; 0000 0214                                 {
                 ; 0000 0215                                  //представленный ниже код работает только для команд чтения, нединамических и динамических.
                 ; 0000 0216                                  /* приведенный ниже код работает следующим образом: сперва мы обращаемся к массиву Command_mask
                 ; 0000 0217                                  с помощью которого получаем представление о том, какой параметр соответствует какому байту в команде,
                 ; 0000 0218                                  а также какова его длина в байтах, затем поочередно перезагружаем из массива Parameter_bank данные(которые хранятся в нем последовательно) в
                 ; 0000 0219                                  массив Command_data, используя для этого массив Parameter_mask (в этом массиве каждому элементу поставлен в прямое соответствие номер параметра
                 ; 0000 021A                                 , который мы берем из массива Command_mask, а содержимое каждой ячейки определяет, с какой ячейки начинаются данные соответствующего параметра*/
                 ; 0000 021B                                  parameter_tmp=Command_mask[tmp_command_number][j];
000633 85ea      	LDD  R30,Y+10
000634 e1a9      	LDI  R26,LOW(25)
000635 9fea      	MUL  R30,R26
000636 01f0      	MOVW R30,R0
000637 57e0      	SUBI R30,LOW(-_Command_mask*2)
000638 4fff      	SBCI R31,HIGH(-_Command_mask*2)
000639 01df      	MOVW R26,R30
00063a 2fe0      	MOV  R30,R16
00063b e0f0      	LDI  R31,0
00063c 0fea      	ADD  R30,R26
00063d 1ffb      	ADC  R31,R27
00063e 9004      	LPM  R0,Z
00063f 860c      	STD  Y+12,R0
                 ; 0000 021C 
                 ; 0000 021D                                  for(j=0;j<24;j++)
000640 e000      	LDI  R16,LOW(0)
                 _0x6D:
000641 3108      	CPI  R16,24
000642 f010      	BRLO PC+3
000643 940c 06dc 	JMP _0x6E
                 ; 0000 021E                                          {
                 ; 0000 021F                                          if(parameter_tmp!=Command_mask[tmp_command_number][j])
000645 85ea      	LDD  R30,Y+10
000646 e1a9      	LDI  R26,LOW(25)
000647 9fea      	MUL  R30,R26
000648 01f0      	MOVW R30,R0
000649 57e0      	SUBI R30,LOW(-_Command_mask*2)
00064a 4fff      	SBCI R31,HIGH(-_Command_mask*2)
00064b 01df      	MOVW R26,R30
00064c 2fe0      	MOV  R30,R16
00064d e0f0      	LDI  R31,0
00064e 0fea      	ADD  R30,R26
00064f 1ffb      	ADC  R31,R27
000650 91e4      	LPM  R30,Z
000651 85ac      	LDD  R26,Y+12
000652 17ea      	CP   R30,R26
000653 f411      	BRNE PC+3
000654 940c 06bb 	JMP _0x6F
                 ; 0000 0220                                                      {
                 ; 0000 0221                                                      for(k=(j-parameter_tmp_length);k<j;k++)
000656 2fa0      	MOV  R26,R16
000657 27bb      	CLR  R27
000658 85eb      	LDD  R30,Y+11
000659 e0f0      	LDI  R31,0
00065a 940e 1076 	CALL __SWAPW12
00065c 1bea      	SUB  R30,R26
00065d 0bfb      	SBC  R31,R27
00065e 2f3e      	MOV  R19,R30
                 _0x71:
00065f 1730      	CP   R19,R16
000660 f010      	BRLO PC+3
000661 940c 06b9 	JMP _0x72
                 ; 0000 0222                                                                 {
                 ; 0000 0223                                                                 if((parameter_tmp<11)|(parameter_tmp>13))
000663 85ac      	LDD  R26,Y+12
000664 e0eb      	LDI  R30,LOW(11)
000665 940e 1047 	CALL __LTB12U
000667 2e0e      	MOV  R0,R30
000668 e0ed      	LDI  R30,LOW(13)
000669 940e 104c 	CALL __GTB12U
00066b 29e0      	OR   R30,R0
00066c f109      	BREQ _0x73
                 ; 0000 0224                                                                         {
                 ; 0000 0225                                                                         Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
00066d 2fe3      	MOV  R30,R19
00066e e0f0      	LDI  R31,0
00066f 57ed      	SUBI R30,LOW(-_Command_data)
000670 4ffd      	SBCI R31,HIGH(-_Command_data)
000671 01cf      	MOVW R24,R30
000672 85ec      	LDD  R30,Y+12
000673 e0f0      	LDI  R31,0
000674 59e8      	SUBI R30,LOW(-_Parameter_mask*2)
000675 4fff      	SBCI R31,HIGH(-_Parameter_mask*2)
000676 9164      	LPM  R22,Z
000677 2777      	CLR  R23
000678 2fa3      	MOV  R26,R19
000679 27bb      	CLR  R27
00067a 85eb      	LDD  R30,Y+11
00067b e0f0      	LDI  R31,0
00067c 0fae      	ADD  R26,R30
00067d 1fbf      	ADC  R27,R31
00067e 2fe0      	MOV  R30,R16
00067f e0f0      	LDI  R31,0
000680 940e 1076 	CALL __SWAPW12
000682 1bea      	SUB  R30,R26
000683 0bfb      	SBC  R31,R27
000684 0fe6      	ADD  R30,R22
000685 1ff7      	ADC  R31,R23
000686 50e0      	SUBI R30,LOW(-_Parameter_bank)
000687 40f0      	SBCI R31,HIGH(-_Parameter_bank)
000688 01df      	MOVW R26,R30
000689 940e 1085 	CALL __EEPROMRDB
00068b 01dc      	MOVW R26,R24
00068c 93ec      	ST   X,R30
                 ; 0000 0226                                                                         }
                 ; 0000 0227                                                                 else
00068d c029      	RJMP _0x74
                 _0x73:
                 ; 0000 0228                                                                         {
                 ; 0000 0229                                                                          //ttest=(long)dynamic_variables[0];
                 ; 0000 022A                                                                         #asm ("cli")
00068e 94f8      	cli
                 ; 0000 022B                                                                         floatsend.value=dynamic_variables[parameter_tmp-11];
00068f 85ec      	LDD  R30,Y+12
000690 e0f0      	LDI  R31,0
000691 973b      	SBIW R30,11
000692 e6a1      	LDI  R26,LOW(_dynamic_variables)
000693 e0b2      	LDI  R27,HIGH(_dynamic_variables)
000694 940e 1033 	CALL __LSLW2
000696 0fae      	ADD  R26,R30
000697 1fbf      	ADC  R27,R31
000698 940e 105d 	CALL __GETD1P
                +
00069a 83ee     +STD Y + 6 , R30
00069b 83ff     +STD Y + 6 + 1 , R31
00069c 8768     +STD Y + 6 + 2 , R22
00069d 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 022C                                                                         //test=*str[k-1];
                 ; 0000 022D                                                                         Command_data[k]=floatsend.byte[k+parameter_tmp_length-j]; //(char)(test>>8*(k-1)); //(char)((long)((dynamic_variables[Parameter_mask[parameter_tmp]+(k+parameter_tmp_len00069e 2fe3      gth-j)-11])<<8*(k+parameter_tmp_length-j)));
00069f e0f0      	MOV  R30,R19
0006a0 57ed      	LDI  R31,0
0006a1 4ffd      	SUBI R30,LOW(-_Command_data)
0006a2 01bf      	SBCI R31,HIGH(-_Command_data)
0006a3 2fa3      	MOVW R22,R30
0006a4 27bb      	MOV  R26,R19
0006a5 85eb      	CLR  R27
0006a6 e0f0      	LDD  R30,Y+11
0006a7 0fae      	LDI  R31,0
0006a8 1fbf      	ADD  R26,R30
0006a9 2fe0      	ADC  R27,R31
0006aa e0f0      	MOV  R30,R16
0006ab 940e 1076 	LDI  R31,0
0006ad 1bea      	CALL __SWAPW12
0006ae 0bfb      	SUB  R30,R26
0006af 01de      	SBC  R31,R27
0006b0 9616      	MOVW R26,R28
0006b1 0fae      	ADIW R26,6
0006b2 1fbf      	ADD  R26,R30
0006b3 91ec      	ADC  R27,R31
0006b4 01db      	LD   R30,X
0006b5 93ec      	MOVW R26,R22
                 	ST   X,R30
0006b6 9478      ; 0000 022E                                                                         #asm("sei")
                 	sei
                 ; 0000 022F                                                                         }
                 _0x74:
0006b7 5f3f      ; 0000 0230                                                                 }
0006b8 cfa6      	SUBI R19,-1
                 	RJMP _0x71
                 _0x72:
0006b9 e0e0      ; 0000 0231                                                       parameter_tmp_length=0;
0006ba 87eb      	LDI  R30,LOW(0)
                 	STD  Y+11,R30
                 ; 0000 0232                                                      }
                 ; 0000 0233                                          parameter_tmp=Command_mask[tmp_command_number][j];
0006bb 85ea      _0x6F:
0006bc e1a9      	LDD  R30,Y+10
0006bd 9fea      	LDI  R26,LOW(25)
0006be 01f0      	MUL  R30,R26
0006bf 57e0      	MOVW R30,R0
0006c0 4fff      	SUBI R30,LOW(-_Command_mask*2)
0006c1 01df      	SBCI R31,HIGH(-_Command_mask*2)
0006c2 2fe0      	MOVW R26,R30
0006c3 e0f0      	MOV  R30,R16
0006c4 0fea      	LDI  R31,0
0006c5 1ffb      	ADD  R30,R26
0006c6 9004      	ADC  R31,R27
0006c7 860c      	LPM  R0,Z
                 	STD  Y+12,R0
0006c8 85eb      ; 0000 0234                                          parameter_tmp_length++;
0006c9 5fef      	LDD  R30,Y+11
0006ca 87eb      	SUBI R30,-LOW(1)
                 	STD  Y+11,R30
0006cb 85ea      ; 0000 0235                                          if(!Command_mask[tmp_command_number][j])j=24;
0006cc e1a9      	LDD  R30,Y+10
0006cd 9fea      	LDI  R26,LOW(25)
0006ce 01f0      	MUL  R30,R26
0006cf 57e0      	MOVW R30,R0
0006d0 4fff      	SUBI R30,LOW(-_Command_mask*2)
0006d1 01df      	SBCI R31,HIGH(-_Command_mask*2)
0006d2 2fe0      	MOVW R26,R30
0006d3 e0f0      	MOV  R30,R16
0006d4 0fea      	LDI  R31,0
0006d5 1ffb      	ADD  R30,R26
0006d6 91e4      	ADC  R31,R27
0006d7 30e0      	LPM  R30,Z
0006d8 f409      	CPI  R30,0
0006d9 e108      	BRNE _0x75
                 	LDI  R16,LOW(24)
                 ; 0000 0236                                          }
0006da 5f0f      _0x75:
0006db cf65      	SUBI R16,-1
                 	RJMP _0x6D
                 _0x6E:
0006dc 9330 0281 ; 0000 0237                                  bytes_quantity_ans=k;
                 	STS  _bytes_quantity_ans,R19
0006de e030      ; 0000 0238                                  k=0;
                 	LDI  R19,LOW(0)
                 ; 0000 0239                                 }
                 _0x6B:
                 ; 0000 023A                         }
                 ; 0000 023B 
                 ; 0000 023C return error;
0006df 2fe4      _0x66:
0006e0 e0f0      	MOV  R30,R20
0006e1 940e 10bf 	LDI  R31,0
0006e3 962e      	CALL __LOADLOCR6
0006e4 9508      	ADIW R28,14
                 	RET
                 ; 0000 023D }
                 ;
                 ;void update_eeprom_parameters(char update_flag)
                 ; 0000 0240 {
                 _update_eeprom_parameters:
                 ; 0000 0241 char i=0,j=0,k=0,parameter_tmp=0,parameter_tmp_length=0;
0006e5 940e 10b8 ; 0000 0242 parameter_tmp=Command_mask[update_flag][0];
                 	CALL __SAVELOCR6
                 ;	update_flag -> Y+6
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	parameter_tmp -> R18
0006e7 e010      ;	parameter_tmp_length -> R21
0006e8 e000      	LDI  R17,0
0006e9 e030      	LDI  R16,0
0006ea e020      	LDI  R19,0
0006eb e050      	LDI  R18,0
0006ec 81ee      	LDI  R21,0
0006ed e1a9      	LDD  R30,Y+6
0006ee 9fea      	LDI  R26,LOW(25)
0006ef 01f0      	MUL  R30,R26
0006f0 57e0      	MOVW R30,R0
0006f1 4fff      	SUBI R30,LOW(-_Command_mask*2)
0006f2 9124      	SBCI R31,HIGH(-_Command_mask*2)
                 	LPM  R18,Z
                 ; 0000 0243 
0006f3 e000      ; 0000 0244 for(j=0;j<com_bytes_rx+1;j++)
                 	LDI  R16,LOW(0)
0006f4 91e0 026d _0x77:
0006f6 e0f0      	LDS  R30,_com_bytes_rx
0006f7 9631      	LDI  R31,0
0006f8 2fa0      	ADIW R30,1
0006f9 e0b0      	MOV  R26,R16
0006fa 17ae      	LDI  R27,0
0006fb 07bf      	CP   R26,R30
0006fc f014      	CPC  R27,R31
0006fd 940c 0759 	BRLT PC+3
                 	JMP _0x78
                 ; 0000 0245         {
0006ff 81ee      ; 0000 0246                     if(parameter_tmp!=Command_mask[update_flag][j])
000700 e1a9      	LDD  R30,Y+6
000701 9fea      	LDI  R26,LOW(25)
000702 01f0      	MUL  R30,R26
000703 57e0      	MOVW R30,R0
000704 4fff      	SUBI R30,LOW(-_Command_mask*2)
000705 01df      	SBCI R31,HIGH(-_Command_mask*2)
000706 2fe0      	MOVW R26,R30
000707 e0f0      	MOV  R30,R16
000708 0fea      	LDI  R31,0
000709 1ffb      	ADD  R30,R26
00070a 91e4      	ADC  R31,R27
00070b 17e2      	LPM  R30,Z
00070c f159      	CP   R30,R18
                 	BREQ _0x79
                 ; 0000 0247                              {
00070d 2fa0      ; 0000 0248                              for(k=(j-parameter_tmp_length);k<j;k++)
00070e 27bb      	MOV  R26,R16
00070f 2fe5      	CLR  R27
000710 e0f0      	MOV  R30,R21
000711 940e 1076 	LDI  R31,0
000713 1bea      	CALL __SWAPW12
000714 0bfb      	SUB  R30,R26
000715 2f3e      	SBC  R31,R27
                 	MOV  R19,R30
000716 1730      _0x7B:
000717 f4f8      	CP   R19,R16
                 	BRSH _0x7C
                 ; 0000 0249                                     {
000718 2fe2      ; 0000 024A                                     Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)]=Command_data[k];
000719 e0f0      	MOV  R30,R18
00071a 59e8      	LDI  R31,0
00071b 4fff      	SUBI R30,LOW(-_Parameter_mask*2)
00071c 9164      	SBCI R31,HIGH(-_Parameter_mask*2)
00071d 2777      	LPM  R22,Z
00071e 2fa3      	CLR  R23
00071f 27bb      	MOV  R26,R19
000720 27ee      	CLR  R27
000721 0fa5      	CLR  R30
000722 1fbe      	ADD  R26,R21
000723 2fe0      	ADC  R27,R30
000724 e0f0      	MOV  R30,R16
000725 940e 1076 	LDI  R31,0
000727 1bea      	CALL __SWAPW12
000728 0bfb      	SUB  R30,R26
000729 0fe6      	SBC  R31,R27
00072a 1ff7      	ADD  R30,R22
00072b 50e0      	ADC  R31,R23
00072c 40f0      	SUBI R30,LOW(-_Parameter_bank)
00072d 01df      	SBCI R31,HIGH(-_Parameter_bank)
00072e 2fe3      	MOVW R26,R30
00072f e0f0      	MOV  R30,R19
000730 57ed      	LDI  R31,0
000731 4ffd      	SUBI R30,LOW(-_Command_data)
000732 81e0      	SBCI R31,HIGH(-_Command_data)
000733 940e 10a1 	LD   R30,Z
                 	CALL __EEPROMWRB
000735 5f3f      ; 0000 024B                                     }
000736 cfdf      	SUBI R19,-1
                 	RJMP _0x7B
                 _0x7C:
000737 e050      ; 0000 024C                                parameter_tmp_length=0;
                 	LDI  R21,LOW(0)
                 ; 0000 024D                              }
                 ; 0000 024E 
                 ; 0000 024F                     parameter_tmp=Command_mask[update_flag][j];
000738 81ee      _0x79:
000739 e1a9      	LDD  R30,Y+6
00073a 9fea      	LDI  R26,LOW(25)
00073b 01f0      	MUL  R30,R26
00073c 57e0      	MOVW R30,R0
00073d 4fff      	SUBI R30,LOW(-_Command_mask*2)
00073e 01df      	SBCI R31,HIGH(-_Command_mask*2)
00073f 2fe0      	MOVW R26,R30
000740 e0f0      	MOV  R30,R16
000741 0fea      	LDI  R31,0
000742 1ffb      	ADD  R30,R26
000743 9124      	ADC  R31,R27
                 	LPM  R18,Z
000744 5f5f      ; 0000 0250                     parameter_tmp_length++;
                 	SUBI R21,-1
000745 81ee      ; 0000 0251                     if(!Command_mask[update_flag][j])j=com_bytes_rx+1;
000746 e1a9      	LDD  R30,Y+6
000747 9fea      	LDI  R26,LOW(25)
000748 01f0      	MUL  R30,R26
000749 57e0      	MOVW R30,R0
00074a 4fff      	SUBI R30,LOW(-_Command_mask*2)
00074b 01df      	SBCI R31,HIGH(-_Command_mask*2)
00074c 2fe0      	MOVW R26,R30
00074d e0f0      	MOV  R30,R16
00074e 0fea      	LDI  R31,0
00074f 1ffb      	ADD  R30,R26
000750 91e4      	ADC  R31,R27
000751 30e0      	LPM  R30,Z
000752 f421      	CPI  R30,0
000753 91e0 026d 	BRNE _0x7D
000755 5fef      	LDS  R30,_com_bytes_rx
000756 2f0e      	SUBI R30,-LOW(1)
                 	MOV  R16,R30
                 ; 0000 0252         }
000757 5f0f      _0x7D:
000758 cf9b      	SUBI R16,-1
                 	RJMP _0x77
                 _0x78:
000759 940e 10bf ; 0000 0253 }
00075b 9627      	CALL __LOADLOCR6
00075c 9508      	ADIW R28,7
                 	RET
                 ;
                 ;
                 ;
                 ;int check_recieved_message(){
                 ; 0000 0257 int check_recieved_message(){
                 _check_recieved_message:
                 ; 0000 0258 char i=0,j=0,k=0,l=0, tmp_i=0;//здесь i - счетчик всех байт j- счетчик байт преамбул
                 ; 0000 0259 
                 ; 0000 025A int check_sum=0;
00075d 9722      ; 0000 025B checking_result=0;
00075e e0e0      	SBIW R28,2
00075f 83e8      	LDI  R30,LOW(0)
000760 83e9      	ST   Y,R30
000761 940e 10b8 	STD  Y+1,R30
                 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	j -> R16
                 ;	k -> R19
                 ;	l -> R18
                 ;	tmp_i -> R21
000763 e010      ;	check_sum -> Y+6
000764 e000      	LDI  R17,0
000765 e030      	LDI  R16,0
000766 e020      	LDI  R19,0
000767 e050      	LDI  R18,0
000768 93e0 027e 	LDI  R21,0
                 	STS  _checking_result,R30
00076a 9af5      ; 0000 025C answering=1;
                 	SBI  0x1E,5
                 ; 0000 025D while ((rx_buffer0[j])==0xff)
00076b 2fe0      _0x80:
00076c e0f0      	MOV  R30,R16
00076d 5fe8      	LDI  R31,0
00076e 4ffd      	SUBI R30,LOW(-_rx_buffer0)
00076f 81a0      	SBCI R31,HIGH(-_rx_buffer0)
000770 3faf      	LD   R26,Z
000771 f441      	CPI  R26,LOW(0xFF)
                 	BRNE _0x82
                 ; 0000 025E         {
000772 3009      ; 0000 025F         if(8<j)
000773 f020      	CPI  R16,9
                 	BRLO _0x83
000774 e9e0      ; 0000 0260                 {checking_result=0x90;//ошибка формирования фрейма, если количество преамбул больше либо равно количеству символов
000775 93e0 027e 	LDI  R30,LOW(144)
                 	STS  _checking_result,R30
                 ; 0000 0261                  //rx_buffer0[i+1]=0x00;
000777 c179      ; 0000 0262                  return checking_result;
                 	RJMP _0x2080002
                 ; 0000 0263                  }
                 ; 0000 0264          j++;
000778 5f0f      _0x83:
                 	SUBI R16,-1
000779 cff1      ; 0000 0265         }
                 	RJMP _0x80
                 _0x82:
00077a 9300 0280 ; 0000 0266         preambula_bytes_rec=j;
                 	STS  _preambula_bytes_rec,R16
00077c 2f10      ; 0000 0267         i=j;
                 	MOV  R17,R16
00077d 2fe0      ; 0000 0268 if ((rx_buffer0[j])!=0x02)
00077e e0f0      	MOV  R30,R16
00077f 5fe8      	LDI  R31,0
000780 4ffd      	SUBI R30,LOW(-_rx_buffer0)
000781 81a0      	SBCI R31,HIGH(-_rx_buffer0)
000782 30a2      	LD   R26,Z
000783 f019      	CPI  R26,LOW(0x2)
                 	BREQ _0x84
                 ; 0000 0269 //if ((rx_buffer0[i])!=0x02)
                 ; 0000 026A         {
000784 e0e2      ; 0000 026B         checking_result=0x02;
000785 93e0 027e 	LDI  R30,LOW(2)
                 	STS  _checking_result,R30
                 ; 0000 026C         //return checking_result;
                 ; 0000 026D         }//диагностируем ошибку команд "неверный выбор", если не от главного устройства
                 ; 0000 026E //else    {
                 ; 0000 026F         check_sum=check_sum^rx_buffer0[i];
000787 2fe1      _0x84:
000788 e0f0      	MOV  R30,R17
000789 5fe8      	LDI  R31,0
00078a 4ffd      	SUBI R30,LOW(-_rx_buffer0)
00078b 81e0      	SBCI R31,HIGH(-_rx_buffer0)
00078c 81ae      	LD   R30,Z
00078d 81bf      	LDD  R26,Y+6
00078e e0f0      	LDD  R27,Y+6+1
00078f 27ea      	LDI  R31,0
000790 27fb      	EOR  R30,R26
000791 83ee      	EOR  R31,R27
000792 83ff      	STD  Y+6,R30
                 	STD  Y+6+1,R31
                 ; 0000 0270 //        }
000793 5f1f      ; 0000 0271 i++;
                 	SUBI R17,-1
000794 2fe1      ; 0000 0272 if (((rx_buffer0[i])&0x30)!=0x00)
000795 e0f0      	MOV  R30,R17
000796 5fe8      	LDI  R31,0
000797 4ffd      	SUBI R30,LOW(-_rx_buffer0)
000798 81e0      	SBCI R31,HIGH(-_rx_buffer0)
000799 73e0      	LD   R30,Z
00079a f019      	ANDI R30,LOW(0x30)
                 	BREQ _0x85
00079b e9e0      ; 0000 0273         {checking_result=0x90;
00079c 93e0 027e 	LDI  R30,LOW(144)
                 	STS  _checking_result,R30
                 ; 0000 0274         //return checking_result;
                 ; 0000 0275         }
                 ; 0000 0276 //burst_mode=(rx_buffer0[i]&0x40)>>6;                          //burst_mode нужно вообще-то прописывать в команде
                 ; 0000 0277 if((rx_buffer0[i]&0x0f)==Parameter_bank[25])answering=1;       //это проверка адреса, если адрес не тот, датчик молчит
00079e 2fe1      _0x85:
00079f e0f0      	MOV  R30,R17
0007a0 5fe8      	LDI  R31,0
0007a1 4ffd      	SUBI R30,LOW(-_rx_buffer0)
0007a2 81e0      	SBCI R31,HIGH(-_rx_buffer0)
0007a3 70ef      	LD   R30,Z
0007a4 2e0e      	ANDI R30,LOW(0xF)
                +
0007a5 e1a9     +LDI R26 , LOW ( _Parameter_bank + ( 25 ) )
0007a6 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 25 ) )
                 	__POINTW2MN _Parameter_bank,25
0007a7 940e 1085 	CALL __EEPROMRDB
0007a9 15e0      	CP   R30,R0
0007aa f411      	BRNE _0x86
0007ab 9af5      	SBI  0x1E,5
                 ; 0000 0278 else answering=0;
0007ac c001      	RJMP _0x89
                 _0x86:
0007ad 98f5      	CBI  0x1E,5
                 ; 0000 0279 check_sum=check_sum^rx_buffer0[i];
                 _0x89:
0007ae 2fe1      	MOV  R30,R17
0007af e0f0      	LDI  R31,0
0007b0 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0007b1 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0007b2 81e0      	LD   R30,Z
0007b3 81ae      	LDD  R26,Y+6
0007b4 81bf      	LDD  R27,Y+6+1
0007b5 e0f0      	LDI  R31,0
0007b6 27ea      	EOR  R30,R26
0007b7 27fb      	EOR  R31,R27
0007b8 83ee      	STD  Y+6,R30
0007b9 83ff      	STD  Y+6+1,R31
                 ; 0000 027A i++;
0007ba 5f1f      	SUBI R17,-1
                 ; 0000 027B command_rx_val=rx_buffer0[i];// здесь сделаем проверку команды: если она состоит в листе команд, то ошибку не выдаем, если нет => checking_result=0x0600;
0007bb 2fe1      	MOV  R30,R17
0007bc e0f0      	LDI  R31,0
0007bd 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0007be 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0007bf 81e0      	LD   R30,Z
0007c0 93e0 0282 	STS  _command_rx_val,R30
                 ; 0000 027C if(command_rx_val==35)
0007c2 91a0 0282 	LDS  R26,_command_rx_val
0007c4 32a3      	CPI  R26,LOW(0x23)
0007c5 f539      	BRNE _0x8C
                 ; 0000 027D         {
                 ; 0000 027E //        tmpEepPriValCode = rx_buffer0[i+2];
                 ; 0000 027F //       Parameter_bank[12]= (char)rx_buffer0[i+2];
                 ; 0000 0280         for(l=0;l<4;l++)
0007c6 e020      	LDI  R18,LOW(0)
                 _0x8E:
0007c7 3024      	CPI  R18,4
0007c8 f520      	BRSH _0x8F
                 ; 0000 0281                 {
                 ; 0000 0282                 Parameter_bank[88+l]=rx_buffer0[i+3+l];
0007c9 2fe2      	MOV  R30,R18
0007ca e0f0      	LDI  R31,0
0007cb 01bf      	MOVW R22,R30
                +
0007cc 5ae8     +SUBI R30 , LOW ( - _Parameter_bank - ( 88 ) )
0007cd 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 88 ) )
                 	__ADDW1MN _Parameter_bank,88
0007ce 010f      	MOVW R0,R30
0007cf 2fe1      	MOV  R30,R17
0007d0 e0f0      	LDI  R31,0
0007d1 9633      	ADIW R30,3
0007d2 0fe6      	ADD  R30,R22
0007d3 1ff7      	ADC  R31,R23
0007d4 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0007d5 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0007d6 81e0      	LD   R30,Z
0007d7 01d0      	MOVW R26,R0
0007d8 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0283                 Parameter_bank[92+l]=rx_buffer0[i+7+l];
0007da 2fe2      	MOV  R30,R18
0007db e0f0      	LDI  R31,0
0007dc 01bf      	MOVW R22,R30
                +
0007dd 5ae4     +SUBI R30 , LOW ( - _Parameter_bank - ( 92 ) )
0007de 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 92 ) )
                 	__ADDW1MN _Parameter_bank,92
0007df 010f      	MOVW R0,R30
0007e0 2fe1      	MOV  R30,R17
0007e1 e0f0      	LDI  R31,0
0007e2 9637      	ADIW R30,7
0007e3 0fe6      	ADD  R30,R22
0007e4 1ff7      	ADC  R31,R23
0007e5 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0007e6 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0007e7 81e0      	LD   R30,Z
0007e8 01d0      	MOVW R26,R0
0007e9 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0284                 }
0007eb 5f2f      	SUBI R18,-1
0007ec cfda      	RJMP _0x8E
                 _0x8F:
                 ; 0000 0285         }
                 ; 0000 0286 //if(command_rx_val==36)for(l=0;l<4;l++)Parameter_bank[88+l]=rx_buffer0[i+2+l];
                 ; 0000 0287 //if(command_rx_val==37)for(l=0;l<4;l++)Parameter_bank[92+l]=rx_buffer0[i+2+l];
                 ; 0000 0288 //if(command_rx_val==38)configuration_changed_flag=0;
                 ; 0000 0289 //if(command_rx_val==40)enter_fixed_current_mode(float(rx_buffer0[i+2])||float(rx_buffer0[i+3]<<8)||float(rx_buffer0[i+4]<<16)||float(rx_buffer0[i+5]<<24));
                 ; 0000 028A //if(command_rx_val==41)perform_device_self_test();
                 ; 0000 028B //if(command_rx_val==42)perform_device_reset();
                 ; 0000 028C if(command_rx_val==38)ResetDeviceSettings(0);
                 _0x8C:
0007ed 91a0 0282 	LDS  R26,_command_rx_val
0007ef 32a6      	CPI  R26,LOW(0x26)
0007f0 f419      	BRNE _0x90
0007f1 e0e0      	LDI  R30,LOW(0)
0007f2 93ea      	ST   -Y,R30
0007f3 d437      	RCALL _ResetDeviceSettings
                 ; 0000 028D if(command_rx_val==42)
                 _0x90:
0007f4 91a0 0282 	LDS  R26,_command_rx_val
0007f6 32aa      	CPI  R26,LOW(0x2A)
0007f7 f561      	BRNE _0x91
                 ; 0000 028E                                 {
                 ; 0000 028F                                 if((rx_buffer0[i+2]==0x45)&(rx_buffer0[i+3]==0x52)&(rx_buffer0[i+4]==0x41)&(rx_buffer0[i+5]==0x53)&(rx_buffer0[i+6]==0x45)) //ERASE в ASCII
0007f8 2fe1      	MOV  R30,R17
0007f9 e0f0      	LDI  R31,0
0007fa 01bf      	MOVW R22,R30
                +
0007fb 5fe6     +SUBI R30 , LOW ( - _rx_buffer0 - ( 2 ) )
0007fc 4ffd     +SBCI R31 , HIGH ( - _rx_buffer0 - ( 2 ) )
                 	__ADDW1MN _rx_buffer0,2
0007fd 81a0      	LD   R26,Z
0007fe e4e5      	LDI  R30,LOW(69)
0007ff 940e 1042 	CALL __EQB12
000801 2e0e      	MOV  R0,R30
000802 01fb      	MOVW R30,R22
                +
000803 5fe5     +SUBI R30 , LOW ( - _rx_buffer0 - ( 3 ) )
000804 4ffd     +SBCI R31 , HIGH ( - _rx_buffer0 - ( 3 ) )
                 	__ADDW1MN _rx_buffer0,3
000805 81a0      	LD   R26,Z
000806 e5e2      	LDI  R30,LOW(82)
000807 940e 1042 	CALL __EQB12
000809 220e      	AND  R0,R30
00080a 01fb      	MOVW R30,R22
                +
00080b 5fe4     +SUBI R30 , LOW ( - _rx_buffer0 - ( 4 ) )
00080c 4ffd     +SBCI R31 , HIGH ( - _rx_buffer0 - ( 4 ) )
                 	__ADDW1MN _rx_buffer0,4
00080d 81a0      	LD   R26,Z
00080e e4e1      	LDI  R30,LOW(65)
00080f 940e 1042 	CALL __EQB12
000811 220e      	AND  R0,R30
000812 01fb      	MOVW R30,R22
                +
000813 5fe3     +SUBI R30 , LOW ( - _rx_buffer0 - ( 5 ) )
000814 4ffd     +SBCI R31 , HIGH ( - _rx_buffer0 - ( 5 ) )
                 	__ADDW1MN _rx_buffer0,5
000815 81a0      	LD   R26,Z
000816 e5e3      	LDI  R30,LOW(83)
000817 940e 1042 	CALL __EQB12
000819 220e      	AND  R0,R30
00081a 01fb      	MOVW R30,R22
                +
00081b 5fe2     +SUBI R30 , LOW ( - _rx_buffer0 - ( 6 ) )
00081c 4ffd     +SBCI R31 , HIGH ( - _rx_buffer0 - ( 6 ) )
                 	__ADDW1MN _rx_buffer0,6
00081d 81a0      	LD   R26,Z
00081e e4e5      	LDI  R30,LOW(69)
00081f 940e 1042 	CALL __EQB12
000821 21e0      	AND  R30,R0
000822 f009      	BREQ _0x92
                 ; 0000 0290                                 PerformDeviceApplicationErase();                                                                                                                                     //удаляем штатную прошвку нафиг, доступно т000823 d48a      олько из хексхартлодера
                 	RCALL _PerformDeviceApplicationErase
                 ; 0000 0291                                 }
                 _0x92:
                 ; 0000 0292 if(command_rx_val==43){
000824 91a0 0282 _0x91:
000826 32ab      	LDS  R26,_command_rx_val
000827 f4d1      	CPI  R26,LOW(0x2B)
                 	BRNE _0x93
000828 94f8      ; 0000 0293                         #asm ("cli")
                 	cli
000829 2dea      ; 0000 0294                         ADC_PV_calibration_point1[rangeIndex]=adc_data;//ADC_PV_zero_val=adc_data;
00082a e1a4      	MOV  R30,R10
00082b e0b1      	LDI  R26,LOW(_ADC_PV_calibration_point1)
00082c e0f0      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
00082d 0fee      	LDI  R31,0
00082e 1fff      	LSL  R30
00082f 0fae      	ROL  R31
000830 1fbf      	ADD  R26,R30
000831 91e0 0275 	ADC  R27,R31
000833 91f0 0276 	LDS  R30,_adc_data
000835 940e 1099 	LDS  R31,_adc_data+1
                 	CALL __EEPROMWRW
                +
000837 9050 0275+LDS R5 , 0 + ( _adc_data )
000839 9060 0276+LDS R6 , 0 + ( _adc_data ) + 1
                 	__GETWRMN 5,6,0,_adc_data
                 ; 0000 0296                         CalibrationConfigChanged=1;
00083b e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
00083c e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
00083d e0e1      	LDI  R30,LOW(1)
00083e 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0297                         #asm ("sei")
000840 9478      	sei
                 ; 0000 0298                         CalculateCalibrationRates();
000841 d376      	RCALL _CalculateCalibrationRates
                 ; 0000 0299                         }
                 ; 0000 029A if(command_rx_val==45)for(l=0;l<4;l++)Parameter_bank[105+l]=rx_buffer0[i+2+l];    //записываем соответствующий току битовый код АЦП
                 _0x93:
000842 91a0 0282 	LDS  R26,_command_rx_val
000844 32ad      	CPI  R26,LOW(0x2D)
000845 f4b1      	BRNE _0x94
000846 e020      	LDI  R18,LOW(0)
                 _0x96:
000847 3024      	CPI  R18,4
000848 f498      	BRSH _0x97
000849 2fe2      	MOV  R30,R18
00084a e0f0      	LDI  R31,0
00084b 01bf      	MOVW R22,R30
                +
00084c 59e7     +SUBI R30 , LOW ( - _Parameter_bank - ( 105 ) )
00084d 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 105 ) )
                 	__ADDW1MN _Parameter_bank,105
00084e 010f      	MOVW R0,R30
00084f 2fe1      	MOV  R30,R17
000850 e0f0      	LDI  R31,0
000851 9632      	ADIW R30,2
000852 0fe6      	ADD  R30,R22
000853 1ff7      	ADC  R31,R23
000854 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000855 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000856 81e0      	LD   R30,Z
000857 01d0      	MOVW R26,R0
000858 940e 10a1 	CALL __EEPROMWRB
00085a 5f2f      	SUBI R18,-1
00085b cfeb      	RJMP _0x96
                 _0x97:
                 ; 0000 029B if(command_rx_val==46)for(l=0;l<4;l++)Parameter_bank[109+l]=rx_buffer0[i+2+l];
                 _0x94:
00085c 91a0 0282 	LDS  R26,_command_rx_val
00085e 32ae      	CPI  R26,LOW(0x2E)
00085f f4b1      	BRNE _0x98
000860 e020      	LDI  R18,LOW(0)
                 _0x9A:
000861 3024      	CPI  R18,4
000862 f498      	BRSH _0x9B
000863 2fe2      	MOV  R30,R18
000864 e0f0      	LDI  R31,0
000865 01bf      	MOVW R22,R30
                +
000866 59e3     +SUBI R30 , LOW ( - _Parameter_bank - ( 109 ) )
000867 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 109 ) )
                 	__ADDW1MN _Parameter_bank,109
000868 010f      	MOVW R0,R30
000869 2fe1      	MOV  R30,R17
00086a e0f0      	LDI  R31,0
00086b 9632      	ADIW R30,2
00086c 0fe6      	ADD  R30,R22
00086d 1ff7      	ADC  R31,R23
00086e 5fe8      	SUBI R30,LOW(-_rx_buffer0)
00086f 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000870 81e0      	LD   R30,Z
000871 01d0      	MOVW R26,R0
000872 940e 10a1 	CALL __EEPROMWRB
000874 5f2f      	SUBI R18,-1
000875 cfeb      	RJMP _0x9A
                 _0x9B:
                 ; 0000 029D if(command_rx_val==111){
                 _0x98:
000876 91a0 0282 	LDS  R26,_command_rx_val
000878 36af      	CPI  R26,LOW(0x6F)
000879 f4d1      	BRNE _0x9C
                 ; 0000 029E                         #asm ("cli")
00087a 94f8      	cli
                 ; 0000 029F                         ADC_PV_calibration_point2[rangeIndex]=adc_data;
00087b 2dea      	MOV  R30,R10
00087c e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
00087d e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
00087e e0f0      	LDI  R31,0
00087f 0fee      	LSL  R30
000880 1fff      	ROL  R31
000881 0fae      	ADD  R26,R30
000882 1fbf      	ADC  R27,R31
000883 91e0 0275 	LDS  R30,_adc_data
000885 91f0 0276 	LDS  R31,_adc_data+1
000887 940e 1099 	CALL __EEPROMWRW
                 ; 0000 02A0                         calibration_point2=adc_data;
                +
000889 9070 0275+LDS R7 , 0 + ( _adc_data )
00088b 9080 0276+LDS R8 , 0 + ( _adc_data ) + 1
                 	__GETWRMN 7,8,0,_adc_data
                 ; 0000 02A1                         CalibrationConfigChanged=1;
00088d e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
00088e e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
00088f e0e1      	LDI  R30,LOW(1)
000890 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 02A2                         #asm ("sei")
000892 9478      	sei
                 ; 0000 02A3                         CalculateCalibrationRates();
000893 d324      	RCALL _CalculateCalibrationRates
                 ; 0000 02A4                         }
                 ; 0000 02A5 check_sum=check_sum^rx_buffer0[i];
                 _0x9C:
000894 2fe1      	MOV  R30,R17
000895 e0f0      	LDI  R31,0
000896 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000897 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000898 81e0      	LD   R30,Z
000899 81ae      	LDD  R26,Y+6
00089a 81bf      	LDD  R27,Y+6+1
00089b e0f0      	LDI  R31,0
00089c 27ea      	EOR  R30,R26
00089d 27fb      	EOR  R31,R27
00089e 83ee      	STD  Y+6,R30
00089f 83ff      	STD  Y+6+1,R31
                 ; 0000 02A6 i++;
0008a0 5f1f      	SUBI R17,-1
                 ; 0000 02A7 com_bytes_rx=rx_buffer0[i];                    //количество байт, зная их проверяем число байт данных и если оно не совпадает, диагностируем как раз-таки ошибку формирования фрейма 0х9000
0008a1 2fe1      	MOV  R30,R17
0008a2 e0f0      	LDI  R31,0
0008a3 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008a4 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008a5 81e0      	LD   R30,Z
0008a6 93e0 026d 	STS  _com_bytes_rx,R30
                 ; 0000 02A8 check_sum=check_sum^rx_buffer0[i];
0008a8 2fe1      	MOV  R30,R17
0008a9 e0f0      	LDI  R31,0
0008aa 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008ab 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008ac 81e0      	LD   R30,Z
0008ad 81ae      	LDD  R26,Y+6
0008ae 81bf      	LDD  R27,Y+6+1
0008af e0f0      	LDI  R31,0
0008b0 27ea      	EOR  R30,R26
0008b1 27fb      	EOR  R31,R27
0008b2 83ee      	STD  Y+6,R30
0008b3 83ff      	STD  Y+6+1,R31
                 ; 0000 02A9 i++;
0008b4 5f1f      	SUBI R17,-1
                 ; 0000 02AA tmp_i=i;
0008b5 2f51      	MOV  R21,R17
                 ; 0000 02AB j=tmp_i;
0008b6 2f05      	MOV  R16,R21
                 ; 0000 02AC for (i=tmp_i;i<tmp_i+com_bytes_rx;i++)
0008b7 2f15      	MOV  R17,R21
                 _0x9E:
0008b8 2fa5      	MOV  R26,R21
0008b9 27bb      	CLR  R27
0008ba 91e0 026d 	LDS  R30,_com_bytes_rx
0008bc e0f0      	LDI  R31,0
0008bd 0fea      	ADD  R30,R26
0008be 1ffb      	ADC  R31,R27
0008bf 2fa1      	MOV  R26,R17
0008c0 e0b0      	LDI  R27,0
0008c1 17ae      	CP   R26,R30
0008c2 07bf      	CPC  R27,R31
0008c3 f4d4      	BRGE _0x9F
                 ; 0000 02AD        {
                 ; 0000 02AE        j++;
0008c4 5f0f      	SUBI R16,-1
                 ; 0000 02AF        com_data_rx[k]=rx_buffer0[i];
0008c5 2fa3      	MOV  R26,R19
0008c6 e0b0      	LDI  R27,0
0008c7 5ba8      	SUBI R26,LOW(-_com_data_rx)
0008c8 4fbd      	SBCI R27,HIGH(-_com_data_rx)
0008c9 2fe1      	MOV  R30,R17
0008ca e0f0      	LDI  R31,0
0008cb 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008cc 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008cd 81e0      	LD   R30,Z
0008ce 93ec      	ST   X,R30
                 ; 0000 02B0        check_sum=check_sum^rx_buffer0[i];
0008cf 2fe1      	MOV  R30,R17
0008d0 e0f0      	LDI  R31,0
0008d1 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008d2 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008d3 81e0      	LD   R30,Z
0008d4 81ae      	LDD  R26,Y+6
0008d5 81bf      	LDD  R27,Y+6+1
0008d6 e0f0      	LDI  R31,0
0008d7 27ea      	EOR  R30,R26
0008d8 27fb      	EOR  R31,R27
0008d9 83ee      	STD  Y+6,R30
0008da 83ff      	STD  Y+6+1,R31
                 ; 0000 02B1        k++;
0008db 5f3f      	SUBI R19,-1
                 ; 0000 02B2        }
0008dc 5f1f      	SUBI R17,-1
0008dd cfda      	RJMP _0x9E
                 _0x9F:
                 ; 0000 02B3                 //j++;
                 ; 0000 02B4 //        if(com_bytes_rx!=0)i--;
                 ; 0000 02B5 if (j!=i)
0008de 1710      	CP   R17,R16
0008df f019      	BREQ _0xA0
                 ; 0000 02B6        {checking_result=0x90;
0008e0 e9e0      	LDI  R30,LOW(144)
0008e1 93e0 027e 	STS  _checking_result,R30
                 ; 0000 02B7        //return checking_result;
                 ; 0000 02B8        }
                 ; 0000 02B9 //i++;
                 ; 0000 02BA if(rx_buffer0[i]!=check_sum)
                 _0xA0:
0008e3 2fe1      	MOV  R30,R17
0008e4 e0f0      	LDI  R31,0
0008e5 5fe8      	SUBI R30,LOW(-_rx_buffer0)
0008e6 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0008e7 81a0      	LD   R26,Z
0008e8 81ee      	LDD  R30,Y+6
0008e9 81ff      	LDD  R31,Y+6+1
0008ea e0b0      	LDI  R27,0
0008eb 17ea      	CP   R30,R26
0008ec 07fb      	CPC  R31,R27
0008ed f019      	BREQ _0xA1
                 ; 0000 02BB         {
                 ; 0000 02BC         checking_result=0x88;
0008ee e8e8      	LDI  R30,LOW(136)
0008ef 93e0 027e 	STS  _checking_result,R30
                 ; 0000 02BD         //return checking_result;
                 ; 0000 02BE         }
                 ; 0000 02BF return checking_result;
                 _0xA1:
                 _0x2080002:
0008f1 91e0 027e 	LDS  R30,_checking_result
0008f3 e0f0      	LDI  R31,0
0008f4 940e 10bf 	CALL __LOADLOCR6
0008f6 9628      	ADIW R28,8
0008f7 9508      	RET
                 ; 0000 02C0 }
                 ;
                 ;void clear_buffer()
                 ; 0000 02C3 {
                 _clear_buffer:
                 ; 0000 02C4 char i=0;
                 ; 0000 02C5 for (i=0;i<RX_BUFFER_SIZE0;i++)
0008f8 931a      	ST   -Y,R17
                 ;	i -> R17
0008f9 e010      	LDI  R17,0
0008fa e010      	LDI  R17,LOW(0)
                 _0xA3:
0008fb 3410      	CPI  R17,64
0008fc f468      	BRSH _0xA4
                 ; 0000 02C6         {
                 ; 0000 02C7         rx_buffer0[i]=0;
0008fd 2fe1      	MOV  R30,R17
0008fe e0f0      	LDI  R31,0
0008ff 5fe8      	SUBI R30,LOW(-_rx_buffer0)
000900 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
000901 e0a0      	LDI  R26,LOW(0)
000902 83a0      	STD  Z+0,R26
                 ; 0000 02C8         tx_buffer0[i]=0;
000903 2fe1      	MOV  R30,R17
000904 e0f0      	LDI  R31,0
000905 56e4      	SUBI R30,LOW(-_tx_buffer0)
000906 4ffd      	SBCI R31,HIGH(-_tx_buffer0)
000907 83a0      	STD  Z+0,R26
                 ; 0000 02C9         }
000908 5f1f      	SUBI R17,-1
000909 cff1      	RJMP _0xA3
                 _0xA4:
                 ; 0000 02CA for (i=0;i<25;i++)
00090a e010      	LDI  R17,LOW(0)
                 _0xA6:
00090b 3119      	CPI  R17,25
00090c f468      	BRSH _0xA7
                 ; 0000 02CB         {
                 ; 0000 02CC         com_data_rx[i]=0;
00090d 2fe1      	MOV  R30,R17
00090e e0f0      	LDI  R31,0
00090f 5be8      	SUBI R30,LOW(-_com_data_rx)
000910 4ffd      	SBCI R31,HIGH(-_com_data_rx)
000911 e0a0      	LDI  R26,LOW(0)
000912 83a0      	STD  Z+0,R26
                 ; 0000 02CD         Command_data[i]=0;
000913 2fe1      	MOV  R30,R17
000914 e0f0      	LDI  R31,0
000915 57ed      	SUBI R30,LOW(-_Command_data)
000916 4ffd      	SBCI R31,HIGH(-_Command_data)
000917 83a0      	STD  Z+0,R26
                 ; 0000 02CE         }
000918 5f1f      	SUBI R17,-1
000919 cff1      	RJMP _0xA6
                 _0xA7:
                 ; 0000 02CF }
00091a 9119      	LD   R17,Y+
00091b 9508      	RET
                 ;// Declare your global variables here
                 ;void system_init_(char initVar){
                 ; 0000 02D1 void system_init_(char initVar){
                 ; 0000 02D2 #asm("wdr")
                 ;	initVar -> Y+0
                 ; 0000 02D3 WDTCSR=0x38;
                 ; 0000 02D4 WDTCSR=0x0E;
                 ; 0000 02D5 // Crystal Oscillator division factor: 1
                 ; 0000 02D6 /*#pragma optsize-
                 ; 0000 02D7 CLKPR=0x80;
                 ; 0000 02D8 CLKPR=0x00;
                 ; 0000 02D9 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 02DA #pragma optsize+
                 ; 0000 02DB #endif
                 ; 0000 02DC   */
                 ; 0000 02DD // Input/Output Ports initialization
                 ; 0000 02DE // Port B initialization
                 ; 0000 02DF // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 02E0 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 02E1 PORTB=0x00;
                 ; 0000 02E2 DDRB=0x2c;
                 ; 0000 02E3 
                 ; 0000 02E4 // Port C initialization
                 ; 0000 02E5 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 02E6 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 02E7 PORTC=0x00;
                 ; 0000 02E8 DDRC=0x00;
                 ; 0000 02E9 
                 ; 0000 02EA // Port D initialization
                 ; 0000 02EB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 02EC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 02ED //PORTD=0x00;
                 ; 0000 02EE DDRD.3=1;
                 ; 0000 02EF PORTD.3=1;
                 ; 0000 02F0 DDRD.6=1;
                 ; 0000 02F1 DDRD.7=1;
                 ; 0000 02F2 PORTD.6=0;
                 ; 0000 02F3 PORTD.7=0;
                 ; 0000 02F4 // Timer/Counter 0 initialization
                 ; 0000 02F5 // Clock source: System Clock
                 ; 0000 02F6 // Clock value: Timer 0 Stopped
                 ; 0000 02F7 // Mode: Normal top=FFh
                 ; 0000 02F8 // OC0A output: Disconnected
                 ; 0000 02F9 // OC0B output: Disconnected
                 ; 0000 02FA //TCCR0A=0x00;
                 ; 0000 02FB //TCCR0B=0x04;
                 ; 0000 02FC //TCNT0=0xA5;
                 ; 0000 02FD //OCR0A=0x00;
                 ; 0000 02FE //OCR0B=0x00;
                 ; 0000 02FF stop_wait_Rx_timer;
                 ; 0000 0300 /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
                 ; 0000 0301 UCSR0A=0x00;
                 ; 0000 0302 UCSR0B=0xc0;
                 ; 0000 0303 UCSR0C=0x06;
                 ; 0000 0304 UBRR0H=0x00;
                 ; 0000 0305 UBRR0L=0x17;
                 ; 0000 0306 
                 ; 0000 0307 // Timer/Counter 1 initialization
                 ; 0000 0308 // Clock source: System Clock
                 ; 0000 0309 // Clock value: Timer 1 Stopped
                 ; 0000 030A // Mode: Normal top=FFFFh
                 ; 0000 030B // OC1A output: Discon.
                 ; 0000 030C // OC1B output: Discon.
                 ; 0000 030D // Noise Canceler: Off
                 ; 0000 030E // Input Capture on Falling Edge
                 ; 0000 030F // Timer 1 Overflow Interrupt: Off
                 ; 0000 0310 // Input Capture Interrupt: Off
                 ; 0000 0311 // Compare A Match Interrupt: Off
                 ; 0000 0312 // Compare B Match Interrupt: Off
                 ; 0000 0313 TCCR1A=0x00;
                 ; 0000 0314 TCCR1B=0x00;
                 ; 0000 0315 TCNT1H=0x00;
                 ; 0000 0316 TCNT1L=0x00;
                 ; 0000 0317 ICR1H=0x00;
                 ; 0000 0318 ICR1L=0x00;
                 ; 0000 0319 OCR1AH=0x00;
                 ; 0000 031A OCR1AL=0x00;
                 ; 0000 031B OCR1BH=0x00;
                 ; 0000 031C OCR1BL=0x00;
                 ; 0000 031D 
                 ; 0000 031E // Timer/Counter 2 initialization
                 ; 0000 031F // Clock source: System Clock
                 ; 0000 0320 // Clock value: Timer 2 Stopped
                 ; 0000 0321 // Mode: Normal top=FFh
                 ; 0000 0322 // OC2A output: Disconnected
                 ; 0000 0323 // OC2B output: Disconnected
                 ; 0000 0324 ASSR=0x00;
                 ; 0000 0325 TCCR2A=0x00;
                 ; 0000 0326 TCCR2B=0x00;
                 ; 0000 0327 TCNT2=0x00;
                 ; 0000 0328 OCR2A=0x00;
                 ; 0000 0329 OCR2B=0x00;
                 ; 0000 032A 
                 ; 0000 032B // External Interrupt(s) initialization
                 ; 0000 032C // INT0: On
                 ; 0000 032D // INT0 Mode: Any change
                 ; 0000 032E // INT1: Off
                 ; 0000 032F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0330 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0331 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0332 wait_startOCD;
                 ; 0000 0333 EIMSK=0x01;
                 ; 0000 0334 EIFR=0x01;
                 ; 0000 0335 PCICR=0x00;
                 ; 0000 0336 
                 ; 0000 0337 
                 ; 0000 0338 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0339 TIMSK0=0x00;
                 ; 0000 033A // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 033B TIMSK1=0x00;
                 ; 0000 033C // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 033D TIMSK2=0x00;
                 ; 0000 033E 
                 ; 0000 033F // Analog Comparator initialization
                 ; 0000 0340 // Analog Comparator: Off
                 ; 0000 0341 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0342 ACSR=0x80;
                 ; 0000 0343 ADCSRB=0x00;
                 ; 0000 0344 
                 ; 0000 0345 // ADC initialization
                 ; 0000 0346 // ADC Clock frequency: 230,400 kHz
                 ; 0000 0347 // ADC Voltage Reference: AREF pin
                 ; 0000 0348 // ADC Auto Trigger Source: Free Running
                 ; 0000 0349 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 034A // ADC4: Off, ADC5: Off
                 ; 0000 034B if(initVar==1)
                 ; 0000 034C {
                 ; 0000 034D DIDR0=0x3f;
                 ; 0000 034E ADMUX=0x20;
                 ; 0000 034F ADCSRA=0xcf;
                 ; 0000 0350 ADCSRB=ADCSRB||0x00;
                 ; 0000 0351 }
                 ; 0000 0352 else
                 ; 0000 0353 {
                 ; 0000 0354 DIDR0=0x3f;
                 ; 0000 0355 ADMUX=0x00;
                 ; 0000 0356 ADCSRA=0x0f;
                 ; 0000 0357 ADCSRB=ADCSRB||0x00;
                 ; 0000 0358 
                 ; 0000 0359 }
                 ; 0000 035A // SPI initialization
                 ; 0000 035B // SPI Type: Master
                 ; 0000 035C // SPI Clock Rate: 2*115,200 kHz
                 ; 0000 035D // SPI Clock Phase: Cycle Half
                 ; 0000 035E // SPI Clock Polarity: Low
                 ; 0000 035F // SPI Data Order: MSB First
                 ; 0000 0360 SPCR=0x53;
                 ; 0000 0361 SPSR=0x00;
                 ; 0000 0362 //SPDR=0x00;
                 ; 0000 0363 //enable_SPI;
                 ; 0000 0364 }
                 ;
                 ;void system_init(){
                 ; 0000 0366 void system_init(){
                 _system_init:
                 ; 0000 0367 #asm("wdr")
00091c 95a8      	wdr
                 ; 0000 0368 WDTCSR=0x38;
00091d e3e8      	LDI  R30,LOW(56)
00091e 93e0 0060 	STS  96,R30
                 ; 0000 0369 WDTCSR=0x0E;
000920 e0ee      	LDI  R30,LOW(14)
000921 93e0 0060 	STS  96,R30
                 ; 0000 036A // Crystal Oscillator division factor: 1
                 ; 0000 036B /*#pragma optsize-
                 ; 0000 036C CLKPR=0x80;
                 ; 0000 036D CLKPR=0x00;
                 ; 0000 036E #ifdef _OPTIMIZE_SIZE_
                 ; 0000 036F #pragma optsize+
                 ; 0000 0370 #endif
                 ; 0000 0371   */
                 ; 0000 0372 // Input/Output Ports initialization
                 ; 0000 0373 // Port B initialization
                 ; 0000 0374 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
                 ; 0000 0375 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
                 ; 0000 0376 PORTB=0x00;
000923 e0e0      	LDI  R30,LOW(0)
000924 b9e5      	OUT  0x5,R30
                 ; 0000 0377 DDRB=0x2c;
000925 e2ec      	LDI  R30,LOW(44)
000926 b9e4      	OUT  0x4,R30
                 ; 0000 0378 
                 ; 0000 0379 // Port C initialization
                 ; 0000 037A // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 037B // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 037C PORTC=0x00;
000927 e0e0      	LDI  R30,LOW(0)
000928 b9e8      	OUT  0x8,R30
                 ; 0000 037D DDRC=0x00;
000929 b9e7      	OUT  0x7,R30
                 ; 0000 037E 
                 ; 0000 037F // Port D initialization
                 ; 0000 0380 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0381 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0382 //PORTD=0x00;
                 ; 0000 0383 DDRD.3=1;
00092a 9a53      	SBI  0xA,3
                 ; 0000 0384 PORTD.3=1;
00092b 9a5b      	SBI  0xB,3
                 ; 0000 0385 DDRD.6=1;
00092c 9a56      	SBI  0xA,6
                 ; 0000 0386 DDRD.7=1;
00092d 9a57      	SBI  0xA,7
                 ; 0000 0387 PORTD.6=0;
00092e 985e      	CBI  0xB,6
                 ; 0000 0388 PORTD.7=0;
00092f 985f      	CBI  0xB,7
                 ; 0000 0389 // Timer/Counter 0 initialization
                 ; 0000 038A // Clock source: System Clock
                 ; 0000 038B // Clock value: Timer 0 Stopped
                 ; 0000 038C // Mode: Normal top=FFh
                 ; 0000 038D // OC0A output: Disconnected
                 ; 0000 038E // OC0B output: Disconnected
                 ; 0000 038F //TCCR0A=0x00;
                 ; 0000 0390 //TCCR0B=0x04;
                 ; 0000 0391 //TCNT0=0xA5;
                 ; 0000 0392 //OCR0A=0x00;
                 ; 0000 0393 //OCR0B=0x00;
                 ; 0000 0394 stop_wait_Rx_timer;
000930 93e0 006e 	STS  110,R30
000932 bde4      	OUT  0x24,R30
000933 bde5      	OUT  0x25,R30
000934 bde6      	OUT  0x26,R30
                 ; 0000 0395 /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
                 ; 0000 0396 UCSR0A=0x00;
000935 93e0 00c0 	STS  192,R30
                 ; 0000 0397 UCSR0B=0xc0;
000937 ece0      	LDI  R30,LOW(192)
000938 93e0 00c1 	STS  193,R30
                 ; 0000 0398 UCSR0C=0x06;
00093a e0e6      	LDI  R30,LOW(6)
00093b 93e0 00c2 	STS  194,R30
                 ; 0000 0399 UBRR0H=0x00;
00093d e0e0      	LDI  R30,LOW(0)
00093e 93e0 00c5 	STS  197,R30
                 ; 0000 039A UBRR0L=0x17;
000940 e1e7      	LDI  R30,LOW(23)
000941 93e0 00c4 	STS  196,R30
                 ; 0000 039B 
                 ; 0000 039C // Timer/Counter 1 initialization
                 ; 0000 039D // Clock source: System Clock
                 ; 0000 039E // Clock value: Timer 1 Stopped
                 ; 0000 039F // Mode: Normal top=FFFFh
                 ; 0000 03A0 // OC1A output: Discon.
                 ; 0000 03A1 // OC1B output: Discon.
                 ; 0000 03A2 // Noise Canceler: Off
                 ; 0000 03A3 // Input Capture on Falling Edge
                 ; 0000 03A4 // Timer 1 Overflow Interrupt: Off
                 ; 0000 03A5 // Input Capture Interrupt: Off
                 ; 0000 03A6 // Compare A Match Interrupt: Off
                 ; 0000 03A7 // Compare B Match Interrupt: Off
                 ; 0000 03A8 TCCR1A=0x00;
000943 e0e0      	LDI  R30,LOW(0)
000944 93e0 0080 	STS  128,R30
                 ; 0000 03A9 TCCR1B=0x00;
000946 93e0 0081 	STS  129,R30
                 ; 0000 03AA TCNT1H=0x00;
000948 93e0 0085 	STS  133,R30
                 ; 0000 03AB TCNT1L=0x00;
00094a 93e0 0084 	STS  132,R30
                 ; 0000 03AC ICR1H=0x00;
00094c 93e0 0087 	STS  135,R30
                 ; 0000 03AD ICR1L=0x00;
00094e 93e0 0086 	STS  134,R30
                 ; 0000 03AE OCR1AH=0x00;
000950 93e0 0089 	STS  137,R30
                 ; 0000 03AF OCR1AL=0x00;
000952 93e0 0088 	STS  136,R30
                 ; 0000 03B0 OCR1BH=0x00;
000954 93e0 008b 	STS  139,R30
                 ; 0000 03B1 OCR1BL=0x00;
000956 93e0 008a 	STS  138,R30
                 ; 0000 03B2 
                 ; 0000 03B3 // Timer/Counter 2 initialization
                 ; 0000 03B4 // Clock source: System Clock
                 ; 0000 03B5 // Clock value: Timer 2 Stopped
                 ; 0000 03B6 // Mode: Normal top=FFh
                 ; 0000 03B7 // OC2A output: Disconnected
                 ; 0000 03B8 // OC2B output: Disconnected
                 ; 0000 03B9 ASSR=0x00;
000958 93e0 00b6 	STS  182,R30
                 ; 0000 03BA TCCR2A=0x00;
00095a 93e0 00b0 	STS  176,R30
                 ; 0000 03BB TCCR2B=0x00;
00095c 93e0 00b1 	STS  177,R30
                 ; 0000 03BC TCNT2=0x00;
00095e 93e0 00b2 	STS  178,R30
                 ; 0000 03BD OCR2A=0x00;
000960 93e0 00b3 	STS  179,R30
                 ; 0000 03BE OCR2B=0x00;
000962 93e0 00b4 	STS  180,R30
                 ; 0000 03BF 
                 ; 0000 03C0 // External Interrupt(s) initialization
                 ; 0000 03C1 // INT0: On
                 ; 0000 03C2 // INT0 Mode: Any change
                 ; 0000 03C3 // INT1: Off
                 ; 0000 03C4 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 03C5 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 03C6 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 03C7 wait_startOCD;
000964 e0e3      	LDI  R30,LOW(3)
000965 93e0 0069 	STS  105,R30
                 ; 0000 03C8 EIMSK=0x01;
000967 e0e1      	LDI  R30,LOW(1)
000968 bbed      	OUT  0x1D,R30
                 ; 0000 03C9 EIFR=0x01;
000969 bbec      	OUT  0x1C,R30
                 ; 0000 03CA PCICR=0x00;
00096a e0e0      	LDI  R30,LOW(0)
00096b 93e0 0068 	STS  104,R30
                 ; 0000 03CB 
                 ; 0000 03CC 
                 ; 0000 03CD // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 03CE TIMSK0=0x00;
00096d 93e0 006e 	STS  110,R30
                 ; 0000 03CF // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 03D0 TIMSK1=0x00;
00096f 93e0 006f 	STS  111,R30
                 ; 0000 03D1 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 03D2 TIMSK2=0x00;
000971 93e0 0070 	STS  112,R30
                 ; 0000 03D3 
                 ; 0000 03D4 // Analog Comparator initialization
                 ; 0000 03D5 // Analog Comparator: Off
                 ; 0000 03D6 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 03D7 ACSR=0x80;
000973 e8e0      	LDI  R30,LOW(128)
000974 bfe0      	OUT  0x30,R30
                 ; 0000 03D8 ADCSRB=0x00;
000975 e0e0      	LDI  R30,LOW(0)
000976 93e0 007b 	STS  123,R30
                 ; 0000 03D9 
                 ; 0000 03DA // ADC initialization
                 ; 0000 03DB // ADC Clock frequency: 230,400 kHz
                 ; 0000 03DC // ADC Voltage Reference: AREF pin
                 ; 0000 03DD // ADC Auto Trigger Source: Free Running
                 ; 0000 03DE // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 03DF // ADC4: Off, ADC5: Off
                 ; 0000 03E0 DIDR0=0x3f;
000978 e3ef      	LDI  R30,LOW(63)
000979 93e0 007e 	STS  126,R30
                 ; 0000 03E1 ADMUX=0x20;
00097b e2e0      	LDI  R30,LOW(32)
00097c 93e0 007c 	STS  124,R30
                 ; 0000 03E2 ADCSRA=0xcf;
00097e ecef      	LDI  R30,LOW(207)
00097f 93e0 007a 	STS  122,R30
                 ; 0000 03E3 ADCSRB=ADCSRB||0x00;
000981 91e0 007b 	LDS  R30,123
000983 30e0      	CPI  R30,0
000984 f429      	BRNE _0xC6
000985 e0e0      	LDI  R30,LOW(0)
000986 30e0      	CPI  R30,0
000987 f411      	BRNE _0xC6
000988 e0e0      	LDI  R30,0
000989 c001      	RJMP _0xC7
                 _0xC6:
00098a e0e1      	LDI  R30,1
                 _0xC7:
00098b 93e0 007b 	STS  123,R30
                 ; 0000 03E4 
                 ; 0000 03E5 // SPI initialization
                 ; 0000 03E6 // SPI Type: Master
                 ; 0000 03E7 // SPI Clock Rate: 2*115,200 kHz
                 ; 0000 03E8 // SPI Clock Phase: Cycle Half
                 ; 0000 03E9 // SPI Clock Polarity: Low
                 ; 0000 03EA // SPI Data Order: MSB First
                 ; 0000 03EB SPCR=0x53;
00098d e5e3      	LDI  R30,LOW(83)
00098e bdec      	OUT  0x2C,R30
                 ; 0000 03EC SPSR=0x00;
00098f e0e0      	LDI  R30,LOW(0)
000990 bded      	OUT  0x2D,R30
                 ; 0000 03ED //SPDR=0x00;
                 ; 0000 03EE //enable_SPI;
                 ; 0000 03EF }
000991 9508      	RET
                 ;
                 ;void update_dynamic_vars()
                 ; 0000 03F2 {
                 _update_dynamic_vars:
                 ; 0000 03F3 float DAC_zero_current, DAC_measured_current, Lower_Range_value, Upper_Range_value,tmp;
                 ; 0000 03F4 char i,j=0;
                 ; 0000 03F5 long tmp_adc=0;
                 ; 0000 03F6 
                 ; 0000 03F7 union DAC_char_to_float
                 ; 0000 03F8         {
                 ; 0000 03F9         float value_float;
                 ; 0000 03FA         char value_char[4];
                 ; 0000 03FB         }DAC_val;
                 ; 0000 03FC 
                 ; 0000 03FD for (i=0;i<4;i++)
000992 976c      	SBIW R28,28
000993 e0e0      	LDI  R30,LOW(0)
000994 83ec      	STD  Y+4,R30
000995 83ed      	STD  Y+5,R30
000996 83ee      	STD  Y+6,R30
000997 83ef      	STD  Y+7,R30
000998 931a      	ST   -Y,R17
000999 930a      	ST   -Y,R16
                 ;	DAC_zero_current -> Y+26
                 ;	DAC_measured_current -> Y+22
                 ;	Lower_Range_value -> Y+18
                 ;	Upper_Range_value -> Y+14
                 ;	tmp -> Y+10
                 ;	i -> R17
                 ;	j -> R16
                 ;	tmp_adc -> Y+6
                 ;	DAC_char_to_float -> Y+30
                 ;	DAC_val -> Y+2
00099a e000      	LDI  R16,0
00099b e010      	LDI  R17,LOW(0)
                 _0xC9:
00099c 3014      	CPI  R17,4
00099d f4e0      	BRSH _0xCA
                 ; 0000 03FE         {
                 ; 0000 03FF          DAC_val.value_char[i]=Parameter_bank[88+i];
00099e 2fe1      	MOV  R30,R17
00099f e0f0      	LDI  R31,0
0009a0 01bf      	MOVW R22,R30
0009a1 01de      	MOVW R26,R28
0009a2 9612      	ADIW R26,2
0009a3 0fea      	ADD  R30,R26
0009a4 1ffb      	ADC  R31,R27
0009a5 010f      	MOVW R0,R30
0009a6 01fb      	MOVW R30,R22
                +
0009a7 5ae8     +SUBI R30 , LOW ( - _Parameter_bank - ( 88 ) )
0009a8 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 88 ) )
                 	__ADDW1MN _Parameter_bank,88
0009a9 01df      	MOVW R26,R30
0009aa 940e 1085 	CALL __EEPROMRDB
0009ac 01d0      	MOVW R26,R0
0009ad 93ec      	ST   X,R30
                 ; 0000 0400          if(i==3)
0009ae 3013      	CPI  R17,3
0009af f441      	BRNE _0xCB
                 ; 0000 0401                 {
                 ; 0000 0402                 Upper_Range_value=DAC_val.value_float;
                +
0009b0 81ea     +LDD R30 , Y + 2
0009b1 81fb     +LDD R31 , Y + 2 + 1
0009b2 816c     +LDD R22 , Y + 2 + 2
0009b3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009b4 87ee     +STD Y + 14 , R30
0009b5 87ff     +STD Y + 14 + 1 , R31
0009b6 8b68     +STD Y + 14 + 2 , R22
0009b7 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
                 ; 0000 0403                 }
                 ; 0000 0404         }
                 _0xCB:
0009b8 5f1f      	SUBI R17,-1
0009b9 cfe2      	RJMP _0xC9
                 _0xCA:
                 ; 0000 0405 for (i=0;i<4;i++)
0009ba e010      	LDI  R17,LOW(0)
                 _0xCD:
0009bb 3014      	CPI  R17,4
0009bc f4e0      	BRSH _0xCE
                 ; 0000 0406         {
                 ; 0000 0407          DAC_val.value_char[i]=Parameter_bank[92+i];
0009bd 2fe1      	MOV  R30,R17
0009be e0f0      	LDI  R31,0
0009bf 01bf      	MOVW R22,R30
0009c0 01de      	MOVW R26,R28
0009c1 9612      	ADIW R26,2
0009c2 0fea      	ADD  R30,R26
0009c3 1ffb      	ADC  R31,R27
0009c4 010f      	MOVW R0,R30
0009c5 01fb      	MOVW R30,R22
                +
0009c6 5ae4     +SUBI R30 , LOW ( - _Parameter_bank - ( 92 ) )
0009c7 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 92 ) )
                 	__ADDW1MN _Parameter_bank,92
0009c8 01df      	MOVW R26,R30
0009c9 940e 1085 	CALL __EEPROMRDB
0009cb 01d0      	MOVW R26,R0
0009cc 93ec      	ST   X,R30
                 ; 0000 0408          if(i==3)
0009cd 3013      	CPI  R17,3
0009ce f441      	BRNE _0xCF
                 ; 0000 0409                 {
                 ; 0000 040A                 Lower_Range_value=DAC_val.value_float;
                +
0009cf 81ea     +LDD R30 , Y + 2
0009d0 81fb     +LDD R31 , Y + 2 + 1
0009d1 816c     +LDD R22 , Y + 2 + 2
0009d2 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009d3 8bea     +STD Y + 18 , R30
0009d4 8bfb     +STD Y + 18 + 1 , R31
0009d5 8b6c     +STD Y + 18 + 2 , R22
0009d6 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
                 ; 0000 040B                 }
                 ; 0000 040C         }
                 _0xCF:
0009d7 5f1f      	SUBI R17,-1
0009d8 cfe2      	RJMP _0xCD
                 _0xCE:
                 ; 0000 040D 
                 ; 0000 040E for (i=0;i<4;i++)
0009d9 e010      	LDI  R17,LOW(0)
                 _0xD1:
0009da 3014      	CPI  R17,4
0009db f4e0      	BRSH _0xD2
                 ; 0000 040F         {
                 ; 0000 0410          DAC_val.value_char[i]=Parameter_bank[105+i];
0009dc 2fe1      	MOV  R30,R17
0009dd e0f0      	LDI  R31,0
0009de 01bf      	MOVW R22,R30
0009df 01de      	MOVW R26,R28
0009e0 9612      	ADIW R26,2
0009e1 0fea      	ADD  R30,R26
0009e2 1ffb      	ADC  R31,R27
0009e3 010f      	MOVW R0,R30
0009e4 01fb      	MOVW R30,R22
                +
0009e5 59e7     +SUBI R30 , LOW ( - _Parameter_bank - ( 105 ) )
0009e6 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 105 ) )
                 	__ADDW1MN _Parameter_bank,105
0009e7 01df      	MOVW R26,R30
0009e8 940e 1085 	CALL __EEPROMRDB
0009ea 01d0      	MOVW R26,R0
0009eb 93ec      	ST   X,R30
                 ; 0000 0411          if(i==3)
0009ec 3013      	CPI  R17,3
0009ed f441      	BRNE _0xD3
                 ; 0000 0412                 {
                 ; 0000 0413                 DAC_zero_current=DAC_val.value_float;
                +
0009ee 81ea     +LDD R30 , Y + 2
0009ef 81fb     +LDD R31 , Y + 2 + 1
0009f0 816c     +LDD R22 , Y + 2 + 2
0009f1 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0009f2 8fea     +STD Y + 26 , R30
0009f3 8ffb     +STD Y + 26 + 1 , R31
0009f4 8f6c     +STD Y + 26 + 2 , R22
0009f5 8f7d     +STD Y + 26 + 3 , R23
                 	__PUTD1S 26
                 ; 0000 0414                 }
                 ; 0000 0415         }
                 _0xD3:
0009f6 5f1f      	SUBI R17,-1
0009f7 cfe2      	RJMP _0xD1
                 _0xD2:
                 ; 0000 0416 for (i=0;i<4;i++)
0009f8 e010      	LDI  R17,LOW(0)
                 _0xD5:
0009f9 3014      	CPI  R17,4
0009fa f4e0      	BRSH _0xD6
                 ; 0000 0417         {
                 ; 0000 0418          DAC_val.value_char[i]=Parameter_bank[109+i];
0009fb 2fe1      	MOV  R30,R17
0009fc e0f0      	LDI  R31,0
0009fd 01bf      	MOVW R22,R30
0009fe 01de      	MOVW R26,R28
0009ff 9612      	ADIW R26,2
000a00 0fea      	ADD  R30,R26
000a01 1ffb      	ADC  R31,R27
000a02 010f      	MOVW R0,R30
000a03 01fb      	MOVW R30,R22
                +
000a04 59e3     +SUBI R30 , LOW ( - _Parameter_bank - ( 109 ) )
000a05 4fff     +SBCI R31 , HIGH ( - _Parameter_bank - ( 109 ) )
                 	__ADDW1MN _Parameter_bank,109
000a06 01df      	MOVW R26,R30
000a07 940e 1085 	CALL __EEPROMRDB
000a09 01d0      	MOVW R26,R0
000a0a 93ec      	ST   X,R30
                 ; 0000 0419          if(i==3)
000a0b 3013      	CPI  R17,3
000a0c f441      	BRNE _0xD7
                 ; 0000 041A                 {
                 ; 0000 041B                 DAC_measured_current=DAC_val.value_float;
                +
000a0d 81ea     +LDD R30 , Y + 2
000a0e 81fb     +LDD R31 , Y + 2 + 1
000a0f 816c     +LDD R22 , Y + 2 + 2
000a10 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000a11 8bee     +STD Y + 22 , R30
000a12 8bff     +STD Y + 22 + 1 , R31
000a13 8f68     +STD Y + 22 + 2 , R22
000a14 8f79     +STD Y + 22 + 3 , R23
                 	__PUTD1S 22
                 ; 0000 041C                 }
                 ; 0000 041D         }
                 _0xD7:
000a15 5f1f      	SUBI R17,-1
000a16 cfe2      	RJMP _0xD5
                 _0xD6:
                 ; 0000 041E //коэффициент преобразования кода ЦАП в ток, равен отношению приращения тока к приращению битового кода АЦП
                 ; 0000 041F if(adc_data<=0)tmp_adc=0;
000a17 91a0 0275 	LDS  R26,_adc_data
000a19 91b0 0276 	LDS  R27,_adc_data+1
000a1b 9180 0277 	LDS  R24,_adc_data+2
000a1d 9190 0278 	LDS  R25,_adc_data+3
000a1f 940e 10b2 	CALL __CPD02
000a21 f5ec      	BRGE _0x122
                 ; 0000 0420 //if(adc_data>ADC_PV_calibration_point1)//для калиброванного значения на 4.8 мА
                 ; 0000 0421 //else
                 ; 0000 0422 else
                 ; 0000 0423 {
                 ; 0000 0424 //CalculateCalibrationRates();
                 ; 0000 0425 tmp_adc=(long)((float)((float)(adc_data)/calibrationK) - (float)calibrationB);
000a22 91e0 0275 	LDS  R30,_adc_data
000a24 91f0 0276 	LDS  R31,_adc_data+1
000a26 9160 0277 	LDS  R22,_adc_data+2
000a28 9170 0278 	LDS  R23,_adc_data+3
000a2a 940e 0ee2 	CALL __CDF1
000a2c 01df      	MOVW R26,R30
000a2d 01cb      	MOVW R24,R22
000a2e 91e0 0200 	LDS  R30,_calibrationK
000a30 91f0 0201 	LDS  R31,_calibrationK+1
000a32 9160 0202 	LDS  R22,_calibrationK+2
000a34 9170 0203 	LDS  R23,_calibrationK+3
000a36 940e 0fb5 	CALL __DIVF21
000a38 91a0 0204 	LDS  R26,_calibrationB
000a3a 91b0 0205 	LDS  R27,_calibrationB+1
000a3c 9180 0206 	LDS  R24,_calibrationB+2
000a3e 9190 0207 	LDS  R25,_calibrationB+3
000a40 940e 0f15 	CALL __SUBF12
000a42 940e 0eab 	CALL __CFD1
                +
000a44 83ee     +STD Y + 6 , R30
000a45 83ff     +STD Y + 6 + 1 , R31
000a46 8768     +STD Y + 6 + 2 , R22
000a47 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 0426 //tmp_adc=(long)((float)tmp_adc*1.118);
                 ; 0000 0427 if(tmp_adc>0xffc0)tmp_adc=0xffc0;
                +
000a48 81ae     +LDD R26 , Y + 6
000a49 81bf     +LDD R27 , Y + 6 + 1
000a4a 8588     +LDD R24 , Y + 6 + 2
000a4b 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000a4c 3ca1     +CPI R26 , LOW ( 0xFFC1 )
000a4d efef     +LDI R30 , HIGH ( 0xFFC1 )
000a4e 07be     +CPC R27 , R30
000a4f e0e0     +LDI R30 , BYTE3 ( 0xFFC1 )
000a50 078e     +CPC R24 , R30
000a51 e0e0     +LDI R30 , BYTE4 ( 0xFFC1 )
000a52 079e     +CPC R25 , R30
                 	__CPD2N 0xFFC1
000a53 f044      	BRLT _0xDA
                +
000a54 ece0     +LDI R30 , LOW ( 0xFFC0 )
000a55 efff     +LDI R31 , HIGH ( 0xFFC0 )
000a56 e060     +LDI R22 , BYTE3 ( 0xFFC0 )
000a57 e070     +LDI R23 , BYTE4 ( 0xFFC0 )
                 	__GETD1N 0xFFC0
                +
000a58 83ee     +STD Y + 6 , R30
000a59 83ff     +STD Y + 6 + 1 , R31
000a5a 8768     +STD Y + 6 + 2 , R22
000a5b 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 0428 if(tmp_adc<0x0000)tmp_adc=0x0000;
                 _0xDA:
000a5c 85a9      	LDD  R26,Y+9
000a5d 23aa      	TST  R26
000a5e f42a      	BRPL _0xDB
                 _0x122:
000a5f e0e0      	LDI  R30,LOW(0)
                +
000a60 83ee     +STD Y + 6 , R30
000a61 83ef     +STD Y + 6 + 1 , R30
000a62 87e8     +STD Y + 6 + 2 , R30
000a63 87e9     +STD Y + 6 + 3 , R30
                 	__CLRD1S 6
                 ; 0000 0429 }
                 _0xDB:
                 ; 0000 042A /*        {
                 ; 0000 042B         tmp_adc=(long)(adc_data-calibration_point1)*((float)(calibration_point2/(calibration_point2-calibration_point1)));//+ADC_PV_calibration_point;
                 ; 0000 042C         DAC_zero_current = 4.8;
                 ; 0000 042D         DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
                 ; 0000 042E         }
                 ; 0000 042F else
                 ; 0000 0430         {
                 ; 0000 0431          if(adc_data<=ADC_PV_zero_val)adc_data=0;
                 ; 0000 0432          else
                 ; 0000 0433                 {
                 ; 0000 0434                 tmp_adc=(long)(adc_data-ADC_PV_zero_val)*((float)(calibration_point2/(calibration_point2-ADC_PV_zero_val)));
                 ; 0000 0435                 }
                 ; 0000 0436 
                 ; 0000 0437         }
                 ; 0000 0438         */
                 ; 0000 0439 DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
                +
000a64 8daa     +LDD R26 , Y + 26
000a65 8dbb     +LDD R27 , Y + 26 + 1
000a66 8d8c     +LDD R24 , Y + 26 + 2
000a67 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000a68 89ee     +LDD R30 , Y + 22
000a69 89ff     +LDD R31 , Y + 22 + 1
000a6a 8d68     +LDD R22 , Y + 22 + 2
000a6b 8d79     +LDD R23 , Y + 22 + 3
                 	__GETD1S 22
000a6c 940e 0f15 	CALL __SUBF12
000a6e 01df      	MOVW R26,R30
000a6f 01cb      	MOVW R24,R22
                +
000a70 e0e0     +LDI R30 , LOW ( 0x41800000 )
000a71 e0f0     +LDI R31 , HIGH ( 0x41800000 )
000a72 e860     +LDI R22 , BYTE3 ( 0x41800000 )
000a73 e471     +LDI R23 , BYTE4 ( 0x41800000 )
                 	__GETD1N 0x41800000
000a74 940e 0fb5 	CALL __DIVF21
                +
000a76 81ae     +LDD R26 , Y + 6
000a77 81bf     +LDD R27 , Y + 6 + 1
000a78 8588     +LDD R24 , Y + 6 + 2
000a79 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000a7a 940e 106d 	CALL __CDF2
000a7c 940e 0f67 	CALL __MULF12
000a7e 940e 0eab 	CALL __CFD1
000a80 937f      	PUSH R23
000a81 936f      	PUSH R22
000a82 93ff      	PUSH R31
000a83 93ef      	PUSH R30
                +
000a84 8daa     +LDD R26 , Y + 26
000a85 8dbb     +LDD R27 , Y + 26 + 1
000a86 8d8c     +LDD R24 , Y + 26 + 2
000a87 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000a88 e0e8     +LDI R30 , LOW ( 0x39802008 )
000a89 e2f0     +LDI R31 , HIGH ( 0x39802008 )
000a8a e860     +LDI R22 , BYTE3 ( 0x39802008 )
000a8b e379     +LDI R23 , BYTE4 ( 0x39802008 )
                 	__GETD1N 0x39802008
000a8c 940e 0fb5 	CALL __DIVF21
000a8e 940e 0eab 	CALL __CFD1
000a90 2766      	CLR  R22
000a91 2777      	CLR  R23
000a92 91af      	POP  R26
000a93 91bf      	POP  R27
000a94 918f      	POP  R24
000a95 919f      	POP  R25
000a96 940e 103d 	CALL __CWD1
000a98 940e 101a 	CALL __ADDD12
000a9a 93e0 0279 	STS  _DAC_data,R30
000a9c 93f0 027a 	STS  _DAC_data+1,R31
000a9e 9360 027b 	STS  _DAC_data+2,R22
000aa0 9370 027c 	STS  _DAC_data+3,R23
                 ; 0000 043A if(DAC_data<=DAC_zero_current)DAC_data=DAC_zero_current;
                +
000aa2 8dea     +LDD R30 , Y + 26
000aa3 8dfb     +LDD R31 , Y + 26 + 1
000aa4 8d6c     +LDD R22 , Y + 26 + 2
000aa5 8d7d     +LDD R23 , Y + 26 + 3
                 	__GETD1S 26
000aa6 91a0 0279 	LDS  R26,_DAC_data
000aa8 91b0 027a 	LDS  R27,_DAC_data+1
000aaa 9180 027b 	LDS  R24,_DAC_data+2
000aac 9190 027c 	LDS  R25,_DAC_data+3
000aae 940e 106d 	CALL __CDF2
000ab0 940e 0ffa 	CALL __CMPF12
000ab2 f019      	BREQ PC+4
000ab3 f010      	BRCS PC+3
000ab4 940c 0ac0 	JMP  _0xDC
                +
000ab6 8dea     +LDD R30 , Y + 26
000ab7 8dfb     +LDD R31 , Y + 26 + 1
000ab8 8d6c     +LDD R22 , Y + 26 + 2
000ab9 8d7d     +LDD R23 , Y + 26 + 3
                 	__GETD1S 26
000aba e7a9      	LDI  R26,LOW(_DAC_data)
000abb e0b2      	LDI  R27,HIGH(_DAC_data)
000abc 940e 0eab 	CALL __CFD1
000abe 940e 1063 	CALL __PUTDP1
                 ; 0000 043B dynamic_variables[1]=(float)DAC_data*mamps_toDAC_default_ratio;//adc_data*mamps_toDAC_default_ratio;//current, mA - ток
                 _0xDC:
000ac0 91e0 0279 	LDS  R30,_DAC_data
000ac2 91f0 027a 	LDS  R31,_DAC_data+1
000ac4 9160 027b 	LDS  R22,_DAC_data+2
000ac6 9170 027c 	LDS  R23,_DAC_data+3
000ac8 940e 0ee2 	CALL __CDF1
                +
000aca e0a8     +LDI R26 , LOW ( 0x39802008 )
000acb e2b0     +LDI R27 , HIGH ( 0x39802008 )
000acc e880     +LDI R24 , BYTE3 ( 0x39802008 )
000acd e399     +LDI R25 , BYTE4 ( 0x39802008 )
                 	__GETD2N 0x39802008
000ace 940e 0f67 	CALL __MULF12
                +
000ad0 93e0 0265+STS _dynamic_variables + ( 4 ) , R30
000ad2 93f0 0266+STS _dynamic_variables + ( 4 ) + 1 , R31
000ad4 9360 0267+STS _dynamic_variables + ( 4 ) + 2 , R22
000ad6 9370 0268+STS _dynamic_variables + ( 4 ) + 3 , R23
                 	__PUTD1MN _dynamic_variables,4
                 ; 0000 043C dynamic_variables[2]=(float)(100*(dynamic_variables[1]-DAC_zero_current)/(DAC_measured_current-DAC_zero_current));
                +
000ad8 91e0 0265+LDS R30 , _dynamic_variables + ( 4 )
000ada 91f0 0266+LDS R31 , _dynamic_variables + ( 4 ) + 1
000adc 9160 0267+LDS R22 , _dynamic_variables + ( 4 ) + 2
000ade 9170 0268+LDS R23 , _dynamic_variables + ( 4 ) + 3
                 	__GETD1MN _dynamic_variables,4
                +
000ae0 8daa     +LDD R26 , Y + 26
000ae1 8dbb     +LDD R27 , Y + 26 + 1
000ae2 8d8c     +LDD R24 , Y + 26 + 2
000ae3 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
000ae4 940e 0f15 	CALL __SUBF12
                +
000ae6 e0a0     +LDI R26 , LOW ( 0x42C80000 )
000ae7 e0b0     +LDI R27 , HIGH ( 0x42C80000 )
000ae8 ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
000ae9 e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
000aea 940e 0f67 	CALL __MULF12
000aec 937f      	PUSH R23
000aed 936f      	PUSH R22
000aee 93ff      	PUSH R31
000aef 93ef      	PUSH R30
                +
000af0 8daa     +LDD R26 , Y + 26
000af1 8dbb     +LDD R27 , Y + 26 + 1
000af2 8d8c     +LDD R24 , Y + 26 + 2
000af3 8d9d     +LDD R25 , Y + 26 + 3
                 	__GETD2S 26
                +
000af4 89ee     +LDD R30 , Y + 22
000af5 89ff     +LDD R31 , Y + 22 + 1
000af6 8d68     +LDD R22 , Y + 22 + 2
000af7 8d79     +LDD R23 , Y + 22 + 3
                 	__GETD1S 22
000af8 940e 0f15 	CALL __SUBF12
000afa 91af      	POP  R26
000afb 91bf      	POP  R27
000afc 918f      	POP  R24
000afd 919f      	POP  R25
000afe 940e 0fb5 	CALL __DIVF21
                +
000b00 93e0 0269+STS _dynamic_variables + ( 8 ) , R30
000b02 93f0 026a+STS _dynamic_variables + ( 8 ) + 1 , R31
000b04 9360 026b+STS _dynamic_variables + ( 8 ) + 2 , R22
000b06 9370 026c+STS _dynamic_variables + ( 8 ) + 3 , R23
                 	__PUTD1MN _dynamic_variables,8
                 ; 0000 043D tmp = Upper_Range_value-Lower_Range_value;
                +
000b08 89aa     +LDD R26 , Y + 18
000b09 89bb     +LDD R27 , Y + 18 + 1
000b0a 898c     +LDD R24 , Y + 18 + 2
000b0b 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
                +
000b0c 85ee     +LDD R30 , Y + 14
000b0d 85ff     +LDD R31 , Y + 14 + 1
000b0e 8968     +LDD R22 , Y + 14 + 2
000b0f 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
000b10 940e 0f15 	CALL __SUBF12
                +
000b12 87ea     +STD Y + 10 , R30
000b13 87fb     +STD Y + 10 + 1 , R31
000b14 876c     +STD Y + 10 + 2 , R22
000b15 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                 ; 0000 043E if(tmp==10)
                +
000b16 85aa     +LDD R26 , Y + 10
000b17 85bb     +LDD R27 , Y + 10 + 1
000b18 858c     +LDD R24 , Y + 10 + 2
000b19 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000b1a 30a0     +CPI R26 , LOW ( 0x41200000 )
000b1b e0e0     +LDI R30 , HIGH ( 0x41200000 )
000b1c 07be     +CPC R27 , R30
000b1d e2e0     +LDI R30 , BYTE3 ( 0x41200000 )
000b1e 078e     +CPC R24 , R30
000b1f e4e1     +LDI R30 , BYTE4 ( 0x41200000 )
000b20 079e     +CPC R25 , R30
                 	__CPD2N 0x41200000
000b21 f441      	BRNE _0xDD
                 ; 0000 043F     {
                 ; 0000 0440     Parameter_bank[12]= 10;
                +
000b22 e0ac     +LDI R26 , LOW ( _Parameter_bank + ( 12 ) )
000b23 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 12 ) )
                 	__POINTW2MN _Parameter_bank,12
000b24 e0ea      	LDI  R30,LOW(10)
000b25 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0441     setlevel_0_10;
000b27 985f      	CBI  0xB,7
000b28 985e      	CBI  0xB,6
                 ; 0000 0442     rangeIndex = 0;
000b29 24aa      	CLR  R10
                 ; 0000 0443     }
                 ; 0000 0444 if(tmp==20)
                 _0xDD:
                +
000b2a 85aa     +LDD R26 , Y + 10
000b2b 85bb     +LDD R27 , Y + 10 + 1
000b2c 858c     +LDD R24 , Y + 10 + 2
000b2d 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000b2e 30a0     +CPI R26 , LOW ( 0x41A00000 )
000b2f e0e0     +LDI R30 , HIGH ( 0x41A00000 )
000b30 07be     +CPC R27 , R30
000b31 eae0     +LDI R30 , BYTE3 ( 0x41A00000 )
000b32 078e     +CPC R24 , R30
000b33 e4e1     +LDI R30 , BYTE4 ( 0x41A00000 )
000b34 079e     +CPC R25 , R30
                 	__CPD2N 0x41A00000
000b35 f449      	BRNE _0xE2
                 ; 0000 0445     {
                 ; 0000 0446     Parameter_bank[12]= 20;
                +
000b36 e0ac     +LDI R26 , LOW ( _Parameter_bank + ( 12 ) )
000b37 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 12 ) )
                 	__POINTW2MN _Parameter_bank,12
000b38 e1e4      	LDI  R30,LOW(20)
000b39 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0447     setlevel_0_20;
000b3b 985f      	CBI  0xB,7
000b3c 9a5e      	SBI  0xB,6
                 ; 0000 0448     rangeIndex = 1;
000b3d e0e1      	LDI  R30,LOW(1)
000b3e 2eae      	MOV  R10,R30
                 ; 0000 0449     }
                 ; 0000 044A if(tmp==30)
                 _0xE2:
                +
000b3f 85aa     +LDD R26 , Y + 10
000b40 85bb     +LDD R27 , Y + 10 + 1
000b41 858c     +LDD R24 , Y + 10 + 2
000b42 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000b43 30a0     +CPI R26 , LOW ( 0x41F00000 )
000b44 e0e0     +LDI R30 , HIGH ( 0x41F00000 )
000b45 07be     +CPC R27 , R30
000b46 efe0     +LDI R30 , BYTE3 ( 0x41F00000 )
000b47 078e     +CPC R24 , R30
000b48 e4e1     +LDI R30 , BYTE4 ( 0x41F00000 )
000b49 079e     +CPC R25 , R30
                 	__CPD2N 0x41F00000
000b4a f449      	BRNE _0xE7
                 ; 0000 044B     {
                 ; 0000 044C     Parameter_bank[12]=30;
                +
000b4b e0ac     +LDI R26 , LOW ( _Parameter_bank + ( 12 ) )
000b4c e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 12 ) )
                 	__POINTW2MN _Parameter_bank,12
000b4d e1ee      	LDI  R30,LOW(30)
000b4e 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 044D    setlevel_0_30;
000b50 9a5f      	SBI  0xB,7
000b51 985e      	CBI  0xB,6
                 ; 0000 044E    rangeIndex = 2;
000b52 e0e2      	LDI  R30,LOW(2)
000b53 2eae      	MOV  R10,R30
                 ; 0000 044F     }
                 ; 0000 0450 if(tmp==50)
                 _0xE7:
                +
000b54 85aa     +LDD R26 , Y + 10
000b55 85bb     +LDD R27 , Y + 10 + 1
000b56 858c     +LDD R24 , Y + 10 + 2
000b57 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000b58 30a0     +CPI R26 , LOW ( 0x42480000 )
000b59 e0e0     +LDI R30 , HIGH ( 0x42480000 )
000b5a 07be     +CPC R27 , R30
000b5b e4e8     +LDI R30 , BYTE3 ( 0x42480000 )
000b5c 078e     +CPC R24 , R30
000b5d e4e2     +LDI R30 , BYTE4 ( 0x42480000 )
000b5e 079e     +CPC R25 , R30
                 	__CPD2N 0x42480000
000b5f f449      	BRNE _0xEC
                 ; 0000 0451     {
                 ; 0000 0452     Parameter_bank[12]= 50;
                +
000b60 e0ac     +LDI R26 , LOW ( _Parameter_bank + ( 12 ) )
000b61 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 12 ) )
                 	__POINTW2MN _Parameter_bank,12
000b62 e3e2      	LDI  R30,LOW(50)
000b63 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0453     setlevel_0_50;
000b65 9a5f      	SBI  0xB,7
000b66 9a5e      	SBI  0xB,6
                 ; 0000 0454     rangeIndex = 3;
000b67 e0e3      	LDI  R30,LOW(3)
000b68 2eae      	MOV  R10,R30
                 ; 0000 0455     }
                 ; 0000 0456 if(rangeIndexEep!=rangeIndex)
                 _0xEC:
000b69 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000b6a e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000b6b 940e 1085 	CALL __EEPROMRDB
000b6d 16ae      	CP   R10,R30
000b6e f149      	BREQ _0xF1
                 ; 0000 0457         {
                 ; 0000 0458          //CalculateCalibrationRates();
                 ; 0000 0459         calibrationB=calibrationBeep[rangeIndex];
000b6f 2dea      	MOV  R30,R10
000b70 e3a6      	LDI  R26,LOW(_calibrationBeep)
000b71 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000b72 e0f0      	LDI  R31,0
000b73 940e 1033 	CALL __LSLW2
000b75 0fae      	ADD  R26,R30
000b76 1fbf      	ADC  R27,R31
000b77 940e 107d 	CALL __EEPROMRDD
000b79 93e0 0204 	STS  _calibrationB,R30
000b7b 93f0 0205 	STS  _calibrationB+1,R31
000b7d 9360 0206 	STS  _calibrationB+2,R22
000b7f 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 045A         calibrationK=calibrationKeep[rangeIndex];
000b81 2dea      	MOV  R30,R10
000b82 e2a6      	LDI  R26,LOW(_calibrationKeep)
000b83 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000b84 e0f0      	LDI  R31,0
000b85 940e 1033 	CALL __LSLW2
000b87 0fae      	ADD  R26,R30
000b88 1fbf      	ADC  R27,R31
000b89 940e 107d 	CALL __EEPROMRDD
000b8b 93e0 0200 	STS  _calibrationK,R30
000b8d 93f0 0201 	STS  _calibrationK+1,R31
000b8f 9360 0202 	STS  _calibrationK+2,R22
000b91 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 045B         rangeIndexEep=rangeIndex;
000b93 2dea      	MOV  R30,R10
000b94 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000b95 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000b96 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 045C 
                 ; 0000 045D         }
                 ; 0000 045E dynamic_variables[0]=(float)dynamic_variables[2]*(float)((tmp)/100);//100;////primary variable (PV) - виброскорость
                 _0xF1:
                +
000b98 85aa     +LDD R26 , Y + 10
000b99 85bb     +LDD R27 , Y + 10 + 1
000b9a 858c     +LDD R24 , Y + 10 + 2
000b9b 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000b9c e0e0     +LDI R30 , LOW ( 0x42C80000 )
000b9d e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000b9e ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000b9f e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000ba0 940e 0fb5 	CALL __DIVF21
                +
000ba2 91a0 0269+LDS R26 , _dynamic_variables + ( 8 )
000ba4 91b0 026a+LDS R27 , _dynamic_variables + ( 8 ) + 1
000ba6 9180 026b+LDS R24 , _dynamic_variables + ( 8 ) + 2
000ba8 9190 026c+LDS R25 , _dynamic_variables + ( 8 ) + 3
                 	__GETD2MN _dynamic_variables,8
000baa 940e 0f67 	CALL __MULF12
000bac 93e0 0261 	STS  _dynamic_variables,R30
000bae 93f0 0262 	STS  _dynamic_variables+1,R31
000bb0 9360 0263 	STS  _dynamic_variables+2,R22
000bb2 9370 0264 	STS  _dynamic_variables+3,R23
                 ; 0000 045F }
000bb4 8119      	LDD  R17,Y+1
000bb5 8108      	LDD  R16,Y+0
000bb6 966e      	ADIW R28,30
000bb7 9508      	RET
                 ;
                 ;void CalculateCalibrationRates()
                 ; 0000 0462 {
                 _CalculateCalibrationRates:
                 ; 0000 0463 
                 ; 0000 0464 unsigned int calibration_div = 0xf2f7;//0xe4c0;//0xe600;
                 ; 0000 0465 unsigned int calibrationBasic5val = 0x0cc9;
                 ; 0000 0466 //unsigned int calibrationBasic95val = 0xe4c0;
                 ; 0000 0467 //#asm("cli");
                 ; 0000 0468 tmp_calibration =calibration_point2 - calibration_point1;
000bb8 940e 10ba 	CALL __SAVELOCR4
                 ;	calibration_div -> R16,R17
                 ;	calibrationBasic5val -> R18,R19
                +
000bba ef07     +LDI R16 , LOW ( - 3337 )
000bbb ef12     +LDI R17 , HIGH ( - 3337 )
                 	__GETWRN 16,17,-3337
                +
000bbc ec29     +LDI R18 , LOW ( 3273 )
000bbd e03c     +LDI R19 , HIGH ( 3273 )
                 	__GETWRN 18,19,3273
                +
000bbe 2de7     +MOV R30 , R7
000bbf 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
000bc0 19e5      	SUB  R30,R5
000bc1 09f6      	SBC  R31,R6
                +
000bc2 2ebe     +MOV R11 , R30
000bc3 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 0469 calibrationK = (float)(tmp_calibration/62199.00);//58560.00);//58880.00);
                +
000bc4 2deb     +MOV R30 , R11
000bc5 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000bc6 2766      	CLR  R22
000bc7 2777      	CLR  R23
000bc8 940e 0ee2 	CALL __CDF1
000bca 01df      	MOVW R26,R30
000bcb 01cb      	MOVW R24,R22
                +
000bcc e0e0     +LDI R30 , LOW ( 0x4772F700 )
000bcd eff7     +LDI R31 , HIGH ( 0x4772F700 )
000bce e762     +LDI R22 , BYTE3 ( 0x4772F700 )
000bcf e477     +LDI R23 , BYTE4 ( 0x4772F700 )
                 	__GETD1N 0x4772F700
000bd0 940e 0fb5 	CALL __DIVF21
000bd2 93e0 0200 	STS  _calibrationK,R30
000bd4 93f0 0201 	STS  _calibrationK+1,R31
000bd6 9360 0202 	STS  _calibrationK+2,R22
000bd8 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 046A calibrationKeep[rangeIndex] =  calibrationK;
000bda 2dea      	MOV  R30,R10
000bdb e2a6      	LDI  R26,LOW(_calibrationKeep)
000bdc e0b1      	LDI  R27,HIGH(_calibrationKeep)
000bdd e0f0      	LDI  R31,0
000bde 940e 1033 	CALL __LSLW2
000be0 0fae      	ADD  R26,R30
000be1 1fbf      	ADC  R27,R31
000be2 91e0 0200 	LDS  R30,_calibrationK
000be4 91f0 0201 	LDS  R31,_calibrationK+1
000be6 9160 0202 	LDS  R22,_calibrationK+2
000be8 9170 0203 	LDS  R23,_calibrationK+3
000bea 940e 1091 	CALL __EEPROMWRD
                 ; 0000 046B //calibrK = ((tmp_calibration*1000/calibration_div)) ;
                 ; 0000 046C calibrationB = (float)((float)calibration_point1-(float)(calibrationK*calibrationBasic5val)) ;
                +
000bec 2de5     +MOV R30 , R5
000bed 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000bee 2766      	CLR  R22
000bef 2777      	CLR  R23
000bf0 940e 0ee2 	CALL __CDF1
000bf2 937f      	PUSH R23
000bf3 936f      	PUSH R22
000bf4 93ff      	PUSH R31
000bf5 93ef      	PUSH R30
000bf6 01f9      	MOVW R30,R18
000bf7 91a0 0200 	LDS  R26,_calibrationK
000bf9 91b0 0201 	LDS  R27,_calibrationK+1
000bfb 9180 0202 	LDS  R24,_calibrationK+2
000bfd 9190 0203 	LDS  R25,_calibrationK+3
000bff 2766      	CLR  R22
000c00 2777      	CLR  R23
000c01 940e 0ee2 	CALL __CDF1
000c03 940e 0f67 	CALL __MULF12
000c05 91af      	POP  R26
000c06 91bf      	POP  R27
000c07 918f      	POP  R24
000c08 919f      	POP  R25
000c09 940e 1070 	CALL __SWAPD12
000c0b 940e 0f15 	CALL __SUBF12
000c0d 93e0 0204 	STS  _calibrationB,R30
000c0f 93f0 0205 	STS  _calibrationB+1,R31
000c11 9360 0206 	STS  _calibrationB+2,R22
000c13 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 046D calibrationBeep[rangeIndex] = calibrationB;
000c15 2dea      	MOV  R30,R10
000c16 e3a6      	LDI  R26,LOW(_calibrationBeep)
000c17 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000c18 e0f0      	LDI  R31,0
000c19 940e 1033 	CALL __LSLW2
000c1b 0fae      	ADD  R26,R30
000c1c 1fbf      	ADC  R27,R31
000c1d 91e0 0204 	LDS  R30,_calibrationB
000c1f 91f0 0205 	LDS  R31,_calibrationB+1
000c21 9160 0206 	LDS  R22,_calibrationB+2
000c23 9170 0207 	LDS  R23,_calibrationB+3
000c25 940e 1091 	CALL __EEPROMWRD
                 ; 0000 046E //#asm("sei");
                 ; 0000 046F }
000c27 940e 10c1 	CALL __LOADLOCR4
000c29 9624      	ADIW R28,4
000c2a 9508      	RET
                 ;
                 ;
                 ;void ResetDeviceSettings(char notreset)
                 ; 0000 0473 {
                 _ResetDeviceSettings:
                 ; 0000 0474 int i=0;
                 ; 0000 0475 for(i =0; i<139;i++)
000c2b 931a      	ST   -Y,R17
000c2c 930a      	ST   -Y,R16
                 ;	notreset -> Y+2
                 ;	i -> R16,R17
                +
000c2d e000     +LDI R16 , LOW ( 0 )
000c2e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000c2f e000     +LDI R16 , LOW ( 0 )
000c30 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF3:
                +
000c31 380b     +CPI R16 , LOW ( 139 )
000c32 e0e0     +LDI R30 , HIGH ( 139 )
000c33 071e     +CPC R17 , R30
                 	__CPWRN 16,17,139
000c34 f4c4      	BRGE _0xF4
                 ; 0000 0476         {
                 ; 0000 0477         if (i==98)i=100;
000c35 e6e2      	LDI  R30,LOW(98)
000c36 e0f0      	LDI  R31,HIGH(98)
000c37 17e0      	CP   R30,R16
000c38 07f1      	CPC  R31,R17
000c39 f419      	BRNE _0xF5
                +
000c3a e604     +LDI R16 , LOW ( 100 )
000c3b e010     +LDI R17 , HIGH ( 100 )
                 	__GETWRN 16,17,100
                 ; 0000 0478         else Parameter_bank[i]=Parameter_defaults[i];
000c3c c00d      	RJMP _0xF6
                 _0xF5:
000c3d 01f8      	MOVW R30,R16
000c3e 50e0      	SUBI R30,LOW(-_Parameter_bank)
000c3f 40f0      	SBCI R31,HIGH(-_Parameter_bank)
000c40 010f      	MOVW R0,R30
000c41 e8aa      	LDI  R26,LOW(_Parameter_defaults)
000c42 e0b0      	LDI  R27,HIGH(_Parameter_defaults)
000c43 0fa0      	ADD  R26,R16
000c44 1fb1      	ADC  R27,R17
000c45 940e 1085 	CALL __EEPROMRDB
000c47 01d0      	MOVW R26,R0
000c48 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0479         }
                 _0xF6:
                +
000c4a 5f0f     +SUBI R16 , LOW ( - 1 )
000c4b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c4c cfe4      	RJMP _0xF3
                 _0xF4:
                 ; 0000 047A         for (i=0; i<4; i++)
                +
000c4d e000     +LDI R16 , LOW ( 0 )
000c4e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF8:
                +
000c4f 3004     +CPI R16 , LOW ( 4 )
000c50 e0e0     +LDI R30 , HIGH ( 4 )
000c51 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000c52 f59c      	BRGE _0xF9
                 ; 0000 047B         {
                 ; 0000 047C         calibrationBeep[i]=0;
000c53 01f8      	MOVW R30,R16
000c54 e3a6      	LDI  R26,LOW(_calibrationBeep)
000c55 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000c56 940e 1033 	CALL __LSLW2
000c58 0fae      	ADD  R26,R30
000c59 1fbf      	ADC  R27,R31
                +
000c5a e0e0     +LDI R30 , LOW ( 0x0 )
000c5b e0f0     +LDI R31 , HIGH ( 0x0 )
000c5c e060     +LDI R22 , BYTE3 ( 0x0 )
000c5d e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000c5e 940e 1091 	CALL __EEPROMWRD
                 ; 0000 047D         calibrationKeep[i]=1;
000c60 01f8      	MOVW R30,R16
000c61 e2a6      	LDI  R26,LOW(_calibrationKeep)
000c62 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000c63 940e 1033 	CALL __LSLW2
000c65 0fae      	ADD  R26,R30
000c66 1fbf      	ADC  R27,R31
                +
000c67 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000c68 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000c69 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000c6a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000c6b 940e 1091 	CALL __EEPROMWRD
                 ; 0000 047E         ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
000c6d 01f8      	MOVW R30,R16
000c6e e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000c6f e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000c70 0fee      	LSL  R30
000c71 1fff      	ROL  R31
000c72 0fae      	ADD  R26,R30
000c73 1fbf      	ADC  R27,R31
000c74 ece9      	LDI  R30,LOW(3273)
000c75 e0fc      	LDI  R31,HIGH(3273)
000c76 940e 1099 	CALL __EEPROMWRW
                 ; 0000 047F         ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
000c78 01f8      	MOVW R30,R16
000c79 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000c7a e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000c7b 0fee      	LSL  R30
000c7c 1fff      	ROL  R31
000c7d 0fae      	ADD  R26,R30
000c7e 1fbf      	ADC  R27,R31
000c7f ece0      	LDI  R30,LOW(65472)
000c80 efff      	LDI  R31,HIGH(65472)
000c81 940e 1099 	CALL __EEPROMWRW
                 ; 0000 0480         }
                +
000c83 5f0f     +SUBI R16 , LOW ( - 1 )
000c84 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c85 cfc9      	RJMP _0xF8
                 _0xF9:
                 ; 0000 0481         calibrationB=0;
000c86 e0e0      	LDI  R30,LOW(0)
000c87 93e0 0204 	STS  _calibrationB,R30
000c89 93e0 0205 	STS  _calibrationB+1,R30
000c8b 93e0 0206 	STS  _calibrationB+2,R30
000c8d 93e0 0207 	STS  _calibrationB+3,R30
                 ; 0000 0482         calibrationK=1;
                +
000c8f e0e0     +LDI R30 , LOW ( 0x3F800000 )
000c90 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000c91 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000c92 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000c93 93e0 0200 	STS  _calibrationK,R30
000c95 93f0 0201 	STS  _calibrationK+1,R31
000c97 9360 0202 	STS  _calibrationK+2,R22
000c99 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 0483         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
000c9b ece9      	LDI  R30,LOW(3273)
000c9c e0fc      	LDI  R31,HIGH(3273)
                +
000c9d 2e5e     +MOV R5 , R30
000c9e 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 0484         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
000c9f ece0      	LDI  R30,LOW(65472)
000ca0 efff      	LDI  R31,HIGH(65472)
                +
000ca1 2e7e     +MOV R7 , R30
000ca2 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0485         rangeIndexEep=1;
000ca3 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000ca4 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000ca5 e0e1      	LDI  R30,LOW(1)
000ca6 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0486         rangeIndex=rangeIndexEep;
000ca8 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000ca9 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000caa 940e 1085 	CALL __EEPROMRDB
000cac 2eae      	MOV  R10,R30
                 ; 0000 0487         //Upper_Range_value = 20;
                 ; 0000 0488         //Lower_Range_value = 0;
                 ; 0000 0489 }
000cad c0cd      	RJMP _0x2080001
                 ;
                 ;void PerformDeviceApplicationErase()
                 ; 0000 048C {
                 _PerformDeviceApplicationErase:
                 ; 0000 048D MCUCR = 0x01;
000cae e0e1      	LDI  R30,LOW(1)
000caf bfe5      	OUT  0x35,R30
                 ; 0000 048E MCUCR = 0x02;
000cb0 e0e2      	LDI  R30,LOW(2)
000cb1 bfe5      	OUT  0x35,R30
                 ; 0000 048F Parameter_bank[0]=0xee;
000cb2 e0a0      	LDI  R26,LOW(_Parameter_bank)
000cb3 e0b0      	LDI  R27,HIGH(_Parameter_bank)
000cb4 eeee      	LDI  R30,LOW(238)
000cb5 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0490 Parameter_bank[2]=0xa3;
                +
000cb7 e0a2     +LDI R26 , LOW ( _Parameter_bank + ( 2 ) )
000cb8 e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 2 ) )
                 	__POINTW2MN _Parameter_bank,2
000cb9 eae3      	LDI  R30,LOW(163)
000cba 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 0491 voidFuncPtr=(void(*)(void))0x1C00;   //адресс куда переходим
000cbc e0e0      	LDI  R30,LOW(7168)
000cbd e1fc      	LDI  R31,HIGH(7168)
000cbe 93e0 0270 	STS  _voidFuncPtr,R30
000cc0 93f0 0271 	STS  _voidFuncPtr+1,R31
                 ; 0000 0492 voidFuncPtr();
                +
000cc2 91e0 0270+LDS R30 , _voidFuncPtr + ( 0 )
000cc4 91f0 0271+LDS R31 , _voidFuncPtr + ( 0 ) + 1
000cc6 9509     +ICALL
                 	__CALL1MN _voidFuncPtr,0
                 ; 0000 0493 }
000cc7 9508      	RET
                 ;
                 ;void LoadCalibrationSettings(char flag)
                 ; 0000 0496 {
                 _LoadCalibrationSettings:
                 ; 0000 0497 //#asm("cli");
                 ; 0000 0498 int i=0;
                 ; 0000 0499 if(flag==0x01)
000cc8 931a      	ST   -Y,R17
000cc9 930a      	ST   -Y,R16
                 ;	flag -> Y+2
                 ;	i -> R16,R17
                +
000cca e000     +LDI R16 , LOW ( 0 )
000ccb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000ccc 81aa      	LDD  R26,Y+2
000ccd 30a1      	CPI  R26,LOW(0x1)
000cce f011      	BREQ PC+3
000ccf 940c 0d1f 	JMP _0xFA
                 ; 0000 049A         {
                 ; 0000 049B         calibration_point1=ADC_PV_calibration_point1[rangeIndexEep];
000cd1 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cd2 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cd3 940e 1085 	CALL __EEPROMRDB
000cd5 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000cd6 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000cd7 e0f0      	LDI  R31,0
000cd8 0fee      	LSL  R30
000cd9 1fff      	ROL  R31
000cda 0fae      	ADD  R26,R30
000cdb 1fbf      	ADC  R27,R31
000cdc 940e 1081 	CALL __EEPROMRDW
                +
000cde 2e5e     +MOV R5 , R30
000cdf 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 049C         calibration_point2=ADC_PV_calibration_point2[rangeIndexEep];
000ce0 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000ce1 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000ce2 940e 1085 	CALL __EEPROMRDB
000ce4 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000ce5 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000ce6 e0f0      	LDI  R31,0
000ce7 0fee      	LSL  R30
000ce8 1fff      	ROL  R31
000ce9 0fae      	ADD  R26,R30
000cea 1fbf      	ADC  R27,R31
000ceb 940e 1081 	CALL __EEPROMRDW
                +
000ced 2e7e     +MOV R7 , R30
000cee 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 049D         calibrationB=calibrationBeep[rangeIndexEep];
000cef e2a4      	LDI  R26,LOW(_rangeIndexEep)
000cf0 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000cf1 940e 1085 	CALL __EEPROMRDB
000cf3 e3a6      	LDI  R26,LOW(_calibrationBeep)
000cf4 e0b1      	LDI  R27,HIGH(_calibrationBeep)
000cf5 e0f0      	LDI  R31,0
000cf6 940e 1033 	CALL __LSLW2
000cf8 0fae      	ADD  R26,R30
000cf9 1fbf      	ADC  R27,R31
000cfa 940e 107d 	CALL __EEPROMRDD
000cfc 93e0 0204 	STS  _calibrationB,R30
000cfe 93f0 0205 	STS  _calibrationB+1,R31
000d00 9360 0206 	STS  _calibrationB+2,R22
000d02 9370 0207 	STS  _calibrationB+3,R23
                 ; 0000 049E         calibrationK=calibrationKeep[rangeIndexEep];
000d04 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000d05 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000d06 940e 1085 	CALL __EEPROMRDB
000d08 e2a6      	LDI  R26,LOW(_calibrationKeep)
000d09 e0b1      	LDI  R27,HIGH(_calibrationKeep)
000d0a e0f0      	LDI  R31,0
000d0b 940e 1033 	CALL __LSLW2
000d0d 0fae      	ADD  R26,R30
000d0e 1fbf      	ADC  R27,R31
000d0f 940e 107d 	CALL __EEPROMRDD
000d11 93e0 0200 	STS  _calibrationK,R30
000d13 93f0 0201 	STS  _calibrationK+1,R31
000d15 9360 0202 	STS  _calibrationK+2,R22
000d17 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 049F         rangeIndex=rangeIndexEep;
000d19 e2a4      	LDI  R26,LOW(_rangeIndexEep)
000d1a e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000d1b 940e 1085 	CALL __EEPROMRDB
000d1d 2eae      	MOV  R10,R30
                 ; 0000 04A0         }
                 ; 0000 04A1 else
000d1e c05c      	RJMP _0xFB
                 _0xFA:
                 ; 0000 04A2         {
                 ; 0000 04A3         rangeIndexEep = 1;
000d1f e2a4      	LDI  R26,LOW(_rangeIndexEep)
000d20 e0b1      	LDI  R27,HIGH(_rangeIndexEep)
000d21 e0e1      	LDI  R30,LOW(1)
000d22 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 04A4         rangeIndex = 1;
000d24 2eae      	MOV  R10,R30
                 ; 0000 04A5         for (i=0; i<4; i++)
                +
000d25 e000     +LDI R16 , LOW ( 0 )
000d26 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xFD:
                +
000d27 3004     +CPI R16 , LOW ( 4 )
000d28 e0e0     +LDI R30 , HIGH ( 4 )
000d29 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000d2a f59c      	BRGE _0xFE
                 ; 0000 04A6             {
                 ; 0000 04A7             calibrationBeep[i]=0;
000d2b 01f8      	MOVW R30,R16
000d2c e3a6      	LDI  R26,LOW(_calibrationBeep)
000d2d e0b1      	LDI  R27,HIGH(_calibrationBeep)
000d2e 940e 1033 	CALL __LSLW2
000d30 0fae      	ADD  R26,R30
000d31 1fbf      	ADC  R27,R31
                +
000d32 e0e0     +LDI R30 , LOW ( 0x0 )
000d33 e0f0     +LDI R31 , HIGH ( 0x0 )
000d34 e060     +LDI R22 , BYTE3 ( 0x0 )
000d35 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000d36 940e 1091 	CALL __EEPROMWRD
                 ; 0000 04A8             calibrationKeep[i]=1;
000d38 01f8      	MOVW R30,R16
000d39 e2a6      	LDI  R26,LOW(_calibrationKeep)
000d3a e0b1      	LDI  R27,HIGH(_calibrationKeep)
000d3b 940e 1033 	CALL __LSLW2
000d3d 0fae      	ADD  R26,R30
000d3e 1fbf      	ADC  R27,R31
                +
000d3f e0e0     +LDI R30 , LOW ( 0x3F800000 )
000d40 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000d41 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000d42 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000d43 940e 1091 	CALL __EEPROMWRD
                 ; 0000 04A9             ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
000d45 01f8      	MOVW R30,R16
000d46 e1a4      	LDI  R26,LOW(_ADC_PV_calibration_point1)
000d47 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point1)
000d48 0fee      	LSL  R30
000d49 1fff      	ROL  R31
000d4a 0fae      	ADD  R26,R30
000d4b 1fbf      	ADC  R27,R31
000d4c ece9      	LDI  R30,LOW(3273)
000d4d e0fc      	LDI  R31,HIGH(3273)
000d4e 940e 1099 	CALL __EEPROMWRW
                 ; 0000 04AA             ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
000d50 01f8      	MOVW R30,R16
000d51 e1ac      	LDI  R26,LOW(_ADC_PV_calibration_point2)
000d52 e0b1      	LDI  R27,HIGH(_ADC_PV_calibration_point2)
000d53 0fee      	LSL  R30
000d54 1fff      	ROL  R31
000d55 0fae      	ADD  R26,R30
000d56 1fbf      	ADC  R27,R31
000d57 ece0      	LDI  R30,LOW(65472)
000d58 efff      	LDI  R31,HIGH(65472)
000d59 940e 1099 	CALL __EEPROMWRW
                 ; 0000 04AB             }
                +
000d5b 5f0f     +SUBI R16 , LOW ( - 1 )
000d5c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000d5d cfc9      	RJMP _0xFD
                 _0xFE:
                 ; 0000 04AC         calibrationB=0;
000d5e e0e0      	LDI  R30,LOW(0)
000d5f 93e0 0204 	STS  _calibrationB,R30
000d61 93e0 0205 	STS  _calibrationB+1,R30
000d63 93e0 0206 	STS  _calibrationB+2,R30
000d65 93e0 0207 	STS  _calibrationB+3,R30
                 ; 0000 04AD         calibrationK=1;
                +
000d67 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000d68 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000d69 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000d6a e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000d6b 93e0 0200 	STS  _calibrationK,R30
000d6d 93f0 0201 	STS  _calibrationK+1,R31
000d6f 9360 0202 	STS  _calibrationK+2,R22
000d71 9370 0203 	STS  _calibrationK+3,R23
                 ; 0000 04AE         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
000d73 ece9      	LDI  R30,LOW(3273)
000d74 e0fc      	LDI  R31,HIGH(3273)
                +
000d75 2e5e     +MOV R5 , R30
000d76 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 04AF         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
000d77 ece0      	LDI  R30,LOW(65472)
000d78 efff      	LDI  R31,HIGH(65472)
                +
000d79 2e7e     +MOV R7 , R30
000d7a 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 04B0         }
                 _0xFB:
                 ; 0000 04B1   //      #asm("sei");
                 ; 0000 04B2 }
                 _0x2080001:
000d7b 8119      	LDD  R17,Y+1
000d7c 8108      	LDD  R16,Y+0
000d7d 9623      	ADIW R28,3
000d7e 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 04B5 {
                 _main:
                 ; 0000 04B6 // Declare your local variables here
                 ; 0000 04B7 //размещаем по адресу 0х00200(адрес указывается в словах, поэтому там будет в 2 раза меньше)
                 ; 0000 04B8 
                 ; 0000 04B9 int i,k=0;
                 ; 0000 04BA int char_val=0x00,data, j = 0;
                 ; 0000 04BB char dataH,dataL,crcok_flag=0;
                 ; 0000 04BC 
                 ; 0000 04BD //flash unsigned int* SERIAL = &serial_number;
                 ; 0000 04BE crc = 0xffff;
000d7f 9727      	SBIW R28,7
000d80 e0e0      	LDI  R30,LOW(0)
000d81 83e8      	ST   Y,R30
000d82 83e9      	STD  Y+1,R30
000d83 83ea      	STD  Y+2,R30
000d84 83eb      	STD  Y+3,R30
000d85 83ec      	STD  Y+4,R30
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                 ;	char_val -> R20,R21
                 ;	data -> Y+5
                 ;	j -> Y+3
                 ;	dataH -> Y+2
                 ;	dataL -> Y+1
                 ;	crcok_flag -> Y+0
                +
000d86 e020     +LDI R18 , LOW ( 0 )
000d87 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000d88 e040     +LDI R20 , LOW ( 0 )
000d89 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000d8a efef      	LDI  R30,LOW(65535)
000d8b efff      	LDI  R31,HIGH(65535)
                +
000d8c 2ede     +MOV R13 , R30
000d8d 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 04BF delay_ms(100);
000d8e e6e4      	LDI  R30,LOW(100)
000d8f e0f0      	LDI  R31,HIGH(100)
000d90 93fa      	ST   -Y,R31
000d91 93ea      	ST   -Y,R30
000d92 940e 0e71 	CALL _delay_ms
                 ; 0000 04C0 Parameter_bank[0]=0x11;
000d94 e0a0      	LDI  R26,LOW(_Parameter_bank)
000d95 e0b0      	LDI  R27,HIGH(_Parameter_bank)
000d96 e1e1      	LDI  R30,LOW(17)
000d97 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 04C1 Parameter_bank[2]=0xB3;
                +
000d99 e0a2     +LDI R26 , LOW ( _Parameter_bank + ( 2 ) )
000d9a e0b0     +LDI R27 , HIGH ( _Parameter_bank + ( 2 ) )
                 	__POINTW2MN _Parameter_bank,2
000d9b ebe3      	LDI  R30,LOW(179)
000d9c 940e 10a1 	CALL __EEPROMWRB
                 ; 0000 04C2 //serial = 0xabcd;
                 ; 0000 04C3 //#asm
                 ; 0000 04C4 //    .CSEG
                 ; 0000 04C5 //    .org    0x00080
                 ; 0000 04C6 //    .DW 0xabcd, 0x0123
                 ; 0000 04C7 //    .org    0x00082
                 ; 0000 04C8 //    RET
                 ; 0000 04C9 //    .org    0x38
                 ; 0000 04CA //    serial1:  .BYTE 1
                 ; 0000 04CB //    .org    0x39
                 ; 0000 04CC //    serial2:  .BYTE 1
                 ; 0000 04CD //    .org    0x4a
                 ; 0000 04CE //    serial3:  .BYTE 1
                 ; 0000 04CF    //.db 0xab, 0xcd , $ef , $77
                 ; 0000 04D0   //   .org    0x00084
                 ; 0000 04D1   //   RET
                 ; 0000 04D2 //
                 ; 0000 04D3    // .CSEG
                 ; 0000 04D4 //#endasm
                 ; 0000 04D5 //long serial = 0xabcdef12;
                 ; 0000 04D6 //system_init(0);
                 ; 0000 04D7  #asm("wdr")
000d9e 95a8      	wdr
                 ; 0000 04D8 while ((data<=65534)|(j<=16382))
                 _0xFF:
000d9f 81ad      	LDD  R26,Y+5
000da0 81be      	LDD  R27,Y+5+1
000da1 efee      	LDI  R30,LOW(65534)
000da2 efff      	LDI  R31,HIGH(65534)
000da3 940e 1057 	CALL __LEW12U
000da5 2e0e      	MOV  R0,R30
000da6 81ab      	LDD  R26,Y+3
000da7 81bc      	LDD  R27,Y+3+1
000da8 efee      	LDI  R30,LOW(16382)
000da9 e3ff      	LDI  R31,HIGH(16382)
000daa 940e 1051 	CALL __LEW12
000dac 29e0      	OR   R30,R0
000dad f121      	BREQ _0x101
                 ; 0000 04D9 {
                 ; 0000 04DA    // if(j==0x1BDE)j+=2;//перескакиваем адрес с контрольной суммой для ПО загрузчика для ПК
                 ; 0000 04DB     if(j==0xDEF)j++;
000dae 3eaf      	CPI  R26,LOW(0xDEF)
000daf e0ed      	LDI  R30,HIGH(0xDEF)
000db0 07be      	CPC  R27,R30
000db1 f429      	BRNE _0x102
000db2 81eb      	LDD  R30,Y+3
000db3 81fc      	LDD  R31,Y+3+1
000db4 9631      	ADIW R30,1
000db5 83eb      	STD  Y+3,R30
000db6 83fc      	STD  Y+3+1,R31
                 ; 0000 04DC     data= read_program_memory (j);
                 _0x102:
000db7 81eb      	LDD  R30,Y+3
000db8 81fc      	LDD  R31,Y+3+1
000db9 93fa      	ST   -Y,R31
000dba 93ea      	ST   -Y,R30
000dbb 940e 034d 	CALL _read_program_memory
000dbd 83ed      	STD  Y+5,R30
000dbe 83fe      	STD  Y+5+1,R31
                 ; 0000 04DD     dataH = (int)data>>8;
000dbf 940e 1038 	CALL __ASRW8
000dc1 83ea      	STD  Y+2,R30
                 ; 0000 04DE     dataL = data;
000dc2 81ed      	LDD  R30,Y+5
000dc3 83e9      	STD  Y+1,R30
                 ; 0000 04DF     CRC_update(dataH);
000dc4 81ea      	LDD  R30,Y+2
000dc5 93ea      	ST   -Y,R30
000dc6 940e 0353 	CALL _CRC_update
                 ; 0000 04E0     CRC_update(dataL);
000dc8 81e9      	LDD  R30,Y+1
000dc9 93ea      	ST   -Y,R30
000dca 940e 0353 	CALL _CRC_update
                 ; 0000 04E1     //crc_rtu(data);
                 ; 0000 04E2     //j++;
                 ; 0000 04E3     j=j+2;
000dcc 81eb      	LDD  R30,Y+3
000dcd 81fc      	LDD  R31,Y+3+1
000dce 9632      	ADIW R30,2
000dcf 83eb      	STD  Y+3,R30
000dd0 83fc      	STD  Y+3+1,R31
                 ; 0000 04E4 }
000dd1 cfcd      	RJMP _0xFF
                 _0x101:
                 ; 0000 04E5 crceep = crc;
                +
000dd2 2ded     +MOV R30 , R13
000dd3 2dfe     +MOV R31 , R14
                 	__GETW1R 13,14
000dd4 e4a6      	LDI  R26,LOW(_crceep)
000dd5 e0b1      	LDI  R27,HIGH(_crceep)
000dd6 940e 1099 	CALL __EEPROMWRW
                 ; 0000 04E6 //if(crc==crcstatic)system_init(1);
                 ; 0000 04E7 //else system_init(0);
                 ; 0000 04E8  system_init();
000dd8 db43      	RCALL _system_init
                 ; 0000 04E9 #asm
                 ; 0000 04EA     in   r30,spsr
000dd9 b5ed          in   r30,spsr
                 ; 0000 04EB     in   r30,spdr
000dda b5ee          in   r30,spdr
                 ; 0000 04EC #endasm
                 ; 0000 04ED //serial_address = *serial;
                 ; 0000 04EE //normal_mode;
                 ; 0000 04EF #asm("sei")
000ddb 9478      	sei
                 ; 0000 04F0 
                 ; 0000 04F1 setlevel_0_20;
000ddc 985f      	CBI  0xB,7
000ddd 9a5e      	SBI  0xB,6
                 ; 0000 04F2 if(crceep==crcstatic)
000dde e4a6      	LDI  R26,LOW(_crceep)
000ddf e0b1      	LDI  R27,HIGH(_crceep)
000de0 940e 1081 	CALL __EEPROMRDW
000de2 010f      	MOVW R0,R30
000de3 e4a8      	LDI  R26,LOW(_crcstatic)
000de4 e0b1      	LDI  R27,HIGH(_crcstatic)
000de5 940e 1081 	CALL __EEPROMRDW
000de7 15e0      	CP   R30,R0
000de8 05f1      	CPC  R31,R1
000de9 f579      	BRNE _0x107
                 ; 0000 04F3     {
                 ; 0000 04F4 
                 ; 0000 04F5        // Parameter_bank[107]=0x80;
                 ; 0000 04F6 //        Parameter_bank[10]=0xBF;
                 ; 0000 04F7 //        Parameter_bank[11]=0xBC;
                 ; 0000 04F8         LoadCalibrationSettings(CalibrationConfigChanged);
000dea e2a5      	LDI  R26,LOW(_CalibrationConfigChanged)
000deb e0b1      	LDI  R27,HIGH(_CalibrationConfigChanged)
000dec 940e 1085 	CALL __EEPROMRDB
000dee 93ea      	ST   -Y,R30
000def ded8      	RCALL _LoadCalibrationSettings
                 ; 0000 04F9         CalculateCalibrationRates();
000df0 ddc7      	RCALL _CalculateCalibrationRates
                 ; 0000 04FA         transmit_SPI(DAC_data,2);
000df1 91e0 0279 	LDS  R30,_DAC_data
000df3 91f0 027a 	LDS  R31,_DAC_data+1
000df5 93fa      	ST   -Y,R31
000df6 93ea      	ST   -Y,R30
000df7 e0e2      	LDI  R30,LOW(2)
000df8 93ea      	ST   -Y,R30
000df9 940e 042c 	CALL _transmit_SPI
                 ; 0000 04FB         update_dynamic_vars();
000dfb db96      	RCALL _update_dynamic_vars
                 ; 0000 04FC         //enable_uart;
                 ; 0000 04FD         RxEn;
000dfc 91e0 00c1 	LDS  R30,193
000dfe 7ce0      	ANDI R30,LOW(0xC0)
000dff 61e0      	ORI  R30,0x10
000e00 93e0 00c1 	STS  193,R30
                 ; 0000 04FE         //PORTD=0x08;
                 ; 0000 04FF         Recieve;
000e02 9a5b      	SBI  0xB,3
                 ; 0000 0500         //disable_eints;
                 ; 0000 0501         while (1)
                 _0x10A:
                 ; 0000 0502               {
                 ; 0000 0503                 #asm("wdr")
000e03 95a8      	wdr
                 ; 0000 0504                 //delay_ms(20);
                 ; 0000 0505                 //enable_SPI;
                 ; 0000 0506 
                 ; 0000 0507 
                 ; 0000 0508         //        }
                 ; 0000 0509         if(message_recieved)
000e04 9bf4      	SBIS 0x1E,4
000e05 c002      	RJMP _0x10D
                 ; 0000 050A                 {
                 ; 0000 050B                  transmit_HART();
000e06 940e 0467 	CALL _transmit_HART
                 ; 0000 050C                 }
                 ; 0000 050D         //else
                 ; 0000 050E         //        {
                 ; 0000 050F                 ADCSRA=0xcf;
                 _0x10D:
000e08 ecef      	LDI  R30,LOW(207)
000e09 93e0 007a 	STS  122,R30
                 ; 0000 0510                 update_dynamic_vars();
000e0b db86      	RCALL _update_dynamic_vars
                 ; 0000 0511                 PORTB.2=1;
000e0c 9a2a      	SBI  0x5,2
                 ; 0000 0512                 transmit_SPI(DAC_data,2);
000e0d 91e0 0279 	LDS  R30,_DAC_data
000e0f 91f0 027a 	LDS  R31,_DAC_data+1
000e11 93fa      	ST   -Y,R31
000e12 93ea      	ST   -Y,R30
000e13 e0e2      	LDI  R30,LOW(2)
000e14 93ea      	ST   -Y,R30
000e15 940e 042c 	CALL _transmit_SPI
                 ; 0000 0513                 PORTB.2=0;
000e17 982a      	CBI  0x5,2
                 ; 0000 0514                // }
                 ; 0000 0515         }
000e18 cfea      	RJMP _0x10A
                 ; 0000 0516     }
                 ; 0000 0517 else
                 _0x107:
                 ; 0000 0518     {
                 ; 0000 0519         RxEn;
000e19 91e0 00c1 	LDS  R30,193
000e1b 7ce0      	ANDI R30,LOW(0xC0)
000e1c 61e0      	ORI  R30,0x10
000e1d 93e0 00c1 	STS  193,R30
                 ; 0000 051A         //PORTD=0x08;
                 ; 0000 051B         Recieve;
000e1f 9a5b      	SBI  0xB,3
                 ; 0000 051C //               Parameter_bank[107]=0x60;
                 ; 0000 051D //               Parameter_bank[10]=(char)crc;
                 ; 0000 051E //               Parameter_bank[11]=(char)(crc>>8);
                 ; 0000 051F 
                 ; 0000 0520         while (1)
                 _0x115:
                 ; 0000 0521               {
                 ; 0000 0522               // DAC_zero_current=3.5;
                 ; 0000 0523 
                 ; 0000 0524                 #asm("wdr")
000e20 95a8      	wdr
                 ; 0000 0525                 if(message_recieved)
000e21 9bf4      	SBIS 0x1E,4
000e22 c002      	RJMP _0x118
                 ; 0000 0526                 {
                 ; 0000 0527                  transmit_HART();
000e23 940e 0467 	CALL _transmit_HART
                 ; 0000 0528                 }
                 ; 0000 0529                 ADCSRA=0x0f;
                 _0x118:
000e25 e0ef      	LDI  R30,LOW(15)
000e26 93e0 007a 	STS  122,R30
                 ; 0000 052A                 adc_data=0;
000e28 e0e0      	LDI  R30,LOW(0)
000e29 93e0 0275 	STS  _adc_data,R30
000e2b 93e0 0276 	STS  _adc_data+1,R30
000e2d 93e0 0277 	STS  _adc_data+2,R30
000e2f 93e0 0278 	STS  _adc_data+3,R30
                 ; 0000 052B                 update_dynamic_vars();
000e31 db60      	RCALL _update_dynamic_vars
                 ; 0000 052C                 PORTB.2=1;
000e32 9a2a      	SBI  0x5,2
                 ; 0000 052D                 transmit_SPI(DAC_data,2);
000e33 91e0 0279 	LDS  R30,_DAC_data
000e35 91f0 027a 	LDS  R31,_DAC_data+1
000e37 93fa      	ST   -Y,R31
000e38 93ea      	ST   -Y,R30
000e39 e0e2      	LDI  R30,LOW(2)
000e3a 93ea      	ST   -Y,R30
000e3b 940e 042c 	CALL _transmit_SPI
                 ; 0000 052E                 PORTB.2=0;
000e3d 982a      	CBI  0x5,2
                 ; 0000 052F 
                 ; 0000 0530         }
000e3e cfe1      	RJMP _0x115
                 ; 0000 0531     }
                 ; 0000 0532 #asm
                 ; 0000 0533 .CSEG
                 .CSEG
                 ; 0000 0534 varlist: .DW 0x4fd1
000e3f 4fd1      varlist: .DW 0x4fd1
                 ; 0000 0535 .org 0x0e6f                  //адрес, по которому будет распологаться наш CRC - 0x1BCC, длина - 2 байта , эти 2 байта для проверки со стороны МК мы исключаем, просто перескочив их
                 .org 0x0e6f                  //адрес, по которому будет распологаться наш CRC - 0x1BCC, длина - 2 байта , эти 2 байта для проверки со стороны МК мы исключаем, просто перескочив их
                 ; 0000 0536 #endasm
                 ; 0000 0537 }
000e6f 9627      	ADIW R28,7
                 _0x11D:
000e70 cfff      	RJMP _0x11D
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _Parameter_bank:
000000 00
000001 56
000002 a3
000003 04        	.DB  LOW(0x4A35600),HIGH(0x4A35600),BYTE3(0x4A35600),BYTE4(0x4A35600)
000004 01
000005 01
000006 01
000007 21        	.DB  LOW(0x21010101),HIGH(0x21010101),BYTE3(0x21010101),BYTE4(0x21010101)
000008 00
000009 00
00000a bf
00000b bc        	.DB  LOW(0xBCBF0000),HIGH(0xBCBF0000),BYTE3(0xBCBF0000),BYTE4(0xBCBF0000)
00000c 6d
00000d 00
00000e 00
00000f 00        	.DB  LOW(0x6D),HIGH(0x6D),BYTE3(0x6D),BYTE4(0x6D)
000010 00
000011 00
000012 00
000013 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000014 00
000015 00
000016 00
000017 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000018 00
000019 02
00001a 00
00001b 00        	.DB  LOW(0x200),HIGH(0x200),BYTE3(0x200),BYTE4(0x200)
00001c 00
00001d 00
00001e 00
00001f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000020 00
000021 00
000022 00
000023 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000024 00
000025 00
000026 00
000027 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000028 00
000029 00
00002a 00
00002b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00002c 00
00002d 00
00002e 00
00002f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000030 00
000031 00
000032 00
000033 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000034 00
000035 00
000036 00
000037 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000038 00
000039 00
00003a 00
00003b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00003c 00
00003d 00
00003e 00
00003f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000040 00
000041 00
000042 00
000043 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000044 00
000045 00
000046 00
000047 01        	.DB  LOW(0x1000000),HIGH(0x1000000),BYTE3(0x1000000),BYTE4(0x1000000)
000048 02
000049 03
00004a 42
00004b 48        	.DB  LOW(0x48420302),HIGH(0x48420302),BYTE3(0x48420302),BYTE4(0x48420302)
00004c 00
00004d 00
00004e 00
00004f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000050 00
000051 00
000052 3c
000053 23        	.DB  LOW(0x233C0000),HIGH(0x233C0000),BYTE3(0x233C0000),BYTE4(0x233C0000)
000054 d7
000055 0a
000056 00
000057 00        	.DB  LOW(0xAD7),HIGH(0xAD7),BYTE3(0xAD7),BYTE4(0xAD7)
000058 00
000059 00
00005a a0
00005b 41        	.DB  LOW(0x41A00000),HIGH(0x41A00000),BYTE3(0x41A00000),BYTE4(0x41A00000)
00005c 00
00005d 00
00005e 00
00005f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000060 f0
000061 0f
000062 00
000063 00        	.DB  LOW(0xFF0),HIGH(0xFF0),BYTE3(0xFF0),BYTE4(0xFF0)
000064 00
000065 00
000066 00
000067 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000068 00
000069 00
00006a 00
00006b 80        	.DB  LOW(0x80000000),HIGH(0x80000000),BYTE3(0x80000000),BYTE4(0x80000000)
00006c 40
00006d 00
00006e 00
00006f a0        	.DB  LOW(0xA0000040),HIGH(0xA0000040),BYTE3(0xA0000040),BYTE4(0xA0000040)
000070 41
000071 00
000072 00
000073 00        	.DB  LOW(0x41),HIGH(0x41),BYTE3(0x41),BYTE4(0x41)
000074 00
000075 00
000076 00
000077 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000078 00
000079 00
00007a 00
00007b 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00007c 00
00007d 00
00007e 00
00007f 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000080 00
000081 00
000082 00
000083 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000084 00
000085 00
000086 00
000087 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000088 00 00     	.DW  0x0
                 _Parameter_defaults:
00008a 11
00008b 56
00008c b3
00008d 04        	.DB  LOW(0x4B35611),HIGH(0x4B35611),BYTE3(0x4B35611),BYTE4(0x4B35611)
00008e 01
00008f 01
000090 01
000091 21        	.DB  LOW(0x21010101),HIGH(0x21010101),BYTE3(0x21010101),BYTE4(0x21010101)
000092 00
000093 00
000094 bf
000095 bc        	.DB  LOW(0xBCBF0000),HIGH(0xBCBF0000),BYTE3(0xBCBF0000),BYTE4(0xBCBF0000)
000096 6d
000097 00
000098 00
000099 00        	.DB  LOW(0x6D),HIGH(0x6D),BYTE3(0x6D),BYTE4(0x6D)
00009a 00
00009b 00
00009c 00
00009d 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00009e 00
00009f 00
0000a0 00
0000a1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000a2 00
0000a3 02
0000a4 00
0000a5 00        	.DB  LOW(0x200),HIGH(0x200),BYTE3(0x200),BYTE4(0x200)
0000a6 00
0000a7 00
0000a8 00
0000a9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000aa 00
0000ab 00
0000ac 00
0000ad 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ae 00
0000af 00
0000b0 00
0000b1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000b2 00
0000b3 00
0000b4 00
0000b5 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000b6 00
0000b7 00
0000b8 00
0000b9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ba 00
0000bb 00
0000bc 00
0000bd 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000be 00
0000bf 00
0000c0 00
0000c1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000c2 00
0000c3 00
0000c4 00
0000c5 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000c6 00
0000c7 00
0000c8 00
0000c9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ca 00
0000cb 00
0000cc 00
0000cd 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ce 00
0000cf 00
0000d0 00
0000d1 01        	.DB  LOW(0x1000000),HIGH(0x1000000),BYTE3(0x1000000),BYTE4(0x1000000)
0000d2 02
0000d3 03
0000d4 42
0000d5 48        	.DB  LOW(0x48420302),HIGH(0x48420302),BYTE3(0x48420302),BYTE4(0x48420302)
0000d6 00
0000d7 00
0000d8 00
0000d9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000da 00
0000db 00
0000dc 3c
0000dd 23        	.DB  LOW(0x233C0000),HIGH(0x233C0000),BYTE3(0x233C0000),BYTE4(0x233C0000)
0000de d7
0000df 0a
0000e0 00
0000e1 00        	.DB  LOW(0xAD7),HIGH(0xAD7),BYTE3(0xAD7),BYTE4(0xAD7)
0000e2 00
0000e3 00
0000e4 a0
0000e5 41        	.DB  LOW(0x41A00000),HIGH(0x41A00000),BYTE3(0x41A00000),BYTE4(0x41A00000)
0000e6 00
0000e7 00
0000e8 00
0000e9 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000ea f0
0000eb 0f
0000ec 00
0000ed 00        	.DB  LOW(0xFF0),HIGH(0xFF0),BYTE3(0xFF0),BYTE4(0xFF0)
0000ee 00
0000ef 00
0000f0 00
0000f1 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
0000f2 00
0000f3 00
0000f4 00
0000f5 80        	.DB  LOW(0x80000000),HIGH(0x80000000),BYTE3(0x80000000),BYTE4(0x80000000)
0000f6 40
0000f7 00
0000f8 00
0000f9 a0        	.DB  LOW(0xA0000040),HIGH(0xA0000040),BYTE3(0xA0000040),BYTE4(0xA0000040)
0000fa 41
0000fb 00
0000fc 00
0000fd 00        	.DB  LOW(0x41),HIGH(0x41),BYTE3(0x41),BYTE4(0x41)
0000fe 00
0000ff 00
000100 00
000101 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000102 00
000103 00
000104 00
000105 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000106 00
000107 00
000108 00
000109 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00010a 00
00010b 00
00010c 00
00010d 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
00010e 00
00010f 00
000110 00
000111 00        	.DB  LOW(0x0),HIGH(0x0),BYTE3(0x0),BYTE4(0x0)
000112 00 00     	.DW  0x0
                 _ADC_PV_calibration_point1:
000114           	.BYTE 0x8
                 _ADC_PV_calibration_point2:
00011c           	.BYTE 0x8
                 _rangeIndexEep:
000124           	.BYTE 0x1
                 _CalibrationConfigChanged:
000125           	.BYTE 0x1
                 _calibrationKeep:
000126           	.BYTE 0x10
                 _calibrationBeep:
000136           	.BYTE 0x10
                 _crceep:
000146 00 00     	.DW  0x0
                 _crcstatic:
000148 5d 10     	.DW  0x105D
                 
                 	.DSEG
                 _calibrationK:
000200           	.BYTE 0x4
                 _calibrationB:
000204           	.BYTE 0x4
                 _rx_buffer0:
000208           	.BYTE 0x40
                 _com_data_rx:
000248           	.BYTE 0x19
                 _dynamic_variables:
000261           	.BYTE 0xC
                 _com_bytes_rx:
00026d           	.BYTE 0x1
                 _update_args_flag:
00026e           	.BYTE 0x1
                 _p_bank_addr:
00026f           	.BYTE 0x1
                 _voidFuncPtr:
000270           	.BYTE 0x2
                 _rx_wr_index0:
000272           	.BYTE 0x1
                 _rx_rd_index0:
000273           	.BYTE 0x1
                 _rx_counter0:
000274           	.BYTE 0x1
                 _adc_data:
000275           	.BYTE 0x4
                 _DAC_data:
000279           	.BYTE 0x4
                 _SPI_tEnd:
00027d           	.BYTE 0x1
                 _checking_result:
00027e           	.BYTE 0x1
                 _preambula_bytes:
00027f           	.BYTE 0x1
                 _preambula_bytes_rec:
000280           	.BYTE 0x1
                 _bytes_quantity_ans:
000281           	.BYTE 0x1
                 _command_rx_val:
000282           	.BYTE 0x1
                 _Command_data:
000283           	.BYTE 0x19
                 _tx_buffer0:
00029c           	.BYTE 0x40
                 _tx_rd_index0:
0002dc           	.BYTE 0x1
                 _tx_counter0:
0002dd           	.BYTE 0x1
                 __seed_G101:
0002de           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000e71 91e9      	ld   r30,y+
000e72 91f9      	ld   r31,y+
000e73 9630      	adiw r30,0
000e74 f031      	breq __delay_ms1
                 __delay_ms0:
                +
000e75 e98a     +LDI R24 , LOW ( 0x9A )
                +__DELAY_USB_LOOP :
000e76 958a     +DEC R24
000e77 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x9A
000e78 95a8      	wdr
000e79 9731      	sbiw r30,1
000e7a f7d1      	brne __delay_ms0
                 __delay_ms1:
000e7b 9508      	ret
                 
                 __ROUND_REPACK:
000e7c 2355      	TST  R21
000e7d f442      	BRPL __REPACK
000e7e 3850      	CPI  R21,0x80
000e7f f411      	BRNE __ROUND_REPACK0
000e80 ffe0      	SBRS R30,0
000e81 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000e82 9631      	ADIW R30,1
000e83 1f69      	ADC  R22,R25
000e84 1f79      	ADC  R23,R25
000e85 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000e86 e850      	LDI  R21,0x80
000e87 2757      	EOR  R21,R23
000e88 f411      	BRNE __REPACK0
000e89 935f      	PUSH R21
000e8a c0ca      	RJMP __ZERORES
                 __REPACK0:
000e8b 3f5f      	CPI  R21,0xFF
000e8c f031      	BREQ __REPACK1
000e8d 0f66      	LSL  R22
000e8e 0c00      	LSL  R0
000e8f 9557      	ROR  R21
000e90 9567      	ROR  R22
000e91 2f75      	MOV  R23,R21
000e92 9508      	RET
                 __REPACK1:
000e93 935f      	PUSH R21
000e94 2000      	TST  R0
000e95 f00a      	BRMI __REPACK2
000e96 c0ca      	RJMP __MAXRES
                 __REPACK2:
000e97 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000e98 e850      	LDI  R21,0x80
000e99 2e19      	MOV  R1,R25
000e9a 2215      	AND  R1,R21
000e9b 0f88      	LSL  R24
000e9c 1f99      	ROL  R25
000e9d 2795      	EOR  R25,R21
000e9e 0f55      	LSL  R21
000e9f 9587      	ROR  R24
                 
                 __UNPACK1:
000ea0 e850      	LDI  R21,0x80
000ea1 2e07      	MOV  R0,R23
000ea2 2205      	AND  R0,R21
000ea3 0f66      	LSL  R22
000ea4 1f77      	ROL  R23
000ea5 2775      	EOR  R23,R21
000ea6 0f55      	LSL  R21
000ea7 9567      	ROR  R22
000ea8 9508      	RET
                 
                 __CFD1U:
000ea9 9468      	SET
000eaa c001      	RJMP __CFD1U0
                 __CFD1:
000eab 94e8      	CLT
                 __CFD1U0:
000eac 935f      	PUSH R21
000ead dff2      	RCALL __UNPACK1
000eae 3870      	CPI  R23,0x80
000eaf f018      	BRLO __CFD10
000eb0 3f7f      	CPI  R23,0xFF
000eb1 f408      	BRCC __CFD10
000eb2 c0a2      	RJMP __ZERORES
                 __CFD10:
000eb3 e156      	LDI  R21,22
000eb4 1b57      	SUB  R21,R23
000eb5 f4aa      	BRPL __CFD11
000eb6 9551      	NEG  R21
000eb7 3058      	CPI  R21,8
000eb8 f40e      	BRTC __CFD19
000eb9 3059      	CPI  R21,9
                 __CFD19:
000eba f030      	BRLO __CFD17
000ebb efef      	SER  R30
000ebc efff      	SER  R31
000ebd ef6f      	SER  R22
000ebe e77f      	LDI  R23,0x7F
000ebf f977      	BLD  R23,7
000ec0 c01a      	RJMP __CFD15
                 __CFD17:
000ec1 2777      	CLR  R23
000ec2 2355      	TST  R21
000ec3 f0b9      	BREQ __CFD15
                 __CFD18:
000ec4 0fee      	LSL  R30
000ec5 1fff      	ROL  R31
000ec6 1f66      	ROL  R22
000ec7 1f77      	ROL  R23
000ec8 955a      	DEC  R21
000ec9 f7d1      	BRNE __CFD18
000eca c010      	RJMP __CFD15
                 __CFD11:
000ecb 2777      	CLR  R23
                 __CFD12:
000ecc 3058      	CPI  R21,8
000ecd f028      	BRLO __CFD13
000ece 2fef      	MOV  R30,R31
000ecf 2ff6      	MOV  R31,R22
000ed0 2f67      	MOV  R22,R23
000ed1 5058      	SUBI R21,8
000ed2 cff9      	RJMP __CFD12
                 __CFD13:
000ed3 2355      	TST  R21
000ed4 f031      	BREQ __CFD15
                 __CFD14:
000ed5 9576      	LSR  R23
000ed6 9567      	ROR  R22
000ed7 95f7      	ROR  R31
000ed8 95e7      	ROR  R30
000ed9 955a      	DEC  R21
000eda f7d1      	BRNE __CFD14
                 __CFD15:
000edb 2000      	TST  R0
000edc f40a      	BRPL __CFD16
000edd d141      	RCALL __ANEGD1
                 __CFD16:
000ede 915f      	POP  R21
000edf 9508      	RET
                 
                 __CDF1U:
000ee0 9468      	SET
000ee1 c001      	RJMP __CDF1U0
                 __CDF1:
000ee2 94e8      	CLT
                 __CDF1U0:
000ee3 9730      	SBIW R30,0
000ee4 4060      	SBCI R22,0
000ee5 4070      	SBCI R23,0
000ee6 f0b1      	BREQ __CDF10
000ee7 2400      	CLR  R0
000ee8 f026      	BRTS __CDF11
000ee9 2377      	TST  R23
000eea f412      	BRPL __CDF11
000eeb 9400      	COM  R0
000eec d132      	RCALL __ANEGD1
                 __CDF11:
000eed 2e17      	MOV  R1,R23
000eee e17e      	LDI  R23,30
000eef 2011      	TST  R1
                 __CDF12:
000ef0 f032      	BRMI __CDF13
000ef1 957a      	DEC  R23
000ef2 0fee      	LSL  R30
000ef3 1fff      	ROL  R31
000ef4 1f66      	ROL  R22
000ef5 1c11      	ROL  R1
000ef6 cff9      	RJMP __CDF12
                 __CDF13:
000ef7 2fef      	MOV  R30,R31
000ef8 2ff6      	MOV  R31,R22
000ef9 2d61      	MOV  R22,R1
000efa 935f      	PUSH R21
000efb df8a      	RCALL __REPACK
000efc 915f      	POP  R21
                 __CDF10:
000efd 9508      	RET
                 
                 __SWAPACC:
000efe 934f      	PUSH R20
000eff 01af      	MOVW R20,R30
000f00 01fd      	MOVW R30,R26
000f01 01da      	MOVW R26,R20
000f02 01ab      	MOVW R20,R22
000f03 01bc      	MOVW R22,R24
000f04 01ca      	MOVW R24,R20
000f05 2d40      	MOV  R20,R0
000f06 2c01      	MOV  R0,R1
000f07 2e14      	MOV  R1,R20
000f08 914f      	POP  R20
000f09 9508      	RET
                 
                 __UADD12:
000f0a 0fea      	ADD  R30,R26
000f0b 1ffb      	ADC  R31,R27
000f0c 1f68      	ADC  R22,R24
000f0d 9508      	RET
                 
                 __NEGMAN1:
000f0e 95e0      	COM  R30
000f0f 95f0      	COM  R31
000f10 9560      	COM  R22
000f11 5fef      	SUBI R30,-1
000f12 4fff      	SBCI R31,-1
000f13 4f6f      	SBCI R22,-1
000f14 9508      	RET
                 
                 __SUBF12:
000f15 935f      	PUSH R21
000f16 df81      	RCALL __UNPACK
000f17 3890      	CPI  R25,0x80
000f18 f149      	BREQ __ADDF129
000f19 e850      	LDI  R21,0x80
000f1a 2615      	EOR  R1,R21
                 
                 __ADDF120:
000f1b 3870      	CPI  R23,0x80
000f1c f121      	BREQ __ADDF128
                 __ADDF121:
000f1d 2f57      	MOV  R21,R23
000f1e 1b59      	SUB  R21,R25
000f1f f12b      	BRVS __ADDF1211
000f20 f412      	BRPL __ADDF122
000f21 dfdc      	RCALL __SWAPACC
000f22 cffa      	RJMP __ADDF121
                 __ADDF122:
000f23 3158      	CPI  R21,24
000f24 f018      	BRLO __ADDF123
000f25 27aa      	CLR  R26
000f26 27bb      	CLR  R27
000f27 2788      	CLR  R24
                 __ADDF123:
000f28 3058      	CPI  R21,8
000f29 f028      	BRLO __ADDF124
000f2a 2fab      	MOV  R26,R27
000f2b 2fb8      	MOV  R27,R24
000f2c 2788      	CLR  R24
000f2d 5058      	SUBI R21,8
000f2e cff9      	RJMP __ADDF123
                 __ADDF124:
000f2f 2355      	TST  R21
000f30 f029      	BREQ __ADDF126
                 __ADDF125:
000f31 9586      	LSR  R24
000f32 95b7      	ROR  R27
000f33 95a7      	ROR  R26
000f34 955a      	DEC  R21
000f35 f7d9      	BRNE __ADDF125
                 __ADDF126:
000f36 2d50      	MOV  R21,R0
000f37 2551      	EOR  R21,R1
000f38 f072      	BRMI __ADDF127
000f39 dfd0      	RCALL __UADD12
000f3a f438      	BRCC __ADDF129
000f3b 9567      	ROR  R22
000f3c 95f7      	ROR  R31
000f3d 95e7      	ROR  R30
000f3e 9573      	INC  R23
000f3f f413      	BRVC __ADDF129
000f40 c020      	RJMP __MAXRES
                 __ADDF128:
000f41 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000f42 df43      	RCALL __REPACK
000f43 915f      	POP  R21
000f44 9508      	RET
                 __ADDF1211:
000f45 f7d8      	BRCC __ADDF128
000f46 cffb      	RJMP __ADDF129
                 __ADDF127:
000f47 1bea      	SUB  R30,R26
000f48 0bfb      	SBC  R31,R27
000f49 0b68      	SBC  R22,R24
000f4a f051      	BREQ __ZERORES
000f4b f410      	BRCC __ADDF1210
000f4c 9400      	COM  R0
000f4d dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
000f4e 2366      	TST  R22
000f4f f392      	BRMI __ADDF129
000f50 0fee      	LSL  R30
000f51 1fff      	ROL  R31
000f52 1f66      	ROL  R22
000f53 957a      	DEC  R23
000f54 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000f55 27ee      	CLR  R30
000f56 27ff      	CLR  R31
000f57 2766      	CLR  R22
000f58 2777      	CLR  R23
000f59 915f      	POP  R21
000f5a 9508      	RET
                 
                 __MINRES:
000f5b efef      	SER  R30
000f5c efff      	SER  R31
000f5d e76f      	LDI  R22,0x7F
000f5e ef7f      	SER  R23
000f5f 915f      	POP  R21
000f60 9508      	RET
                 
                 __MAXRES:
000f61 efef      	SER  R30
000f62 efff      	SER  R31
000f63 e76f      	LDI  R22,0x7F
000f64 e77f      	LDI  R23,0x7F
000f65 915f      	POP  R21
000f66 9508      	RET
                 
                 __MULF12:
000f67 935f      	PUSH R21
000f68 df2f      	RCALL __UNPACK
000f69 3870      	CPI  R23,0x80
000f6a f351      	BREQ __ZERORES
000f6b 3890      	CPI  R25,0x80
000f6c f341      	BREQ __ZERORES
000f6d 2401      	EOR  R0,R1
000f6e 9408      	SEC
000f6f 1f79      	ADC  R23,R25
000f70 f423      	BRVC __MULF124
000f71 f31c      	BRLT __ZERORES
                 __MULF125:
000f72 2000      	TST  R0
000f73 f33a      	BRMI __MINRES
000f74 cfec      	RJMP __MAXRES
                 __MULF124:
000f75 920f      	PUSH R0
000f76 931f      	PUSH R17
000f77 932f      	PUSH R18
000f78 933f      	PUSH R19
000f79 934f      	PUSH R20
000f7a 2711      	CLR  R17
000f7b 2722      	CLR  R18
000f7c 2799      	CLR  R25
000f7d 9f68      	MUL  R22,R24
000f7e 01a0      	MOVW R20,R0
000f7f 9f8f      	MUL  R24,R31
000f80 2d30      	MOV  R19,R0
000f81 0d41      	ADD  R20,R1
000f82 1f59      	ADC  R21,R25
000f83 9f6b      	MUL  R22,R27
000f84 0d30      	ADD  R19,R0
000f85 1d41      	ADC  R20,R1
000f86 1f59      	ADC  R21,R25
000f87 9f8e      	MUL  R24,R30
000f88 d027      	RCALL __MULF126
000f89 9fbf      	MUL  R27,R31
000f8a d025      	RCALL __MULF126
000f8b 9f6a      	MUL  R22,R26
000f8c d023      	RCALL __MULF126
000f8d 9fbe      	MUL  R27,R30
000f8e d01d      	RCALL __MULF127
000f8f 9faf      	MUL  R26,R31
000f90 d01b      	RCALL __MULF127
000f91 9fae      	MUL  R26,R30
000f92 0d11      	ADD  R17,R1
000f93 1f29      	ADC  R18,R25
000f94 1f39      	ADC  R19,R25
000f95 1f49      	ADC  R20,R25
000f96 1f59      	ADC  R21,R25
000f97 2fe3      	MOV  R30,R19
000f98 2ff4      	MOV  R31,R20
000f99 2f65      	MOV  R22,R21
000f9a 2f52      	MOV  R21,R18
000f9b 914f      	POP  R20
000f9c 913f      	POP  R19
000f9d 912f      	POP  R18
000f9e 911f      	POP  R17
000f9f 900f      	POP  R0
000fa0 2366      	TST  R22
000fa1 f02a      	BRMI __MULF122
000fa2 0f55      	LSL  R21
000fa3 1fee      	ROL  R30
000fa4 1fff      	ROL  R31
000fa5 1f66      	ROL  R22
000fa6 c002      	RJMP __MULF123
                 __MULF122:
000fa7 9573      	INC  R23
000fa8 f24b      	BRVS __MULF125
                 __MULF123:
000fa9 ded2      	RCALL __ROUND_REPACK
000faa 915f      	POP  R21
000fab 9508      	RET
                 
                 __MULF127:
000fac 0d10      	ADD  R17,R0
000fad 1d21      	ADC  R18,R1
000fae 1f39      	ADC  R19,R25
000faf c002      	RJMP __MULF128
                 __MULF126:
000fb0 0d20      	ADD  R18,R0
000fb1 1d31      	ADC  R19,R1
                 __MULF128:
000fb2 1f49      	ADC  R20,R25
000fb3 1f59      	ADC  R21,R25
000fb4 9508      	RET
                 
                 __DIVF21:
000fb5 935f      	PUSH R21
000fb6 dee1      	RCALL __UNPACK
000fb7 3870      	CPI  R23,0x80
000fb8 f421      	BRNE __DIVF210
000fb9 2011      	TST  R1
                 __DIVF211:
000fba f40a      	BRPL __DIVF219
000fbb cf9f      	RJMP __MINRES
                 __DIVF219:
000fbc cfa4      	RJMP __MAXRES
                 __DIVF210:
000fbd 3890      	CPI  R25,0x80
000fbe f409      	BRNE __DIVF218
                 __DIVF217:
000fbf cf95      	RJMP __ZERORES
                 __DIVF218:
000fc0 2401      	EOR  R0,R1
000fc1 9408      	SEC
000fc2 0b97      	SBC  R25,R23
000fc3 f41b      	BRVC __DIVF216
000fc4 f3d4      	BRLT __DIVF217
000fc5 2000      	TST  R0
000fc6 cff3      	RJMP __DIVF211
                 __DIVF216:
000fc7 2f79      	MOV  R23,R25
000fc8 931f      	PUSH R17
000fc9 932f      	PUSH R18
000fca 933f      	PUSH R19
000fcb 934f      	PUSH R20
000fcc 2411      	CLR  R1
000fcd 2711      	CLR  R17
000fce 2722      	CLR  R18
000fcf 2733      	CLR  R19
000fd0 2744      	CLR  R20
000fd1 2755      	CLR  R21
000fd2 e290      	LDI  R25,32
                 __DIVF212:
000fd3 17ae      	CP   R26,R30
000fd4 07bf      	CPC  R27,R31
000fd5 0786      	CPC  R24,R22
000fd6 0741      	CPC  R20,R17
000fd7 f030      	BRLO __DIVF213
000fd8 1bae      	SUB  R26,R30
000fd9 0bbf      	SBC  R27,R31
000fda 0b86      	SBC  R24,R22
000fdb 0b41      	SBC  R20,R17
000fdc 9408      	SEC
000fdd c001      	RJMP __DIVF214
                 __DIVF213:
000fde 9488      	CLC
                 __DIVF214:
000fdf 1f55      	ROL  R21
000fe0 1f22      	ROL  R18
000fe1 1f33      	ROL  R19
000fe2 1c11      	ROL  R1
000fe3 1faa      	ROL  R26
000fe4 1fbb      	ROL  R27
000fe5 1f88      	ROL  R24
000fe6 1f44      	ROL  R20
000fe7 959a      	DEC  R25
000fe8 f751      	BRNE __DIVF212
000fe9 01f9      	MOVW R30,R18
000fea 2d61      	MOV  R22,R1
000feb 914f      	POP  R20
000fec 913f      	POP  R19
000fed 912f      	POP  R18
000fee 911f      	POP  R17
000fef 2366      	TST  R22
000ff0 f032      	BRMI __DIVF215
000ff1 0f55      	LSL  R21
000ff2 1fee      	ROL  R30
000ff3 1fff      	ROL  R31
000ff4 1f66      	ROL  R22
000ff5 957a      	DEC  R23
000ff6 f243      	BRVS __DIVF217
                 __DIVF215:
000ff7 de84      	RCALL __ROUND_REPACK
000ff8 915f      	POP  R21
000ff9 9508      	RET
                 
                 __CMPF12:
000ffa 2399      	TST  R25
000ffb f09a      	BRMI __CMPF120
000ffc 2377      	TST  R23
000ffd f042      	BRMI __CMPF121
000ffe 1797      	CP   R25,R23
000fff f048      	BRLO __CMPF122
001000 f429      	BRNE __CMPF121
001001 17ae      	CP   R26,R30
001002 07bf      	CPC  R27,R31
001003 0786      	CPC  R24,R22
001004 f020      	BRLO __CMPF122
001005 f031      	BREQ __CMPF123
                 __CMPF121:
001006 9498      	CLZ
001007 9488      	CLC
001008 9508      	RET
                 __CMPF122:
001009 9498      	CLZ
00100a 9408      	SEC
00100b 9508      	RET
                 __CMPF123:
00100c 9418      	SEZ
00100d 9488      	CLC
00100e 9508      	RET
                 __CMPF120:
00100f 2377      	TST  R23
001010 f7c2      	BRPL __CMPF122
001011 1797      	CP   R25,R23
001012 f398      	BRLO __CMPF121
001013 f7a9      	BRNE __CMPF122
001014 17ea      	CP   R30,R26
001015 07fb      	CPC  R31,R27
001016 0768      	CPC  R22,R24
001017 f388      	BRLO __CMPF122
001018 f399      	BREQ __CMPF123
001019 cfec      	RJMP __CMPF121
                 
                 __ADDD12:
00101a 0fea      	ADD  R30,R26
00101b 1ffb      	ADC  R31,R27
00101c 1f68      	ADC  R22,R24
00101d 1f79      	ADC  R23,R25
00101e 9508      	RET
                 
                 __ANEGD1:
00101f 95f0      	COM  R31
001020 9560      	COM  R22
001021 9570      	COM  R23
001022 95e1      	NEG  R30
001023 4fff      	SBCI R31,-1
001024 4f6f      	SBCI R22,-1
001025 4f7f      	SBCI R23,-1
001026 9508      	RET
                 
                 __ASRD12:
001027 23ee      	TST  R30
001028 2e0e      	MOV  R0,R30
001029 01fd      	MOVW R30,R26
00102a 01bc      	MOVW R22,R24
00102b f031      	BREQ __ASRD12R
                 __ASRD12L:
00102c 9575      	ASR  R23
00102d 9567      	ROR  R22
00102e 95f7      	ROR  R31
00102f 95e7      	ROR  R30
001030 940a      	DEC  R0
001031 f7d1      	BRNE __ASRD12L
                 __ASRD12R:
001032 9508      	RET
                 
                 __LSLW2:
001033 0fee      	LSL  R30
001034 1fff      	ROL  R31
001035 0fee      	LSL  R30
001036 1fff      	ROL  R31
001037 9508      	RET
                 
                 __ASRW8:
001038 2fef      	MOV  R30,R31
001039 27ff      	CLR  R31
00103a fde7      	SBRC R30,7
00103b efff      	SER  R31
00103c 9508      	RET
                 
                 __CWD1:
00103d 2f6f      	MOV  R22,R31
00103e 0f66      	ADD  R22,R22
00103f 0b66      	SBC  R22,R22
001040 2f76      	MOV  R23,R22
001041 9508      	RET
                 
                 __EQB12:
001042 17ea      	CP   R30,R26
001043 e0e1      	LDI  R30,1
001044 f009      	BREQ __EQB12T
001045 27ee      	CLR  R30
                 __EQB12T:
001046 9508      	RET
                 
                 __LTB12U:
001047 17ae      	CP   R26,R30
001048 e0e1      	LDI  R30,1
001049 f008      	BRLO __LTB12U1
00104a 27ee      	CLR  R30
                 __LTB12U1:
00104b 9508      	RET
                 
                 __GTB12U:
00104c 17ea      	CP   R30,R26
00104d e0e1      	LDI  R30,1
00104e f008      	BRLO __GTB12U1
00104f 27ee      	CLR  R30
                 __GTB12U1:
001050 9508      	RET
                 
                 __LEW12:
001051 17ea      	CP   R30,R26
001052 07fb      	CPC  R31,R27
001053 e0e1      	LDI  R30,1
001054 f40c      	BRGE __LEW12T
001055 27ee      	CLR  R30
                 __LEW12T:
001056 9508      	RET
                 
                 __LEW12U:
001057 17ea      	CP   R30,R26
001058 07fb      	CPC  R31,R27
001059 e0e1      	LDI  R30,1
00105a f408      	BRSH __LEW12UT
00105b 27ee      	CLR  R30
                 __LEW12UT:
00105c 9508      	RET
                 
                 __GETD1P:
00105d 91ed      	LD   R30,X+
00105e 91fd      	LD   R31,X+
00105f 916d      	LD   R22,X+
001060 917c      	LD   R23,X
001061 9713      	SBIW R26,3
001062 9508      	RET
                 
                 __PUTDP1:
001063 93ed      	ST   X+,R30
001064 93fd      	ST   X+,R31
001065 936d      	ST   X+,R22
001066 937c      	ST   X,R23
001067 9508      	RET
                 
                 __GETW2PF:
001068 91a5      	LPM  R26,Z+
001069 91b4      	LPM  R27,Z
00106a 9508      	RET
                 
                 __CDF2U:
00106b 9468      	SET
00106c c001      	RJMP __CDF2U0
                 __CDF2:
00106d 94e8      	CLT
                 __CDF2U0:
00106e d001      	RCALL __SWAPD12
00106f de73      	RCALL __CDF1U0
                 
                 __SWAPD12:
001070 2e18      	MOV  R1,R24
001071 2f86      	MOV  R24,R22
001072 2d61      	MOV  R22,R1
001073 2e19      	MOV  R1,R25
001074 2f97      	MOV  R25,R23
001075 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001076 2e1b      	MOV  R1,R27
001077 2fbf      	MOV  R27,R31
001078 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001079 2e1a      	MOV  R1,R26
00107a 2fae      	MOV  R26,R30
00107b 2de1      	MOV  R30,R1
00107c 9508      	RET
                 
                 __EEPROMRDD:
00107d 9612      	ADIW R26,2
00107e d002      	RCALL __EEPROMRDW
00107f 01bf      	MOVW R22,R30
001080 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001081 9611      	ADIW R26,1
001082 d002      	RCALL __EEPROMRDB
001083 2ffe      	MOV  R31,R30
001084 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001085 99f9      	SBIC EECR,EEWE
001086 cffe      	RJMP __EEPROMRDB
001087 93ff      	PUSH R31
001088 b7ff      	IN   R31,SREG
001089 94f8      	CLI
00108a bda1      	OUT  EEARL,R26
00108b bdb2      	OUT  EEARH,R27
00108c 9af8      	SBI  EECR,EERE
00108d b5e0      	IN   R30,EEDR
00108e bfff      	OUT  SREG,R31
00108f 91ff      	POP  R31
001090 9508      	RET
                 
                 __EEPROMWRD:
001091 d007      	RCALL __EEPROMWRW
001092 9612      	ADIW R26,2
001093 010f      	MOVW R0,R30
001094 01fb      	MOVW R30,R22
001095 d003      	RCALL __EEPROMWRW
001096 01f0      	MOVW R30,R0
001097 9712      	SBIW R26,2
001098 9508      	RET
                 
                 __EEPROMWRW:
001099 d007      	RCALL __EEPROMWRB
00109a 9611      	ADIW R26,1
00109b 93ef      	PUSH R30
00109c 2fef      	MOV  R30,R31
00109d d003      	RCALL __EEPROMWRB
00109e 91ef      	POP  R30
00109f 9711      	SBIW R26,1
0010a0 9508      	RET
                 
                 __EEPROMWRB:
0010a1 9bf9      	SBIS EECR,EEWE
0010a2 c002      	RJMP __EEPROMWRB1
0010a3 95a8      	WDR
0010a4 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0010a5 b79f      	IN   R25,SREG
0010a6 94f8      	CLI
0010a7 bda1      	OUT  EEARL,R26
0010a8 bdb2      	OUT  EEARH,R27
0010a9 9af8      	SBI  EECR,EERE
0010aa b580      	IN   R24,EEDR
0010ab 17e8      	CP   R30,R24
0010ac f019      	BREQ __EEPROMWRB0
0010ad bde0      	OUT  EEDR,R30
0010ae 9afa      	SBI  EECR,EEMWE
0010af 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0010b0 bf9f      	OUT  SREG,R25
0010b1 9508      	RET
                 
                 __CPD02:
0010b2 2400      	CLR  R0
0010b3 160a      	CP   R0,R26
0010b4 060b      	CPC  R0,R27
0010b5 0608      	CPC  R0,R24
0010b6 0609      	CPC  R0,R25
0010b7 9508      	RET
                 
                 __SAVELOCR6:
0010b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0010b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0010ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0010bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0010bc 931a      	ST   -Y,R17
0010bd 930a      	ST   -Y,R16
0010be 9508      	RET
                 
                 __LOADLOCR6:
0010bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0010c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0010c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0010c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0010c3 8119      	LDD  R17,Y+1
0010c4 8108      	LD   R16,Y
0010c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168P register use summary:
r0 :  84 r1 :  31 r2 :   0 r3 :   0 r4 :   0 r5 :   6 r6 :   6 r7 :   5 
r8 :   5 r9 :   0 r10:  15 r11:   2 r12:   2 r13:   4 r14:   4 r15:   0 
r16:  90 r17: 153 r18:  38 r19:  48 r20:  29 r21:  78 r22: 153 r23: 115 
r24:  73 r25:  63 r26: 355 r27: 202 r28:  21 r29:   1 r30:1019 r31: 445 
x  :  27 y  : 321 z  :  75 
Registers used: 30 out of 35 (85.7%)

ATmega168P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  69 add   :  57 
adiw  :  30 and   :   8 andi  :  10 asr   :   1 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   1 break :   0 breq  :  32 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  20 
brlt  :   4 brmi  :   9 brne  :  55 brpl  :   8 brsh  :  15 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 143 
cbi   :  20 cbr   :   1 clc   :   3 clh   :   0 cli   :   8 cln   :   0 
clr   :  54 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  29 cpc   :  38 cpi   :  72 cpse  :   0 dec   :  12 des   :   0 
eor   :  32 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   0 
in    :  16 inc   :   2 jmp   :  35 ld    :  78 ldd   : 147 ldi   : 524 
lds   : 111 lpm   :  39 lsl   :  22 lsr   :   2 mov   : 187 movw  : 113 
mul   :  17 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   5 out   :  40 pop   :  32 push  :  31 rcall :  42 ret   :  54 
reti  :   6 rjmp  :  75 rol   :  35 ror   :  15 sbc   :  17 sbci  :  95 
sbi   :  26 sbic  :   1 sbis  :   5 sbiw  :  16 sbr   :   0 sbrc  :   1 
sbrs  :   1 sec   :   4 seh   :   0 sei   :   6 sen   :   0 ser   :   9 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  90 std   :  84 sts   : 148 sub   :  14 subi  : 137 swap  :   0 
tst   :  19 wdr   :   7 
Instructions used: 81 out of 116 (69.8%)

ATmega168P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00218c   7018   1476   8494   16384  51.8%
[.dseg] 0x000100 0x0002e2      0    226    226    1279  17.7%
[.eseg] 0x000000 0x00014a      0    330    330     512  64.5%

Assembly complete, 0 errors, 16 warnings
