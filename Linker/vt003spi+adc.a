;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 29.07.2010
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega168P
;Program type        : Application
;Clock frequency     : 1 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;//#include <mega168.h>
;
;#include <delay.h>
;
;//#include <stdio.h>
;
;#include <data_arrays.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//#include <stdlib.h>
;#include <math.h>
;//#include <data_arrays.c>
;
;
;char rxEnable=0, txEnable=1;
;
;
;
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;//#define disable_uart UCSR0B=0xc0
;//#define enable_uart UCSR0B=0xd8
;//#define disable_uart UCSR0B=0x00
;//#define enable_uart UCSR0B=0x18
;//#define enable_transmit UCSR0B=0x08
;//#define enable_recieve UCSR0B=0x10
;#define alarm3_75mA 0x3c00
;#define alarm22mA 0x6000
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define RxEn UCSR0B=(UCSR0B&0xc0)|0x10
;#define TxEn UCSR0B=(UCSR0B&0xc0)|0x08
;#define Transmit PORTD.3=0//=PORTD&0xf7
;#define Recieve PORTD.3=1//PORTD|0x08
;#define wait_startOCD EICRA=0x03
;#define wait_stopOCD EICRA=0x00
;#define disable_uart UCSR0B=0xc0
;#define disable_eints {EIMSK=0x00;EIFR=0x00;}
;#define enable_eints {EIMSK=0x01;EIFR=0x01;}
;//#define enable_led PORTD=PORTD|0x40
;//#define disable_led PORTD=PORTD&0xbf
;#define start_wait_Rx_timer {TIMSK0=0x01;TCCR0A=0x00;TCCR0B=0x04;TCNT0=0xA0;}
;#define stop_wait_Rx_timer {TIMSK0=0x00;TCCR0A=0x00;TCCR0B=0x00;TCNT0=0x00;}
;#define disable_SPI {SPCR=0x12;}
;#define enable_SPI {SPCR=0x52;}
;#define DAC_max_val 0xffc0
;#define mamps_toDAC_default_ratio 0.00024437928
;#define setlevel_0_10 {PORTD.7=0;PORTD.6=0;}
;#define setlevel_0_20 {PORTD.7=0;PORTD.6=1;}
;#define setlevel_0_30 {PORTD.7=1;PORTD.6=0;}
;#define setlevel_0_50 {PORTD.7=1;PORTD.6=1;}
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 64
;
;//eeprom unsigned int ADC_PV_calibration_point1_10;
;//eeprom unsigned int buf;
;//eeprom unsigned int ADC_PV_calibration_point2_10;
;//eeprom unsigned int ADC_PV_calibration_point1_20;
;//eeprom unsigned int ADC_PV_calibration_point2_20;
;//eeprom unsigned int ADC_PV_calibration_point1_30;
;//eeprom unsigned int ADC_PV_calibration_point2_30;
;//eeprom unsigned int ADC_PV_calibration_point1_50;
;//eeprom unsigned int ADC_PV_calibration_point2_50;
;float DAC_to_current_ratio=1;

	.DSEG
;unsigned int calibration_point1;
;unsigned int calibration_point2;
;eeprom unsigned int ADC_PV_calibration_point1[4];
;eeprom unsigned int ADC_PV_calibration_point2[4];
;eeprom char rangeIndexEep;
;eeprom char CalibrationConfigChanged;
;eeprom float calibrationKeep[4];
;eeprom float calibrationBeep[4];
;eeprom int crceep = 0x0000;
;eeprom const int crcstatic = 0x105D;
;eeprom char tmpEepPriValCode = 0x6d;
;//eeprom unsigned int serial_address=0x0000;
;//flash const unsigned long *serial @0x00100;
;char rangeIndex;
;float calibrationK;
;float calibrationB;
;unsigned int tmp_calibration, crc;
;unsigned int ADC_PV_zero_val=0x0001;
;char rx_buffer0[RX_BUFFER_SIZE0];
;char string_tmp[4];
;//char *str[4];
;char com_data_rx[25];
;float dynamic_variables[3];         //0 - скорость, 1 - ток, 2 - %диапазона
;char dataToSave,sensor_address=0x02,com_bytes_rx=0,update_args_flag=0,p_bank_addr=0;
;void transmit_HART(void); int check_recieved_message(); int generate_command_data_array_answer(char command_recieved);
;void update_eeprom_parameters(char update_flag);
;void start_transmit(int transmit_param); void clear_buffer();
;void CalculateCalibrationRates();
;void ResetDeviceSettings(char notreset);
;void  CRC_update(unsigned char d);
;void PerformDeviceApplicationErase();
;void (*voidFuncPtr)(void);
;int read_program_memory (int adr);
;#if RX_BUFFER_SIZE0<256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0,echo;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0,SPI_data;
;#endif
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0,printflag=0,RxTx=0,new_data=0,message_recieved=0,answering=0,burst_mode=0;
;flash  int crctable[256]= {
;        0x0000, 0xC1C0, 0x81C1, 0x4001, 0x01C3, 0xC003, 0x8002, 0x41C2, 0x01C6, 0xC006,
;        0x8007, 0x41C7, 0x0005, 0xC1C5, 0x81C4, 0x4004, 0x01CC, 0xC00C, 0x800D, 0x41CD,
;        0x000F, 0xC1CF, 0x81CE, 0x400E, 0x000A, 0xC1CA, 0x81CB, 0x400B, 0x01C9, 0xC009,
;        0x8008, 0x41C8, 0x01D8, 0xC018, 0x8019, 0x41D9, 0x001B, 0xC1DB, 0x81DA, 0x401A,
;        0x001E, 0xC1DE, 0x81DF, 0x401F, 0x01DD, 0xC01D, 0x801C, 0x41DC, 0x0014, 0xC1D4,
;        0x81D5, 0x4015, 0x01D7, 0xC017, 0x8016, 0x41D6, 0x01D2, 0xC012, 0x8013, 0x41D3,
;        0x0011, 0xC1D1, 0x81D0, 0x4010, 0x01F0, 0xC030, 0x8031, 0x41F1, 0x0033, 0xC1F3,
;        0x81F2, 0x4032, 0x0036, 0xC1F6, 0x81F7, 0x4037, 0x01F5, 0xC035, 0x8034, 0x41F4,
;        0x003C, 0xC1FC, 0x81FD, 0x403D, 0x01FF, 0xC03F, 0x803E, 0x41FE, 0x01FA, 0xC03A,
;        0x803B, 0x41FB, 0x0039, 0xC1F9, 0x81F8, 0x4038, 0x0028, 0xC1E8, 0x81E9, 0x4029,
;        0x01EB, 0xC02B, 0x802A, 0x41EA, 0x01EE, 0xC02E, 0x802F, 0x41EF, 0x002D, 0xC1ED,
;        0x81EC, 0x402C, 0x01E4, 0xC024, 0x8025, 0x41E5, 0x0027, 0xC1E7, 0x81E6, 0x4026,
;        0x0022, 0xC1E2, 0x81E3, 0x4023, 0x01E1, 0xC021, 0x8020, 0x41E0, 0x01A0, 0xC060,
;        0x8061, 0x41A1, 0x0063, 0xC1A3, 0x81A2, 0x4062, 0x0066, 0xC1A6, 0x81A7, 0x4067,
;        0x01A5, 0xC065, 0x8064, 0x41A4, 0x006C, 0xC1AC, 0x81AD, 0x406D, 0x01AF, 0xC06F,
;        0x806E, 0x41AE, 0x01AA, 0xC06A, 0x806B, 0x41AB, 0x0069, 0xC1A9, 0x81A8, 0x4068,
;        0x0078, 0xC1B8, 0x81B9, 0x4079, 0x01BB, 0xC07B, 0x807A, 0x41BA, 0x01BE, 0xC07E,
;        0x807F, 0x41BF, 0x007D, 0xC1BD, 0x81BC, 0x407C, 0x01B4, 0xC074, 0x8075, 0x41B5,
;        0x0077, 0xC1B7, 0x81B6, 0x4076, 0x0072, 0xC1B2, 0x81B3, 0x4073, 0x01B1, 0xC071,
;        0x8070, 0x41B0, 0x0050, 0xC190, 0x8191, 0x4051, 0x0193, 0xC053, 0x8052, 0x4192,
;        0x0196, 0xC056, 0x8057, 0x4197, 0x0055, 0xC195, 0x8194, 0x4054, 0x019C, 0xC05C,
;	0x805D, 0x419D, 0x005F, 0xC19F, 0x819E, 0x405E, 0x005A, 0xC19A, 0x819B, 0x405B,
;	0x0199, 0xC059, 0x8058, 0x4198, 0x0188, 0xC048, 0x8049, 0x4189, 0x004B, 0xC18B,
;	0x818A, 0x404A, 0x004E, 0xC18E, 0x818F, 0x404F, 0x018D, 0xC04D, 0x804C, 0x418C,
;	0x0044, 0xC184, 0x8185, 0x4045, 0x0187, 0xC047, 0x8046, 0x4186, 0x0182, 0xC042,
;	0x8043, 0x4183, 0x0041, 0xC181, 0x8180, 0x4040};
;long  adc_data, DAC_data, SPI_tData ;
;char SPI_tEnd=1,checking_result=0,preambula_bytes=5,preambula_bytes_rec=0,bytes_quantity_ans=0,bytes_quantity_q=0,data_q=0, command_rx_val=0;
;// USART Receiver interrupt service routine
;char Command_data[25];
;
;int read_program_memory (int adr)
; 0000 00A9 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 00AA        #asm
;	adr -> Y+0
;PCODE: $0000000F VOL: 0
; 0000 00AB        LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
       LPM R22,Z+;//     загрузка в регистр R23 содержимого флеш по адресу Z с постинкрементом (мл. байт)
;PCODE: $00000010 VOL: 0
; 0000 00AC        LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
       LPM R23,Z; //     загрузка в регистр R22 содержимого Flash  по адресу Z+1 (старший байт)
;PCODE: $00000011 VOL: 0
; 0000 00AD        MOV R30, R22;
       MOV R30, R22;
;PCODE: $00000012 VOL: 0
; 0000 00AE        MOV R31, R23;
       MOV R31, R23;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 00AF        #endasm
; 0000 00B0 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;void  CRC_update(unsigned char d)
; 0000 00B2 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 00B3   //unsigned char uindex;
; 0000 00B4   //uindex = CRCHigh^d;
; 0000 00B5   //CRCHigh=CRCLow^((int)crctable[uindex]>>8);
; 0000 00B6   //CRCLow=crctable[uindex];
; 0000 00B7   //crc = CRCHigh;
; 0000 00B8   //crc = ((int)crc)<<8+CRCLow;
; 0000 00B9   crc = crctable[((crc>>8)^d)&0xFF] ^ (crc<<8);
;	d -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 00BA }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)     //таймер, который ждет необходимое число циклов, соответствующее появлению сигнала на детекторе несущей
; 0000 00BD {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00BE enable_eints;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 00BF wait_stopOCD;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00C0 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;// Declare your global variables here
;interrupt [USART_RXC] void usart_rx_isr(void)//прием по USART
; 0000 00C4 {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00C5 
; 0000 00C6 char status,data;
; 0000 00C7 #asm("cli")
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000003C VOL: 0
	cli
;PCODE: $0000003D VOL: 0
; 0000 00C8 status=UCSR0A;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00C9 
; 0000 00CA data=UDR0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00CB //#asm("sei")
; 0000 00CC if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)//если нет ошибок, то читаем данные в буфере USART
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00CD    {
; 0000 00CE    rx_buffer0[rx_wr_index0]=data;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00CF    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00D0    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00D1       {
; 0000 00D2       rx_counter0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00D3       rx_buffer_overflow0=1;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00D4 
; 0000 00D5      };
;PCODE: $0000005A VOL: 0
; 0000 00D6    };
;PCODE: $0000005B VOL: 0
; 0000 00D7  #asm("sei")
;PCODE: $0000005C VOL: 0
	sei
;PCODE: $0000005D VOL: 0
; 0000 00D8 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void) //не используется
; 0000 00DF {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00E0 char data;
; 0000 00E1 while (rx_counter0==0);
;PCODE: $00000064 VOL: 0
;	data -> R17
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00E2 data=rx_buffer0[rx_rd_index0];
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00E3 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00E4 #asm("cli")
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
	cli
;PCODE: $00000078 VOL: 0
; 0000 00E5 --rx_counter0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00E6 #asm("sei")
;PCODE: $0000007C VOL: 0
	sei
;PCODE: $0000007D VOL: 0
; 0000 00E7 return data;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00E8 }
;PCODE: $00000081 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 64
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0<256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)//передача по USART соответственно
; 0000 00F8 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00F9 #asm("cli")
;PCODE: $00000084 VOL: 0
	cli
;PCODE: $00000085 VOL: 0
; 0000 00FA if (tx_counter0)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00FB    {
; 0000 00FC    --tx_counter0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00FD 
; 0000 00FE    UDR0=tx_buffer0[tx_rd_index0];
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00FF 
; 0000 0100    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0101    };
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0102    #asm("sei")
;PCODE: $0000009A VOL: 0
	sei
;PCODE: $0000009B VOL: 0
; 0000 0103 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)                                       //не используется
; 0000 010A {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 010B //while (tx_counter0 == TX_BUFFER_SIZE0);
; 0000 010C //#asm("cli")
; 0000 010D //if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
; 0000 010E //   {
; 0000 010F //   tx_buffer0[tx_wr_index0]=c;
; 0000 0110 //   if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
; 0000 0111 //   ++tx_counter0;
; 0000 0112 //   }
; 0000 0113 //else
; 0000 0114 while ((UCSR0A & DATA_REGISTER_EMPTY)==0)
;	c -> Y+0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0115    UDR0=c;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0117 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)//первоначально прерывание работает по нарастающему уровню (set_rising_edge_int), а затем ловим низкий (set_falling_edge_int), это устанавливаем уже в таймере, с последующим запуском нашего любимого таймера.1-прием, 0- передача.
; 0000 011C //изменено, таймер, отсчитывающий задержку, сейчас не активен, пользуемся только OCD ногой модема
; 0000 011D {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 011E //RxTx=!RxTx;//RxTx=0 =>no recieve ||RxTx=1 => recieve||
; 0000 011F //if(RxTx)Recieve;
; 0000 0120 if(EICRA==0x03)                    //если сработало прерывание по верхнему уровню, то переключаемся на отлов нижнего уровня и наоборот
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0121                 {
; 0000 0122                 Recieve;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0123                 RxEn;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0124                 //wait_stopOCD;
; 0000 0125                 //start_wait_Rx_timer;
; 0000 0126                 //disable_eints;
; 0000 0127                 wait_stopOCD;           //EICRA=0x00
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0128                 message_recieved=0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0129                 //mono_channel_mode;
; 0000 012A                 }
; 0000 012B else
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 012C                 {
; 0000 012D                 //Transmit;
; 0000 012E 
; 0000 012F                 //stop_wait_Rx_timer;
; 0000 0130                 wait_startOCD;            //EICRA=0x03
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0131                 disable_uart;             //отключаем USART, переходим в режим приема
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0132                 message_recieved=1;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0133 
; 0000 0134                 }
;PCODE: $000000C3 VOL: 0
; 0000 0135 //start_check_OCD_timer;//стартуем таймер отсчитывающий задержку 3.33 мс (4 цикла при минимальной частоте 1200Гц)
; 0000 0136 
; 0000 0137 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;
;
;#pragma used-
;#endif
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)//прерывания ацп по завершению преобразования
; 0000 013E {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 013F //#asm("cli")
; 0000 0140 delay_us(10);
;PCODE: $000000C9 VOL: 0
; 0000 0141 adc_data=ADCW;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0142 printflag=1;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0143 ADMUX=0x20;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0144 ADCSRA=0x4f;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0145 //#asm("sei")
; 0000 0146 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;
;
;// SPI interrupt service routine
;interrupt [SPI_STC] void spi_isr(void)       //прерывание по SPI, в случае, если один фрейм SPI отправлен, оно срабатывает
; 0000 014B {                                              // в случае необходимости, либо продлевает фрейм, либо финализирует
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 014C 
; 0000 014D //#asm
; 0000 014E   //  in   r30,spsr
; 0000 014F   //  in   r30,spdr
; 0000 0150 //#endasm
; 0000 0151 //data=SPDR;
; 0000 0152 //SPCR=0xD0;
; 0000 0153 //SPSR=0x00;
; 0000 0154 // Place your code here
; 0000 0155 if(SPI_tEnd==0){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0156 SPDR=0xff;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0157 SPI_tEnd=1;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0158 }
; 0000 0159 else PORTB.2=0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 015A ADCSRA=0xcf;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 015B 
; 0000 015C }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;void transmit_SPI(unsigned int SPI_data,char SPI_mode){//4 режима работы: 2-норма, 0-авария 3.75мА, 1-авария 22мА, 3-моноканал
; 0000 015E void transmit_SPI(unsigned int SPI_data,char SPI_mode){
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 015F //#asm ("cli")                                          //прерывания мы здесь не используем, потому как с ними получается какой-то гемор
; 0000 0160 delay_us(10);
;	SPI_data -> Y+1
;	SPI_mode -> Y+0
;PCODE: $000000EB VOL: 0
; 0000 0161 PORTB.2=0;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0162 if(SPI_mode<2)
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0163 {
; 0000 0164 SPDR=SPI_mode;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0165 if(SPI_mode==0)SPI_data=alarm3_75mA;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0166 else SPI_data=alarm22mA;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0167 while(SPSR<0x80){;}
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0168 }
; 0000 0169 if(SPI_mode==3){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 016A SPI_data=0;}
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 016B if(SPI_mode==2)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 016C {
; 0000 016D SPDR=(long)(DAC_data>>16);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 016E while(SPSR<0x80){;}
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 016F }
; 0000 0170 SPDR=SPI_data>>8;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0171 PORTB.2=0;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0172 while(SPSR<0x80){;}
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0173 SPDR=SPI_data;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0174 while(SPSR<0x80){;}
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0175 //#asm ("sei")
; 0000 0176 }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;
;void transmit_HART(void)//подпрограмма передачи в по HART
; 0000 017A {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 017B int error_log;
; 0000 017C error_log=check_recieved_message();    //здесь проверяем корректность принятого сообщения и устанавливаем значение переменной "результат проверки"
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;	error_log -> R16,R17
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 017D if(answering)                         //если нужен ответ
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 017E         {
; 0000 017F         if (!error_log)               //ошибок нет
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0180                 {
; 0000 0181                 checking_result=0;                //сбрасываем "результат проверки"
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0182                 rx_wr_index0=0;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0183                 rx_buffer_overflow0=0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0184                 error_log=error_log|(generate_command_data_array_answer(command_rx_val));//здесь обращаемся в генератор массивов ответов по HART
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0185                 start_transmit(error_log);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0186                 }
; 0000 0187         else
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0188                 { //соответственно, если ошибки есть
; 0000 0189                 //PORTD=0x08;
; 0000 018A                 Recieve;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 018B                 rx_buffer_overflow0=0;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 018C                 checking_result=0;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 018D                 rx_wr_index0=0;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 018E                 message_recieved=0;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 018F                 start_transmit(error_log);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0190                 }
;PCODE: $00000154 VOL: 0
; 0000 0191         }
; 0000 0192 else                              //ответ по HART не нужен
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0193         {
; 0000 0194         rx_buffer_overflow0=0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0195         checking_result=0;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0196         rx_wr_index0=0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0197         RxEn;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0198         Recieve;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0199         }
;PCODE: $00000163 VOL: 0
; 0000 019A clear_buffer();
;PCODE: $00000164 VOL: 0
; 0000 019B }
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;
;void start_transmit(int transmit_param)
; 0000 019E {
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 019F char i=0,j=0;
; 0000 01A0 char check_sum_tx=0;
; 0000 01A1 while(UCSR0A<0x20){;}
;PCODE: $0000016A VOL: 0
;	transmit_param -> Y+4
;	i -> R17
;	j -> R16
;	check_sum_tx -> R19
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 01A2 //if(!RxTx){
; 0000 01A3 preambula_bytes=Parameter_bank[3];
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 01A4 delay_ms(25);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 01A5 Transmit;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01A6 TxEn;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 01A7 delay_ms(15);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 01A8 for (i=0;i<preambula_bytes;i++)
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01A9         {
; 0000 01AA         tx_buffer0[i]=0xff;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 01AB         tx_counter0++;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 01AC         }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 01AD //i++;
; 0000 01AE if(burst_mode)tx_buffer0[i]=0x01;//стартовый байт
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 01AF else tx_buffer0[i]=0x06;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 01B0 check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 01B1 i++;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 01B2 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//адрес
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 01B3 check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 01B4 i++;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 01B5 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i];//команда
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 01B6 check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 01B7 i++;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 01B8 if(!transmit_param)
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 01B9         {
; 0000 01BA         tx_buffer0[i]=bytes_quantity_ans+2;                                                  //число байт  //нужно создать массив с количеством байт для конкретной команды
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 01BB         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 01BC         i++;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 01BD         tx_buffer0[i]=p_bank_addr;                                             //статус 1й байт
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 01BE         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 01BF         i++;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 01C0         tx_buffer0[i]=0x00;                                             //статус 2й байт
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 01C1         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 01C2         i++;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 01C3         for(j=0;j<bytes_quantity_ans;j++)
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 01C4                 {
; 0000 01C5                 tx_buffer0[i]=Command_data[j];                                                //данные //здесь нужно создать массив с данными для конкретной команды и перегружать его по запросу в буфер отправки
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 01C6                 check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01C7                 i++;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 01C8                 }
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01C9         }
; 0000 01CA else {
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01CB         tx_buffer0[i]=com_bytes_rx+2;       //здесь просто берем количество байт из принятого сообщения                                           //число байт  //нужно создать массив с количеством байт для конкретной команды
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01CC         //bytes_quantity_ans=rx_buffer0[preambula_bytes_rec-preambula_bytes+i]+2;  //эту величину все же нужно сохранить, дабы юзать в цикле
; 0000 01CD         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 01CE         i++;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 01CF         tx_buffer0[i]=transmit_param>>8;                                       //статус 1й байт
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01D0         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 01D1         i++;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 01D2         tx_buffer0[i]=transmit_param;                                          //статус 2й байт
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01D3         check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01D4         i++;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01D5         j=i;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 01D6         for(i=j;i<com_bytes_rx+j;i++)
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 01D7                 {
; 0000 01D8                 tx_buffer0[i]=rx_buffer0[preambula_bytes_rec-preambula_bytes+i-2];                                                //данные прямо из массива принятых данных
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 01D9                 check_sum_tx=check_sum_tx^tx_buffer0[i];
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01DA                 //i++;
; 0000 01DB                 }
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01DC         }
;PCODE: $00000286 VOL: 0
; 0000 01DD         //i++;
; 0000 01DE tx_buffer0[i]=check_sum_tx;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01DF tx_rd_index0=1;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 01E0 //if(!transmit_param){
; 0000 01E1 //for(i=0;i<=rx_counter0;i++)tx_buffer0[i]=rx_buffer0[i]; }
; 0000 01E2 //tx_rd_index0=1;
; 0000 01E3 tx_counter0=i;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01E4 UDR0=tx_buffer0[0];
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 01E5 while(tx_counter0){;}
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01E6 delay_ms(15);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 01E7 //RxEn;
; 0000 01E8 Recieve;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01E9 message_recieved=0;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01EA rx_counter0=0;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01EB 
; 0000 01EC }
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;
;int generate_command_data_array_answer(char command_recieved)//загружаем из эсппзу сохраненный массив параметров (Parameter_bank) и записываем его в динамический массив команд (Command_data) с помощью связывающего массива (Command_mask)
; 0000 01EF {
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01F0 char i=0,j=0,k=0;
; 0000 01F1 char dynamic_parameter=0, writing_command=0, error=1, parameter_tmp=0,parameter_tmp_length=0,tmp_command_number=0;
; 0000 01F2 union ieeesender      //это объединение создано специально для передачи числа в формате плавающей точки в виде 4х байт
; 0000 01F3         {
; 0000 01F4         float value;
; 0000 01F5         char byte[4];
; 0000 01F6         }floatsend;
; 0000 01F7 //for (i=0;i<4;i++)
; 0000 01F8 //        {
; 0000 01F9 //        str[i]=&string_tmp[i];
; 0000 01FA //        }
; 0000 01FB //        i=0;
; 0000 01FC 
; 0000 01FD for (i=0;i<31;i++)//счетчик № команды
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;	command_recieved -> Y+13
;	i -> R17
;	j -> R16
;	k -> R19
;	dynamic_parameter -> R18
;	writing_command -> R21
;	error -> R20
;	parameter_tmp -> Y+12
;	parameter_tmp_length -> Y+11
;	tmp_command_number -> Y+10
;	ieeesender -> Y+13
;	floatsend -> Y+6
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01FE                 {
; 0000 01FF                 if(Command_number[0][i]==command_recieved)
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0200                                 {
; 0000 0201                                 error=0;//отсутствие совпадений соответствует ошибке "команда не поддерживается"
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0202                                 tmp_command_number=i;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0203                                 }
; 0000 0204                 }
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0205 if(!error)      {//если ошибок нет, формируем команду
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0206                 writing_command=Command_number[1][tmp_command_number];//команда записи=1
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0207                 dynamic_parameter=Command_number[2][tmp_command_number];//динамический параметр=2
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0208                         if(writing_command)
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0209                                 {
; 0000 020A                                 for(j=0;j<com_bytes_rx+1;j++)
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 020B                                         {
; 0000 020C                                         Command_data[j]=com_data_rx[j];
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 020D                                         //Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];//Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
; 0000 020E                                         }
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 020F                                 update_args_flag=tmp_command_number;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 0210                                 update_eeprom_parameters(tmp_command_number);
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0211                                 j=0;
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0212                                 }
; 0000 0213                         else
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0214                                 {
; 0000 0215                                  //представленный ниже код работает только для команд чтения, нединамических и динамических.
; 0000 0216                                  /* приведенный ниже код работает следующим образом: сперва мы обращаемся к массиву Command_mask
; 0000 0217                                  с помощью которого получаем представление о том, какой параметр соответствует какому байту в команде,
; 0000 0218                                  а также какова его длина в байтах, затем поочередно перезагружаем из массива Parameter_bank данные(которые хранятся в нем последовательно) в
; 0000 0219                                  массив Command_data, используя для этого массив Parameter_mask (в этом массиве каждому элементу поставлен в прямое соответствие номер параметра
; 0000 021A                                 , который мы берем из массива Command_mask, а содержимое каждой ячейки определяет, с какой ячейки начинаются данные соответствующего параметра*/
; 0000 021B                                  parameter_tmp=Command_mask[tmp_command_number][j];
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 021C 
; 0000 021D                                  for(j=0;j<24;j++)
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 021E                                          {
; 0000 021F                                          if(parameter_tmp!=Command_mask[tmp_command_number][j])
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0220                                                      {
; 0000 0221                                                      for(k=(j-parameter_tmp_length);k<j;k++)
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0222                                                                 {
; 0000 0223                                                                 if((parameter_tmp<11)|(parameter_tmp>13))
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0224                                                                         {
; 0000 0225                                                                         Command_data[k]=Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)];
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 0226                                                                         }
; 0000 0227                                                                 else
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 0228                                                                         {
; 0000 0229                                                                          //ttest=(long)dynamic_variables[0];
; 0000 022A                                                                         #asm ("cli")
;PCODE: $00000359 VOL: 0
	cli
;PCODE: $0000035A VOL: 0
; 0000 022B                                                                         floatsend.value=dynamic_variables[parameter_tmp-11];
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 022C                                                                         //test=*str[k-1];
; 0000 022D                                                                         Command_data[k]=floatsend.byte[k+parameter_tmp_length-j]; //(char)(test>>8*(k-1)); //(char)((long)((dynamic_variables[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)-11])<<8*(k+parameter_tmp_length-j)));
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 022E                                                                         #asm("sei")
;PCODE: $00000375 VOL: 0
	sei
;PCODE: $00000376 VOL: 0
; 0000 022F                                                                         }
;PCODE: $00000377 VOL: 0
; 0000 0230                                                                 }
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0231                                                       parameter_tmp_length=0;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 0232                                                      }
; 0000 0233                                          parameter_tmp=Command_mask[tmp_command_number][j];
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 0234                                          parameter_tmp_length++;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0235                                          if(!Command_mask[tmp_command_number][j])j=24;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0236                                          }
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0237                                  bytes_quantity_ans=k;
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 0238                                  k=0;
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 0239                                 }
;PCODE: $000003A4 VOL: 0
; 0000 023A                         }
; 0000 023B 
; 0000 023C return error;
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 023D }
;PCODE: $000003AB VOL: 0
;
;void update_eeprom_parameters(char update_flag)
; 0000 0240 {
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0241 char i=0,j=0,k=0,parameter_tmp=0,parameter_tmp_length=0;
; 0000 0242 parameter_tmp=Command_mask[update_flag][0];
;PCODE: $000003AE VOL: 0
;	update_flag -> Y+6
;	i -> R17
;	j -> R16
;	k -> R19
;	parameter_tmp -> R18
;	parameter_tmp_length -> R21
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0243 
; 0000 0244 for(j=0;j<com_bytes_rx+1;j++)
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0245         {
; 0000 0246                     if(parameter_tmp!=Command_mask[update_flag][j])
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0247                              {
; 0000 0248                              for(k=(j-parameter_tmp_length);k<j;k++)
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0249                                     {
; 0000 024A                                     Parameter_bank[Parameter_mask[parameter_tmp]+(k+parameter_tmp_length-j)]=Command_data[k];
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 024B                                     }
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 024C                                parameter_tmp_length=0;
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 024D                              }
; 0000 024E 
; 0000 024F                     parameter_tmp=Command_mask[update_flag][j];
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0250                     parameter_tmp_length++;
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 0251                     if(!Command_mask[update_flag][j])j=com_bytes_rx+1;
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0252         }
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 0253 }
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;
;
;
;int check_recieved_message(){
; 0000 0257 int check_recieved_message(){
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 0258 char i=0,j=0,k=0,l=0, tmp_i=0;//здесь i - счетчик всех байт j- счетчик байт преамбул
; 0000 0259 
; 0000 025A int check_sum=0;
; 0000 025B checking_result=0;
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;	i -> R17
;	j -> R16
;	k -> R19
;	l -> R18
;	tmp_i -> R21
;	check_sum -> Y+6
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 025C answering=1;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 025D while ((rx_buffer0[j])==0xff)
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 025E         {
; 0000 025F         if(8<j)
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0260                 {checking_result=0x90;//ошибка формирования фрейма, если количество преамбул больше либо равно количеству символов
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0261                  //rx_buffer0[i+1]=0x00;
; 0000 0262                  return checking_result;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0263                  }
; 0000 0264          j++;
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 0265         }
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 0266         preambula_bytes_rec=j;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 0267         i=j;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 0268 if ((rx_buffer0[j])!=0x02)
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0269 //if ((rx_buffer0[i])!=0x02)
; 0000 026A         {
; 0000 026B         checking_result=0x02;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 026C         //return checking_result;
; 0000 026D         }//диагностируем ошибку команд "неверный выбор", если не от главного устройства
; 0000 026E //else    {
; 0000 026F         check_sum=check_sum^rx_buffer0[i];
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0270 //        }
; 0000 0271 i++;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0272 if (((rx_buffer0[i])&0x30)!=0x00)
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0273         {checking_result=0x90;
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 0274         //return checking_result;
; 0000 0275         }
; 0000 0276 //burst_mode=(rx_buffer0[i]&0x40)>>6;                          //burst_mode нужно вообще-то прописывать в команде
; 0000 0277 if((rx_buffer0[i]&0x0f)==Parameter_bank[25])answering=1;       //это проверка адреса, если адрес не тот, датчик молчит
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0278 else answering=0;
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 0279 check_sum=check_sum^rx_buffer0[i];
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 027A i++;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 027B command_rx_val=rx_buffer0[i];// здесь сделаем проверку команды: если она состоит в листе команд, то ошибку не выдаем, если нет => checking_result=0x0600;
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 027C if(command_rx_val==35)
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 027D         {
; 0000 027E //        tmpEepPriValCode = rx_buffer0[i+2];
; 0000 027F //       Parameter_bank[12]= (char)rx_buffer0[i+2];
; 0000 0280         for(l=0;l<4;l++)
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 0281                 {
; 0000 0282                 Parameter_bank[88+l]=rx_buffer0[i+3+l];
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 0283                 Parameter_bank[92+l]=rx_buffer0[i+7+l];
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 0284                 }
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 0285         }
; 0000 0286 //if(command_rx_val==36)for(l=0;l<4;l++)Parameter_bank[88+l]=rx_buffer0[i+2+l];
; 0000 0287 //if(command_rx_val==37)for(l=0;l<4;l++)Parameter_bank[92+l]=rx_buffer0[i+2+l];
; 0000 0288 //if(command_rx_val==38)configuration_changed_flag=0;
; 0000 0289 //if(command_rx_val==40)enter_fixed_current_mode(float(rx_buffer0[i+2])||float(rx_buffer0[i+3]<<8)||float(rx_buffer0[i+4]<<16)||float(rx_buffer0[i+5]<<24));
; 0000 028A //if(command_rx_val==41)perform_device_self_test();
; 0000 028B //if(command_rx_val==42)perform_device_reset();
; 0000 028C if(command_rx_val==38)ResetDeviceSettings(0);
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 028D if(command_rx_val==42)
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 028E                                 {
; 0000 028F                                 if((rx_buffer0[i+2]==0x45)&(rx_buffer0[i+3]==0x52)&(rx_buffer0[i+4]==0x41)&(rx_buffer0[i+5]==0x53)&(rx_buffer0[i+6]==0x45)) //ERASE в ASCII
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 0290                                 PerformDeviceApplicationErase();                                                                                                                                     //удаляем штатную прошвку нафиг, доступно только из хексхартлодера
;PCODE: $000004F1 VOL: 0
; 0000 0291                                 }
;PCODE: $000004F2 VOL: 0
; 0000 0292 if(command_rx_val==43){
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0000 0293                         #asm ("cli")
;PCODE: $000004F7 VOL: 0
	cli
;PCODE: $000004F8 VOL: 0
; 0000 0294                         ADC_PV_calibration_point1[rangeIndex]=adc_data;//ADC_PV_zero_val=adc_data;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 0295                         calibration_point1=adc_data;
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 0296                         CalibrationConfigChanged=1;
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 0297                         #asm ("sei")
;PCODE: $00000505 VOL: 0
	sei
;PCODE: $00000506 VOL: 0
; 0000 0298                         CalculateCalibrationRates();
;PCODE: $00000507 VOL: 0
; 0000 0299                         }
; 0000 029A if(command_rx_val==45)for(l=0;l<4;l++)Parameter_bank[105+l]=rx_buffer0[i+2+l];    //записываем соответствующий току битовый код АЦП
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
; 0000 029B if(command_rx_val==46)for(l=0;l<4;l++)Parameter_bank[109+l]=rx_buffer0[i+2+l];
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 029D if(command_rx_val==111){
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 029E                         #asm ("cli")
;PCODE: $0000054C VOL: 0
	cli
;PCODE: $0000054D VOL: 0
; 0000 029F                         ADC_PV_calibration_point2[rangeIndex]=adc_data;
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
; 0000 02A0                         calibration_point2=adc_data;
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0000 02A1                         CalibrationConfigChanged=1;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
; 0000 02A2                         #asm ("sei")
;PCODE: $0000055A VOL: 0
	sei
;PCODE: $0000055B VOL: 0
; 0000 02A3                         CalculateCalibrationRates();
;PCODE: $0000055C VOL: 0
; 0000 02A4                         }
; 0000 02A5 check_sum=check_sum^rx_buffer0[i];
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 02A6 i++;
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
; 0000 02A7 com_bytes_rx=rx_buffer0[i];                    //количество байт, зная их проверяем число байт данных и если оно не совпадает, диагностируем как раз-таки ошибку формирования фрейма 0х9000
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0000 02A8 check_sum=check_sum^rx_buffer0[i];
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
; 0000 02A9 i++;
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 02AA tmp_i=i;
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 02AB j=tmp_i;
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 02AC for (i=tmp_i;i<tmp_i+com_bytes_rx;i++)
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0000 02AD        {
; 0000 02AE        j++;
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
; 0000 02AF        com_data_rx[k]=rx_buffer0[i];
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 02B0        check_sum=check_sum^rx_buffer0[i];
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
; 0000 02B1        k++;
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 02B2        }
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 02B3                 //j++;
; 0000 02B4 //        if(com_bytes_rx!=0)i--;
; 0000 02B5 if (j!=i)
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 02B6        {checking_result=0x90;
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 02B7        //return checking_result;
; 0000 02B8        }
; 0000 02B9 //i++;
; 0000 02BA if(rx_buffer0[i]!=check_sum)
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 02BB         {
; 0000 02BC         checking_result=0x88;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 02BD         //return checking_result;
; 0000 02BE         }
; 0000 02BF return checking_result;
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 02C0 }
;PCODE: $000005B9 VOL: 0
;
;void clear_buffer()
; 0000 02C3 {
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 02C4 char i=0;
; 0000 02C5 for (i=0;i<RX_BUFFER_SIZE0;i++)
;PCODE: $000005BC VOL: 0
;	i -> R17
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
; 0000 02C6         {
; 0000 02C7         rx_buffer0[i]=0;
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
; 0000 02C8         tx_buffer0[i]=0;
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 02C9         }
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 02CA for (i=0;i<25;i++)
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 02CB         {
; 0000 02CC         com_data_rx[i]=0;
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0000 02CD         Command_data[i]=0;
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 02CE         }
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
; 0000 02CF }
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;// Declare your global variables here
;void system_init_(char initVar){
; 0000 02D1 void system_init_(char initVar){
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
; 0000 02D2 #asm("wdr")
;	initVar -> Y+0
;PCODE: $000005F4 VOL: 0
	wdr
;PCODE: $000005F5 VOL: 0
; 0000 02D3 WDTCSR=0x38;
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
; 0000 02D4 WDTCSR=0x0E;
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
; 0000 02D5 // Crystal Oscillator division factor: 1
; 0000 02D6 /*#pragma optsize-
; 0000 02D7 CLKPR=0x80;
; 0000 02D8 CLKPR=0x00;
; 0000 02D9 #ifdef _OPTIMIZE_SIZE_
; 0000 02DA #pragma optsize+
; 0000 02DB #endif
; 0000 02DC   */
; 0000 02DD // Input/Output Ports initialization
; 0000 02DE // Port B initialization
; 0000 02DF // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 02E0 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
; 0000 02E1 PORTB=0x00;
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
; 0000 02E2 DDRB=0x2c;
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
; 0000 02E3 
; 0000 02E4 // Port C initialization
; 0000 02E5 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 02E6 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 02E7 PORTC=0x00;
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
; 0000 02E8 DDRC=0x00;
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 02E9 
; 0000 02EA // Port D initialization
; 0000 02EB // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 02EC // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 02ED //PORTD=0x00;
; 0000 02EE DDRD.3=1;
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 02EF PORTD.3=1;
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
; 0000 02F0 DDRD.6=1;
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 02F1 DDRD.7=1;
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
; 0000 02F2 PORTD.6=0;
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
; 0000 02F3 PORTD.7=0;
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
; 0000 02F4 // Timer/Counter 0 initialization
; 0000 02F5 // Clock source: System Clock
; 0000 02F6 // Clock value: Timer 0 Stopped
; 0000 02F7 // Mode: Normal top=FFh
; 0000 02F8 // OC0A output: Disconnected
; 0000 02F9 // OC0B output: Disconnected
; 0000 02FA //TCCR0A=0x00;
; 0000 02FB //TCCR0B=0x04;
; 0000 02FC //TCNT0=0xA5;
; 0000 02FD //OCR0A=0x00;
; 0000 02FE //OCR0B=0x00;
; 0000 02FF stop_wait_Rx_timer;
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
; 0000 0300 /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
; 0000 0301 UCSR0A=0x00;
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 0302 UCSR0B=0xc0;
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
; 0000 0303 UCSR0C=0x06;
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
; 0000 0304 UBRR0H=0x00;
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 0305 UBRR0L=0x17;
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
; 0000 0306 
; 0000 0307 // Timer/Counter 1 initialization
; 0000 0308 // Clock source: System Clock
; 0000 0309 // Clock value: Timer 1 Stopped
; 0000 030A // Mode: Normal top=FFFFh
; 0000 030B // OC1A output: Discon.
; 0000 030C // OC1B output: Discon.
; 0000 030D // Noise Canceler: Off
; 0000 030E // Input Capture on Falling Edge
; 0000 030F // Timer 1 Overflow Interrupt: Off
; 0000 0310 // Input Capture Interrupt: Off
; 0000 0311 // Compare A Match Interrupt: Off
; 0000 0312 // Compare B Match Interrupt: Off
; 0000 0313 TCCR1A=0x00;
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
; 0000 0314 TCCR1B=0x00;
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
; 0000 0315 TCNT1H=0x00;
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 0316 TCNT1L=0x00;
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
; 0000 0317 ICR1H=0x00;
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
; 0000 0318 ICR1L=0x00;
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
; 0000 0319 OCR1AH=0x00;
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
; 0000 031A OCR1AL=0x00;
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 031B OCR1BH=0x00;
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
; 0000 031C OCR1BL=0x00;
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
; 0000 031D 
; 0000 031E // Timer/Counter 2 initialization
; 0000 031F // Clock source: System Clock
; 0000 0320 // Clock value: Timer 2 Stopped
; 0000 0321 // Mode: Normal top=FFh
; 0000 0322 // OC2A output: Disconnected
; 0000 0323 // OC2B output: Disconnected
; 0000 0324 ASSR=0x00;
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
; 0000 0325 TCCR2A=0x00;
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
; 0000 0326 TCCR2B=0x00;
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0000 0327 TCNT2=0x00;
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 0328 OCR2A=0x00;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 0329 OCR2B=0x00;
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 032A 
; 0000 032B // External Interrupt(s) initialization
; 0000 032C // INT0: On
; 0000 032D // INT0 Mode: Any change
; 0000 032E // INT1: Off
; 0000 032F // Interrupt on any change on pins PCINT0-7: Off
; 0000 0330 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0331 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0332 wait_startOCD;
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 0333 EIMSK=0x01;
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 0334 EIFR=0x01;
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
; 0000 0335 PCICR=0x00;
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 0336 
; 0000 0337 
; 0000 0338 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0339 TIMSK0=0x00;
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 033A // Timer/Counter 1 Interrupt(s) initialization
; 0000 033B TIMSK1=0x00;
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
; 0000 033C // Timer/Counter 2 Interrupt(s) initialization
; 0000 033D TIMSK2=0x00;
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
; 0000 033E 
; 0000 033F // Analog Comparator initialization
; 0000 0340 // Analog Comparator: Off
; 0000 0341 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0342 ACSR=0x80;
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 0343 ADCSRB=0x00;
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
; 0000 0344 
; 0000 0345 // ADC initialization
; 0000 0346 // ADC Clock frequency: 230,400 kHz
; 0000 0347 // ADC Voltage Reference: AREF pin
; 0000 0348 // ADC Auto Trigger Source: Free Running
; 0000 0349 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 034A // ADC4: Off, ADC5: Off
; 0000 034B if(initVar==1)
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 034C {
; 0000 034D DIDR0=0x3f;
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0000 034E ADMUX=0x20;
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
; 0000 034F ADCSRA=0xcf;
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0000 0350 ADCSRB=ADCSRB||0x00;
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 0351 }
; 0000 0352 else
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 0353 {
; 0000 0354 DIDR0=0x3f;
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
; 0000 0355 ADMUX=0x00;
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
; 0000 0356 ADCSRA=0x0f;
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
; 0000 0357 ADCSRB=ADCSRB||0x00;
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 0358 
; 0000 0359 }
;PCODE: $0000067B VOL: 0
; 0000 035A // SPI initialization
; 0000 035B // SPI Type: Master
; 0000 035C // SPI Clock Rate: 2*115,200 kHz
; 0000 035D // SPI Clock Phase: Cycle Half
; 0000 035E // SPI Clock Polarity: Low
; 0000 035F // SPI Data Order: MSB First
; 0000 0360 SPCR=0x53;
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 0361 SPSR=0x00;
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
; 0000 0362 //SPDR=0x00;
; 0000 0363 //enable_SPI;
; 0000 0364 }
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;
;void system_init(){
; 0000 0366 void system_init(){
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
; 0000 0367 #asm("wdr")
;PCODE: $00000685 VOL: 0
	wdr
;PCODE: $00000686 VOL: 0
; 0000 0368 WDTCSR=0x38;
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0000 0369 WDTCSR=0x0E;
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
; 0000 036A // Crystal Oscillator division factor: 1
; 0000 036B /*#pragma optsize-
; 0000 036C CLKPR=0x80;
; 0000 036D CLKPR=0x00;
; 0000 036E #ifdef _OPTIMIZE_SIZE_
; 0000 036F #pragma optsize+
; 0000 0370 #endif
; 0000 0371   */
; 0000 0372 // Input/Output Ports initialization
; 0000 0373 // Port B initialization
; 0000 0374 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0375 // State7=T State6=T State5=0 State4=T State3=0 State2=0 State1=T State0=T
; 0000 0376 PORTB=0x00;
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
; 0000 0377 DDRB=0x2c;
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0000 0378 
; 0000 0379 // Port C initialization
; 0000 037A // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 037B // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 037C PORTC=0x00;
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
; 0000 037D DDRC=0x00;
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
; 0000 037E 
; 0000 037F // Port D initialization
; 0000 0380 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0381 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0382 //PORTD=0x00;
; 0000 0383 DDRD.3=1;
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
; 0000 0384 PORTD.3=1;
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
; 0000 0385 DDRD.6=1;
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
; 0000 0386 DDRD.7=1;
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0000 0387 PORTD.6=0;
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
; 0000 0388 PORTD.7=0;
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
; 0000 0389 // Timer/Counter 0 initialization
; 0000 038A // Clock source: System Clock
; 0000 038B // Clock value: Timer 0 Stopped
; 0000 038C // Mode: Normal top=FFh
; 0000 038D // OC0A output: Disconnected
; 0000 038E // OC0B output: Disconnected
; 0000 038F //TCCR0A=0x00;
; 0000 0390 //TCCR0B=0x04;
; 0000 0391 //TCNT0=0xA5;
; 0000 0392 //OCR0A=0x00;
; 0000 0393 //OCR0B=0x00;
; 0000 0394 stop_wait_Rx_timer;
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0000 0395 /*USART predefinition: 1200 baud rate, tx enable, all interrutpts enabled 8bit buffer*/
; 0000 0396 UCSR0A=0x00;
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
; 0000 0397 UCSR0B=0xc0;
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 0398 UCSR0C=0x06;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0000 0399 UBRR0H=0x00;
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0000 039A UBRR0L=0x17;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 039B 
; 0000 039C // Timer/Counter 1 initialization
; 0000 039D // Clock source: System Clock
; 0000 039E // Clock value: Timer 1 Stopped
; 0000 039F // Mode: Normal top=FFFFh
; 0000 03A0 // OC1A output: Discon.
; 0000 03A1 // OC1B output: Discon.
; 0000 03A2 // Noise Canceler: Off
; 0000 03A3 // Input Capture on Falling Edge
; 0000 03A4 // Timer 1 Overflow Interrupt: Off
; 0000 03A5 // Input Capture Interrupt: Off
; 0000 03A6 // Compare A Match Interrupt: Off
; 0000 03A7 // Compare B Match Interrupt: Off
; 0000 03A8 TCCR1A=0x00;
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
; 0000 03A9 TCCR1B=0x00;
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
; 0000 03AA TCNT1H=0x00;
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 03AB TCNT1L=0x00;
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 03AC ICR1H=0x00;
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 03AD ICR1L=0x00;
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0000 03AE OCR1AH=0x00;
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
; 0000 03AF OCR1AL=0x00;
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
; 0000 03B0 OCR1BH=0x00;
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0000 03B1 OCR1BL=0x00;
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 03B2 
; 0000 03B3 // Timer/Counter 2 initialization
; 0000 03B4 // Clock source: System Clock
; 0000 03B5 // Clock value: Timer 2 Stopped
; 0000 03B6 // Mode: Normal top=FFh
; 0000 03B7 // OC2A output: Disconnected
; 0000 03B8 // OC2B output: Disconnected
; 0000 03B9 ASSR=0x00;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 03BA TCCR2A=0x00;
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0000 03BB TCCR2B=0x00;
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0000 03BC TCNT2=0x00;
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
; 0000 03BD OCR2A=0x00;
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 03BE OCR2B=0x00;
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
; 0000 03BF 
; 0000 03C0 // External Interrupt(s) initialization
; 0000 03C1 // INT0: On
; 0000 03C2 // INT0 Mode: Any change
; 0000 03C3 // INT1: Off
; 0000 03C4 // Interrupt on any change on pins PCINT0-7: Off
; 0000 03C5 // Interrupt on any change on pins PCINT8-14: Off
; 0000 03C6 // Interrupt on any change on pins PCINT16-23: Off
; 0000 03C7 wait_startOCD;
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0000 03C8 EIMSK=0x01;
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0000 03C9 EIFR=0x01;
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 03CA PCICR=0x00;
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 03CB 
; 0000 03CC 
; 0000 03CD // Timer/Counter 0 Interrupt(s) initialization
; 0000 03CE TIMSK0=0x00;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0000 03CF // Timer/Counter 1 Interrupt(s) initialization
; 0000 03D0 TIMSK1=0x00;
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 03D1 // Timer/Counter 2 Interrupt(s) initialization
; 0000 03D2 TIMSK2=0x00;
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
; 0000 03D3 
; 0000 03D4 // Analog Comparator initialization
; 0000 03D5 // Analog Comparator: Off
; 0000 03D6 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 03D7 ACSR=0x80;
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
; 0000 03D8 ADCSRB=0x00;
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 03D9 
; 0000 03DA // ADC initialization
; 0000 03DB // ADC Clock frequency: 230,400 kHz
; 0000 03DC // ADC Voltage Reference: AREF pin
; 0000 03DD // ADC Auto Trigger Source: Free Running
; 0000 03DE // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 03DF // ADC4: Off, ADC5: Off
; 0000 03E0 DIDR0=0x3f;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 03E1 ADMUX=0x20;
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
; 0000 03E2 ADCSRA=0xcf;
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 03E3 ADCSRB=ADCSRB||0x00;
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 03E4 
; 0000 03E5 // SPI initialization
; 0000 03E6 // SPI Type: Master
; 0000 03E7 // SPI Clock Rate: 2*115,200 kHz
; 0000 03E8 // SPI Clock Phase: Cycle Half
; 0000 03E9 // SPI Clock Polarity: Low
; 0000 03EA // SPI Data Order: MSB First
; 0000 03EB SPCR=0x53;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0000 03EC SPSR=0x00;
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 03ED //SPDR=0x00;
; 0000 03EE //enable_SPI;
; 0000 03EF }
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;
;void update_dynamic_vars()
; 0000 03F2 {
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 03F3 float DAC_zero_current, DAC_measured_current, Lower_Range_value, Upper_Range_value,tmp;
; 0000 03F4 char i,j=0;
; 0000 03F5 long tmp_adc=0;
; 0000 03F6 
; 0000 03F7 union DAC_char_to_float
; 0000 03F8         {
; 0000 03F9         float value_float;
; 0000 03FA         char value_char[4];
; 0000 03FB         }DAC_val;
; 0000 03FC 
; 0000 03FD for (i=0;i<4;i++)
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;	DAC_zero_current -> Y+26
;	DAC_measured_current -> Y+22
;	Lower_Range_value -> Y+18
;	Upper_Range_value -> Y+14
;	tmp -> Y+10
;	i -> R17
;	j -> R16
;	tmp_adc -> Y+6
;	DAC_char_to_float -> Y+30
;	DAC_val -> Y+2
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
; 0000 03FE         {
; 0000 03FF          DAC_val.value_char[i]=Parameter_bank[88+i];
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
; 0000 0400          if(i==3)
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
; 0000 0401                 {
; 0000 0402                 Upper_Range_value=DAC_val.value_float;
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
; 0000 0403                 }
; 0000 0404         }
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
; 0000 0405 for (i=0;i<4;i++)
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
; 0000 0406         {
; 0000 0407          DAC_val.value_char[i]=Parameter_bank[92+i];
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
; 0000 0408          if(i==3)
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
; 0000 0409                 {
; 0000 040A                 Lower_Range_value=DAC_val.value_float;
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
; 0000 040B                 }
; 0000 040C         }
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
; 0000 040D 
; 0000 040E for (i=0;i<4;i++)
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
; 0000 040F         {
; 0000 0410          DAC_val.value_char[i]=Parameter_bank[105+i];
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
; 0000 0411          if(i==3)
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
; 0000 0412                 {
; 0000 0413                 DAC_zero_current=DAC_val.value_float;
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
; 0000 0414                 }
; 0000 0415         }
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
; 0000 0416 for (i=0;i<4;i++)
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
; 0000 0417         {
; 0000 0418          DAC_val.value_char[i]=Parameter_bank[109+i];
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
; 0000 0419          if(i==3)
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
; 0000 041A                 {
; 0000 041B                 DAC_measured_current=DAC_val.value_float;
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
; 0000 041C                 }
; 0000 041D         }
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
; 0000 041E //коэффициент преобразования кода ЦАП в ток, равен отношению приращения тока к приращению битового кода АЦП
; 0000 041F if(adc_data<=0)tmp_adc=0;
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
; 0000 0420 //if(adc_data>ADC_PV_calibration_point1)//для калиброванного значения на 4.8 мА
; 0000 0421 //else
; 0000 0422 else
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
; 0000 0423 {
; 0000 0424 //CalculateCalibrationRates();
; 0000 0425 tmp_adc=(long)((float)((float)(adc_data)/calibrationK) - (float)calibrationB);
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
; 0000 0426 //tmp_adc=(long)((float)tmp_adc*1.118);
; 0000 0427 if(tmp_adc>0xffc0)tmp_adc=0xffc0;
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
; 0000 0428 if(tmp_adc<0x0000)tmp_adc=0x0000;
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
; 0000 0429 }
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
; 0000 042A /*        {
; 0000 042B         tmp_adc=(long)(adc_data-calibration_point1)*((float)(calibration_point2/(calibration_point2-calibration_point1)));//+ADC_PV_calibration_point;
; 0000 042C         DAC_zero_current = 4.8;
; 0000 042D         DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
; 0000 042E         }
; 0000 042F else
; 0000 0430         {
; 0000 0431          if(adc_data<=ADC_PV_zero_val)adc_data=0;
; 0000 0432          else
; 0000 0433                 {
; 0000 0434                 tmp_adc=(long)(adc_data-ADC_PV_zero_val)*((float)(calibration_point2/(calibration_point2-ADC_PV_zero_val)));
; 0000 0435                 }
; 0000 0436 
; 0000 0437         }
; 0000 0438         */
; 0000 0439 DAC_data=((long)(tmp_adc*((DAC_measured_current-DAC_zero_current)/16))+(signed int)((DAC_zero_current)/mamps_toDAC_default_ratio));
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
; 0000 043A if(DAC_data<=DAC_zero_current)DAC_data=DAC_zero_current;
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
; 0000 043B dynamic_variables[1]=(float)DAC_data*mamps_toDAC_default_ratio;//adc_data*mamps_toDAC_default_ratio;//current, mA - ток
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
; 0000 043C dynamic_variables[2]=(float)(100*(dynamic_variables[1]-DAC_zero_current)/(DAC_measured_current-DAC_zero_current));
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
; 0000 043D tmp = Upper_Range_value-Lower_Range_value;
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
; 0000 043E if(tmp==10)
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
; 0000 043F     {
; 0000 0440     Parameter_bank[12]= 10;
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
; 0000 0441     setlevel_0_10;
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
; 0000 0442     rangeIndex = 0;
;PCODE: $000007EC VOL: 0
; 0000 0443     }
; 0000 0444 if(tmp==20)
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
; 0000 0445     {
; 0000 0446     Parameter_bank[12]= 20;
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
; 0000 0447     setlevel_0_20;
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
; 0000 0448     rangeIndex = 1;
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
; 0000 0449     }
; 0000 044A if(tmp==30)
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
; 0000 044B     {
; 0000 044C     Parameter_bank[12]=30;
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; 0000 044D    setlevel_0_30;
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
; 0000 044E    rangeIndex = 2;
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
; 0000 044F     }
; 0000 0450 if(tmp==50)
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
; 0000 0451     {
; 0000 0452     Parameter_bank[12]= 50;
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
; 0000 0453     setlevel_0_50;
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
; 0000 0454     rangeIndex = 3;
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
; 0000 0455     }
; 0000 0456 if(rangeIndexEep!=rangeIndex)
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
; 0000 0457         {
; 0000 0458          //CalculateCalibrationRates();
; 0000 0459         calibrationB=calibrationBeep[rangeIndex];
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
; 0000 045A         calibrationK=calibrationKeep[rangeIndex];
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
; 0000 045B         rangeIndexEep=rangeIndex;
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
; 0000 045C 
; 0000 045D         }
; 0000 045E dynamic_variables[0]=(float)dynamic_variables[2]*(float)((tmp)/100);//100;////primary variable (PV) - виброскорость
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
; 0000 045F }
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;
;void CalculateCalibrationRates()
; 0000 0462 {
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
; 0000 0463 
; 0000 0464 unsigned int calibration_div = 0xf2f7;//0xe4c0;//0xe600;
; 0000 0465 unsigned int calibrationBasic5val = 0x0cc9;
; 0000 0466 //unsigned int calibrationBasic95val = 0xe4c0;
; 0000 0467 //#asm("cli");
; 0000 0468 tmp_calibration =calibration_point2 - calibration_point1;
;PCODE: $0000083E VOL: 0
;	calibration_div -> R16,R17
;	calibrationBasic5val -> R18,R19
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0000 0469 calibrationK = (float)(tmp_calibration/62199.00);//58560.00);//58880.00);
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
; 0000 046A calibrationKeep[rangeIndex] =  calibrationK;
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
; 0000 046B //calibrK = ((tmp_calibration*1000/calibration_div)) ;
; 0000 046C calibrationB = (float)((float)calibration_point1-(float)(calibrationK*calibrationBasic5val)) ;
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
; 0000 046D calibrationBeep[rangeIndex] = calibrationB;
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
; 0000 046E //#asm("sei");
; 0000 046F }
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;
;
;void ResetDeviceSettings(char notreset)
; 0000 0473 {
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
; 0000 0474 int i=0;
; 0000 0475 for(i =0; i<139;i++)
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;	notreset -> Y+2
;	i -> R16,R17
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
; 0000 0476         {
; 0000 0477         if (i==98)i=100;
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
; 0000 0478         else Parameter_bank[i]=Parameter_defaults[i];
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
; 0000 0479         }
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
; 0000 047A         for (i=0; i<4; i++)
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
; 0000 047B         {
; 0000 047C         calibrationBeep[i]=0;
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
; 0000 047D         calibrationKeep[i]=1;
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
; 0000 047E         ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
; 0000 047F         ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
; 0000 0480         }
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
; 0000 0481         calibrationB=0;
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
; 0000 0482         calibrationK=1;
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
; 0000 0483         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
; 0000 0484         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
; 0000 0485         rangeIndexEep=1;
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
; 0000 0486         rangeIndex=rangeIndexEep;
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
; 0000 0487         //Upper_Range_value = 20;
; 0000 0488         //Lower_Range_value = 0;
; 0000 0489 }
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;
;void PerformDeviceApplicationErase()
; 0000 048C {
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
; 0000 048D MCUCR = 0x01;
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
; 0000 048E MCUCR = 0x02;
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
; 0000 048F Parameter_bank[0]=0xee;
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
; 0000 0490 Parameter_bank[2]=0xa3;
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
; 0000 0491 voidFuncPtr=(void(*)(void))0x1C00;   //адресс куда переходим
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
; 0000 0492 voidFuncPtr();
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
; 0000 0493 }
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;
;void LoadCalibrationSettings(char flag)
; 0000 0496 {
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
; 0000 0497 //#asm("cli");
; 0000 0498 int i=0;
; 0000 0499 if(flag==0x01)
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;	flag -> Y+2
;	i -> R16,R17
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
; 0000 049A         {
; 0000 049B         calibration_point1=ADC_PV_calibration_point1[rangeIndexEep];
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
; 0000 049C         calibration_point2=ADC_PV_calibration_point2[rangeIndexEep];
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
; 0000 049D         calibrationB=calibrationBeep[rangeIndexEep];
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
; 0000 049E         calibrationK=calibrationKeep[rangeIndexEep];
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
; 0000 049F         rangeIndex=rangeIndexEep;
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0000 04A0         }
; 0000 04A1 else
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
; 0000 04A2         {
; 0000 04A3         rangeIndexEep = 1;
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
; 0000 04A4         rangeIndex = 1;
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
; 0000 04A5         for (i=0; i<4; i++)
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
; 0000 04A6             {
; 0000 04A7             calibrationBeep[i]=0;
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
; 0000 04A8             calibrationKeep[i]=1;
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
; 0000 04A9             ADC_PV_calibration_point1[i] = 0x0cc9;//0x0bc0; //0x0cc0;
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
; 0000 04AA             ADC_PV_calibration_point2[i] = 0xffc0;//0xe4c0; //0xf2c0;
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
; 0000 04AB             }
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
; 0000 04AC         calibrationB=0;
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
; 0000 04AD         calibrationK=1;
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
; 0000 04AE         calibration_point1=0x0cc9;//0x0bc0;//0x0cc0;
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
; 0000 04AF         calibration_point2=0xffc0;//0xe4c0;//0xf2c0;
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
; 0000 04B0         }
;PCODE: $0000093C VOL: 0
; 0000 04B1   //      #asm("sei");
; 0000 04B2 }
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;
;void main(void)
; 0000 04B5 {
;PCODE: $00000944 VOL: 0
; 0000 04B6 // Declare your local variables here
; 0000 04B7 //размещаем по адресу 0х00200(адрес указывается в словах, поэтому там будет в 2 раза меньше)
; 0000 04B8 
; 0000 04B9 int i,k=0;
; 0000 04BA int char_val=0x00,data, j = 0;
; 0000 04BB char dataH,dataL,crcok_flag=0;
; 0000 04BC 
; 0000 04BD //flash unsigned int* SERIAL = &serial_number;
; 0000 04BE crc = 0xffff;
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;	i -> R16,R17
;	k -> R18,R19
;	char_val -> R20,R21
;	data -> Y+5
;	j -> Y+3
;	dataH -> Y+2
;	dataL -> Y+1
;	crcok_flag -> Y+0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
; 0000 04BF delay_ms(100);
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
; 0000 04C0 Parameter_bank[0]=0x11;
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
; 0000 04C1 Parameter_bank[2]=0xB3;
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
; 0000 04C2 //serial = 0xabcd;
; 0000 04C3 //#asm
; 0000 04C4 //    .CSEG
; 0000 04C5 //    .org    0x00080
; 0000 04C6 //    .DW 0xabcd, 0x0123
; 0000 04C7 //    .org    0x00082
; 0000 04C8 //    RET
; 0000 04C9 //    .org    0x38
; 0000 04CA //    serial1:  .BYTE 1
; 0000 04CB //    .org    0x39
; 0000 04CC //    serial2:  .BYTE 1
; 0000 04CD //    .org    0x4a
; 0000 04CE //    serial3:  .BYTE 1
; 0000 04CF    //.db 0xab, 0xcd , $ef , $77
; 0000 04D0   //   .org    0x00084
; 0000 04D1   //   RET
; 0000 04D2 //
; 0000 04D3    // .CSEG
; 0000 04D4 //#endasm
; 0000 04D5 //long serial = 0xabcdef12;
; 0000 04D6 //system_init(0);
; 0000 04D7  #asm("wdr")
;PCODE: $00000960 VOL: 0
	wdr
;PCODE: $00000961 VOL: 0
; 0000 04D8 while ((data<=65534)|(j<=16382))
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
; 0000 04D9 {
; 0000 04DA    // if(j==0x1BDE)j+=2;//перескакиваем адрес с контрольной суммой для ПО загрузчика для ПК
; 0000 04DB     if(j==0xDEF)j++;
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
; 0000 04DC     data= read_program_memory (j);
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
; 0000 04DD     dataH = (int)data>>8;
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
; 0000 04DE     dataL = data;
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
; 0000 04DF     CRC_update(dataH);
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
; 0000 04E0     CRC_update(dataL);
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
; 0000 04E1     //crc_rtu(data);
; 0000 04E2     //j++;
; 0000 04E3     j=j+2;
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
; 0000 04E4 }
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
; 0000 04E5 crceep = crc;
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
; 0000 04E6 //if(crc==crcstatic)system_init(1);
; 0000 04E7 //else system_init(0);
; 0000 04E8  system_init();
;PCODE: $0000098A VOL: 0
; 0000 04E9 #asm
;PCODE: $0000098B VOL: 0
; 0000 04EA     in   r30,spsr
    in   r30,spsr
;PCODE: $0000098C VOL: 0
; 0000 04EB     in   r30,spdr
    in   r30,spdr
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
; 0000 04EC #endasm
; 0000 04ED //serial_address = *serial;
; 0000 04EE //normal_mode;
; 0000 04EF #asm("sei")
;PCODE: $0000098F VOL: 0
	sei
;PCODE: $00000990 VOL: 0
; 0000 04F0 
; 0000 04F1 setlevel_0_20;
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
; 0000 04F2 if(crceep==crcstatic)
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
; 0000 04F3     {
; 0000 04F4 
; 0000 04F5        // Parameter_bank[107]=0x80;
; 0000 04F6 //        Parameter_bank[10]=0xBF;
; 0000 04F7 //        Parameter_bank[11]=0xBC;
; 0000 04F8         LoadCalibrationSettings(CalibrationConfigChanged);
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
; 0000 04F9         CalculateCalibrationRates();
;PCODE: $000009A0 VOL: 0
; 0000 04FA         transmit_SPI(DAC_data,2);
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
; 0000 04FB         update_dynamic_vars();
;PCODE: $000009A6 VOL: 0
; 0000 04FC         //enable_uart;
; 0000 04FD         RxEn;
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
; 0000 04FE         //PORTD=0x08;
; 0000 04FF         Recieve;
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
; 0000 0500         //disable_eints;
; 0000 0501         while (1)
;PCODE: $000009AD VOL: 0
; 0000 0502               {
; 0000 0503                 #asm("wdr")
;PCODE: $000009AE VOL: 0
	wdr
;PCODE: $000009AF VOL: 0
; 0000 0504                 //delay_ms(20);
; 0000 0505                 //enable_SPI;
; 0000 0506 
; 0000 0507 
; 0000 0508         //        }
; 0000 0509         if(message_recieved)
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
; 0000 050A                 {
; 0000 050B                  transmit_HART();
;PCODE: $000009B3 VOL: 0
; 0000 050C                 }
; 0000 050D         //else
; 0000 050E         //        {
; 0000 050F                 ADCSRA=0xcf;
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
; 0000 0510                 update_dynamic_vars();
;PCODE: $000009B7 VOL: 0
; 0000 0511                 PORTB.2=1;
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
; 0000 0512                 transmit_SPI(DAC_data,2);
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
; 0000 0513                 PORTB.2=0;
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
; 0000 0514                // }
; 0000 0515         }
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
; 0000 0516     }
; 0000 0517 else
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
; 0000 0518     {
; 0000 0519         RxEn;
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
; 0000 051A         //PORTD=0x08;
; 0000 051B         Recieve;
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
; 0000 051C //               Parameter_bank[107]=0x60;
; 0000 051D //               Parameter_bank[10]=(char)crc;
; 0000 051E //               Parameter_bank[11]=(char)(crc>>8);
; 0000 051F 
; 0000 0520         while (1)
;PCODE: $000009CB VOL: 0
; 0000 0521               {
; 0000 0522               // DAC_zero_current=3.5;
; 0000 0523 
; 0000 0524                 #asm("wdr")
;PCODE: $000009CC VOL: 0
	wdr
;PCODE: $000009CD VOL: 0
; 0000 0525                 if(message_recieved)
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
; 0000 0526                 {
; 0000 0527                  transmit_HART();
;PCODE: $000009D1 VOL: 0
; 0000 0528                 }
; 0000 0529                 ADCSRA=0x0f;
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 052A                 adc_data=0;
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
; 0000 052B                 update_dynamic_vars();
;PCODE: $000009D7 VOL: 0
; 0000 052C                 PORTB.2=1;
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
; 0000 052D                 transmit_SPI(DAC_data,2);
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
; 0000 052E                 PORTB.2=0;
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
; 0000 052F 
; 0000 0530         }
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
; 0000 0531     }
;PCODE: $000009E3 VOL: 0
; 0000 0532 #asm
;PCODE: $000009E4 VOL: 0
; 0000 0533 .CSEG
.CSEG
;PCODE: $000009E5 VOL: 0
; 0000 0534 varlist: .DW 0x4fd1
varlist: .DW 0x4fd1
;PCODE: $000009E6 VOL: 0
; 0000 0535 .org 0x0e6f                  //адрес, по которому будет распологаться наш CRC - 0x1BCC, длина - 2 байта , эти 2 байта для проверки со стороны МК мы исключаем, просто перескочив их
.org 0x0e6f                  //адрес, по которому будет распологаться наш CRC - 0x1BCC, длина - 2 байта , эти 2 байта для проверки со стороны МК мы исключаем, просто перескочив их
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
; 0000 0536 #endasm
; 0000 0537 }
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
